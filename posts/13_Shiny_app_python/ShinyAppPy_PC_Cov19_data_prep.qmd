---
title: Shinylive app in Python
subtitle: Data preparation for compounds in COVID-19 clinical trials
author: Jennifer HY Lin
date: '2023-5-8'
draft: false
jupyter: python3
categories:
  - Python
  - Shiny
  - Polars
  - PubChem
  - Cheminformatics
---

##### **Brief introduction**

Since I've had a lot of fun building a Shiny app in R last time, I was on track to build another Shiny app again but using Python instead. So here in this post, I'll talk about the data wrangling process to prepare the final dataset needed to build a Shinylive app in Python. The actual Shinylive app deployment and access will be shown in a separate post after this one.

<br>

##### **Source of data**

The dataset used for this Shiny app in Python was from PubChem ([link here](https://pubchem.ncbi.nlm.nih.gov/#tab=compound&query=covid-19%20clinicaltrials)). There were a total of 631 compounds at the time when I downloaded them as .csv file, along with their relevant compound data. I only picked this dataset randomly, as the focus would be more on app building, but it was nice to see an interactive web app being built and used for a domain such as pharmaceutical research.

<br>

##### **Import Polars**

Polars dataframe library was used again this time.

```{python}
import polars as pl
```

<br>

##### **Reading .csv file**

```{python}
pc = pl.read_csv("pubchem.csv")
pc.head()
```

<br>

##### **Quick look at the data**

I decided to comment out the code below to keep the post at a reasonable length for reading purpose, but they were very handy for a quick glimpse of the data content.

```{python}
# Quick overview of the variables in each column in the dataset
# Uncomment line below if needed to run
#print(pc.glimpse())

# Quick look at all column names
# Uncomment line below if needed to run
#pc.columns
```

<br>

##### **Check for nulls in dataset**

```{python}
pc.null_count()
```

<br>

##### **Change column names as needed**

```{python}
# Change column names
pc_cov = pc.rename(
    {
        "cmpdname": "Compound name",
        "cmpdsynonym": "Synonyms",
        "mw": "Molecular weight",
        "mf": "Molecular formula",
        "polararea": "Polar surface area",
        "complexity": "Complexity",
        "xlogp": "Partition coefficients",
        "heavycnt": "Heavy atom count",
        "hbonddonor": "Hydrogen bond donor count",
        "hbondacc": "Hydrogen bond acceptor count",
        "rotbonds": "Rotatable bond count",
        "exactmass": "Exact mass",
        "monoisotopicmass": "Monoisotopic mass",
        "charge": "Formal charge",
        "covalentunitcnt": "Covalently-bonded unit count",
        "isotopeatomcnt": "Isotope atom count",
        "totalatomstereocnt": "Total atom stereocenter count",
        "definedatomstereocnt": "Defined atom stereocenter count",
        "undefinedatomstereocnt": "Undefined atoms stereocenter count",
        "totalbondstereocnt": "Total bond stereocenter count",
        "definedbondstereocnt": "Defined bond stereocenter count",
        "undefinedbondstereocnt": "Undefined bond stereocenter count",
        "meshheadings": "MeSH headings"
    }
)

pc_cov.head()
```

<br>

##### **Definitions of molecular properties in this PubChem dataset**

The definitions for some of the column names were shown below, which were mainly derived and adapted from PubChem:

*Note: please refer to PubChem documentations for full definitions*

-   *Molecular weight* - molecular mass of compounds measured in daltons

-   *Topological polar surface area* - measured as an estimate of polar surface area of a molecule (i.e. the surface sum over polar atoms in a molecule), with units in angstrom squared (Ã…^2^)

-   *Complexity* - complexity rating for compounds, based on Bertz/Hendrickson/Ihlenfeldt formula as a rough estimation of how complex a compound was structurally

-   *Partition coefficients* (xlogp) - predicted octanol-water partition coefficient as a measure of the hydrophilicity or hydrophobicity of a molecule

-   *Heavy atom count* - number of heavy atoms e.g. non-hydrogen atoms in the compound

-   *Hydrogen bond donor count* - number of hydrogen bond donors in the compound

-   *Hydrogen bond acceptor count* - number of hydrogen bond acceptors in the compound

-   *Rotatable bond count* - defined as any single-order non-ring bond, where atoms on either side of the bond were in turn bound to non-terminal heavy atoms (e.g. non-hydrogen). Rotation around the bond axis would change overall molecule shape and generate conformers which could be distinguished by standard spectroscopic methods

-   *Exact mass* - exact mass of an isotopic species, obtained by summing masses of individual isotopes of the molecule

-   *Monoisotopic mass* - sum of the masses of atoms in a molecule, using unbound, ground-state, rest mass of principal (or most abundant) isotope for each element instead of isotopic average mass

-   *Formal charge* - the difference between the number of valence electrons of each atom, and the number of electrons the atom was associated with, assumed any shared electrons were equally shared between the two bonded atoms

-   *Covalently-bonded unit count* - a group of atoms connected by covalent bonds, ignoring other bond types (or a single atom without covalent bonds), representing number of such units in the compound

-   *Isotope atom count* - number of isotopes that were not most abundant for the corresponding chemical elements. Isotopes were variants of a chemical element that differed in neutron number

-   *Defined atom stereocenter count* - atom stereocenter (or chiral center) was where an atom was attached to 4 different types of atoms or groups of atoms in a tetrahedral arrangement. It could either be (R)- or (S)- configurations. Some of the compounds e.g. racemic mixtures, could have undefined atom stereocenter, where (R/S)-config was not specifically defined. Defined atom stereocenter count was the number of atom stereocenters where configurations were specifically defined

-   *Undefined atoms stereocenter count* - this was the undefined version of the atoms stereocenter count

-   *Defined bond stereocenter count* - bond stereocenter (or non-rotatable bond) was where two atoms could have different arrangement e.g. in *cis*- & *trans*- forms of butene around its double bond. Some compounds could have an undefined bond stereocenter (stereochemistry not specifically defined). Defined bond stereocenter count was the number of bond stereocenters where configurations were specifically defined.

-   *Undefined bond stereocenter count* - this was the undefined version of the bond stereocenter count

<br>

##### **Convert data type for selected columns**

```{python}
# Convert data type - only for partition coefficients column (rest were okay)
pc_cov = pc_cov.with_column((pl.col("Partition coefficients")).cast(pl.Float64, strict = False))
pc_cov.head()
```

<br>

##### **Select columns for data visualisations**

The idea was really only keeping all the numerical columns for some data visualisations later. So I've dropped all the other columns in texts or of the string types.

```{python}
# Drop unused columns in preparation for data visualisations
pc_cov = pc_cov.drop([
    "cid", 
    "Synonyms",
    "Molecular formula",
    "inchi",
    "isosmiles",
    "canonicalsmiles",
    "inchikey",
    "iupacname",
    "pclidcnt",
    "gpidcnt",
    "MeSH headings",
    "annothits",
    "annothitcnt",
    "aids",
    "cidcdate",
    "sidsrcname",
    "depcatg",
    "annotation"
])

pc_cov.head()
                     
```

<br>

##### **Quick summary statistics of columns**

```{python}
# Overall descriptive statistics of kept columns
pc_cov.describe()
```

<br>

##### **Conditional assignments in Polars**

The longer I've used Polars, the more I like its coding styles of chaining a string of different code functions together to manipulate dataframes in one go. This usually might mean that we could avoid writing some repeated loop functions to achieve the same results. In the example below, I'd like to show how to chain "when-then-otherwise" expressions by using Polars.

<br>

###### **Chaining when-then-otherwise expressions - creating groups in data**

I had the idea of separating all data into 3 different ranges of partition coefficients, so that this could be shown visually in plots. One of the possible ways (other than writing a loop function), or really the long way, to do this might be like the code shown below:

``` {{python}}
part_coef_1 = pc_cov.filter(pl.col("Partition_coef") <= -10)
part_coef_2 = pc_cov.filter((pl.col("Partition_coef") >= -11) & (pl.col("Partition_coef") <= 5))
part_coef_3 = pc_cov.filter(pl.col("Partition_coef") >= 6)
```

A shorter and probably more elegant way was to use the "when-then-otherwise" expression in Polars for conditional assignments (the following code snippet was adapted with thanks to the author of Polars, Ritchie Vink and also the good old Stack Overflow):

```{python}
pc_cov = pc_cov.with_column(
    pl.when((pl.col("Partition coefficients") <= -10))
    .then("Smaller than -10")
    .when((pl.col("Partition coefficients") >= -11) & (pl.col("Partition coefficients") <= 5))
    .then("Between -11 and 5")
    .otherwise("Larger than 6")
    .alias("Part_coef_group")
)

pc_cov.head(10)

# a new column would be added to the end of the dataframe 
# with a new column name, "Part_coef_group" 
# (scroll to the very right to see the added column)
```

<br>

##### **Import Plotly**

Time for some data vizzes - importing Plotly first.

```{python}
import plotly.express as px
```

<br>

##### **Some examples of data visualisations**

Below were some of the examples of building plots by using Plotly.

###### **Partition coefficients vs. Molecular weights**

```{python}
fig = px.scatter(x = pc_cov["Partition coefficients"], 
                 y = pc_cov["Molecular weight"], 
                 hover_name = pc_cov["Compound name"],
                 color = pc_cov["Part_coef_group"],
                 width = 800, 
                 height = 400,
                 title = "Partition coefficients vs. molecular weights for compounds used in COVID-19 clinical trials")

fig.update_layout(
    title = dict(
        font = dict(
            size = 15)),
    title_x = 0.5,
    margin = dict(
        l = 20, r = 20, t = 40, b = 3),
    xaxis = dict(
        tickfont = dict(size = 9), 
        title = "Partition coefficients"
    ),
    yaxis = dict(
        tickfont = dict(size = 9), 
        title = "Molecular weights"
    ),
    legend = dict(
        font = dict(
            size = 9)))

fig.show()
```

<br>

###### **Molecular weights vs. Complexity**

```{python}
fig = px.scatter(x = pc_cov["Molecular weight"], 
                 y = pc_cov["Complexity"], 
                 hover_name = pc_cov["Compound name"],
                 #color = pc_cov["Part_coef_group"],
                 width = 800, 
                 height = 400,
                 title = "Molecular weights vs. complexity for compounds used in COVID-19 clinical trials")

fig.update_layout(
    title = dict(
        font = dict(
            size = 15)),
    title_x = 0.5,
    margin = dict(
        l = 20, r = 20, t = 40, b = 3),
    xaxis = dict(
        tickfont = dict(size = 9), 
        title = "Molecular weights"
    ),
    yaxis = dict(
        tickfont = dict(size = 9), 
        title = "Complexity"
    ),
    legend = dict(
        font = dict(
            size = 9)))

fig.show()
```

<br>

##### **Export prepared dataset**

Two of the possible options to export the dataset for use in a Shiny app could be:

1.  Convert Polars dataframe into a Pandas dataframe, so that it could be imported into the app for use (Polars not directly supported in Shiny for Python yet, but we could use its to_pandas() function to coerce an object e.g. a dataframe to be converted into a Pandas dataframe).

2.  Another option was to save Polars dataframe as .csv file, then read in this file in the app.py script by using Pandas (which was the method I used for this particular app)

``` {{python}}
# --If preferring to use Pandas--
# Convert Polars df into a Pandas df if needed
df_name = df_name.to_pandas()

# Convert the Pandas df into a csv file using Pandas 
df_name.to_csv("csv_file_name.csv", sep = ",")

# --If preferring to use Polars--
# Simply write a Polars dataframe into a .csv file
df_name.write_csv("csv_file_name.csv", separator = ",")
```
