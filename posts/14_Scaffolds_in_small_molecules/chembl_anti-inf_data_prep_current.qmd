---
title: "Working with scaffolds in small molecules"
subtitle: "Manipulating SMILES strings"
author: Jennifer HY Lin
date: '2023-7-6'
draft: false
categories:
  - RDKit
  - Datamol
  - Python
  - Pandas
  - Polars
  - Cheminformatics
jupyter: python3
---

#### **Features in post**

This post will mainly be about the following:

-   Pre-process and standardise compounds (e.g. converting SMILES[^1] into SELFIES[^2] and other forms)

-   Obtain scaffolds for compounds

-   Align scaffolds of compounds

-   Query target scaffolds against a dataframe of compounds:

    -   Function for saving multiple SMILES in .smi file

    -   Function for converting .smi file into a list to query and match scaffolds of interests

    -   Identify any similarities or differences in target compound of interest against other compounds in a dataframe

[^1]: Simplified Molecular Input Line Entry Systems

[^2]: SELF-referencIng Embedded Strings

<br>

#### **Quick words**

I've always wanted to shorten my posts to a more readable length, but it was proven to be hard again, as this post was much longer than expected. Page content links are available on the right-hand side if needing to jump to sections for quick reads.

<br>

#### **Key question to answer**

Will the scaffold of compound 3 (compound of interest) be similar to the scaffolds of any approved anti-infectives in ChEMBL database?

<br>

#### **Import libraries**

The following libraries were used in this post.

```{python}
import polars as pl
import pandas as pd
import datamol as dm
import mols2grid

from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem.rdmolfiles import SmilesWriter, SmilesMolSupplier

# Following library was modified & adapted from  
# Patrick Walters' tutorial on "Identifying Scaffolds" 
# - links provided in "scaffold_finder library" section under
# the subheading of "Combining ChEMBL anti-infectives and FtsZ compounds"
from scaffold_finder_test import find_scaffolds, get_molecules_with_scaffold
```

<br>

#### **ChEMBL anti-infectives**

##### **Data cleaning**

The dataset used was extracted from ChEMBL database, with a focus on the anti-infectives.

```{python}
df_ai = pl.read_csv("chembl_anti-inf.csv", sep = ";")
df_ai
```

```{python}
# Uncomment below if requiring a quick overview on all column names, 
# first ten variables in each column and each column data type
#print(df_ai.glimpse())
```

Under the "Availability Type" column, there were a few different availabilities for each anti-bacterial such as, "Discontinued", "Withdrawn", "Unknown" and "Prescription Only".

```{python}
df_ai.groupby("Availability Type").count()
```

I only wanted to choose the "Prescription Only" ones, so the following filter condition was applied to the dataframe.

```{python}
df_ai_rx = df_ai.filter(pl.col("Availability Type") == "Prescription Only")
df_ai_rx.head()
```

In preparation for possible future work on building machine learning models on this line of work, I looked into Datamol's function on pre-processing molecules (shown in the next section), as it involved converting SMILES strings into SELFIES, which were considered to be more robust than SMILES.

However, I kept running into an error, with the error message showing the SMILES column was empty. After a few tries I realised that I've actually forgotten to check whether there were any missing SMILES in the column. So here I've filtered the SMILES column to look for any missing SMILES

```{python}
df_ai_rx.filter(pl.col("Smiles") == "")
```

Neomycin was the only compound found to have no SMILES recorded. To fix this error, I then used the "when-then-otherwise" expression in Polars again (used in previous post) to replace the empty string in the dataframe. A code example below was kindly adapted from StackOverflow from [this link](https://stackoverflow.com/questions/72292048/idiomatic-replacement-of-empty-string-with-pl-null-null-in-polars), and code example as shown below.

``` {{python}}
only_these = ['str1', 'str2']
df.with_columns([
    pl.when(pl.col(only_these).str.lengths() == 0)
    .then(None)
    .otherwise(pl.col(only_these))
    .keep_name()
])
```

This was what I've done to amend the issue.

```{python}
# Canonical SMILES for neomycin was extracted from PubChem 
# (https://pubchem.ncbi.nlm.nih.gov/compound/Neomycin)

df_ai_rx = df_ai_rx.with_columns([
    pl.when(pl.col("Smiles").str.lengths() == 0)
    .then("C1C(C(C(C(C1N)OC2C(C(C(C(O2)CN)O)O)N)OC3C(C(C(O3)CO)OC4C(C(C(C(O4)CN)O)O)N)O)O)N")
    .otherwise(pl.col("Smiles"))
    .keep_name()
])

df_ai_rx
```

```{python}
# Keeping only selected columns with information needed for later use
df_ai_rx = df_ai_rx.select(["Smiles", "Name", "USAN Definition", "Level 4 ATC Codes"])
df_ai_rx.head()
```

The "Smiles" column name was changed below to ensure \_preprocess function would work since the parameter "smiles_column" in \_preprocess function had "smiles" with lowercase "s" (this of course could be the other way round, where we could change the parameter name in the function instead - the column name and parameter name had to match for the function to work). The "Name" column was changed accordingly for similar reason.

```{python}
df_ai_rx = df_ai_rx.rename({"Smiles": "smiles", "Name": "names"})
df_ai_rx.head()
```

I also wanted to change the all capitalised compound names into lowercases for the ease of reading.

```{python}
# Convert all compounds to lowercases
df_ai_rx = df_ai_rx.with_columns(pl.col("names").str.to_lowercase())
df_ai_rx.head()
```

Since Datamol was built as a thin layer library on top of RDKit, which was really only compatible with Pandas, I added the following step to convert the dataframe into a Pandas one.

```{python}
df_ai_pd = df_ai_rx.to_pandas()
df_ai_pd.head()
```

```{python}
# Check the dataframe has been converted from Polars to Pandas
type(df_ai_pd)
```

<br>

##### **Pre-processing and standardising molecules**

I have borrowed and adapted the \_preprocess function from Datamol ([link here](https://docs.datamol.io/stable/tutorials/Preprocessing.html)), as shown below. One of the convenient features in this function was that it also included a conversion from "mol" (RDKit molecule) to SELFIES amongst several other common molecular representations such as InChI[^3] and SMILES.

[^3]: International Chemical Identifier

```{python}

# Pre-process molecules using _preprocess function - adapted from datamol.io

smiles_column = "smiles"

dm.disable_rdkit_log()

def _preprocess(row):
    mol = dm.to_mol(row[smiles_column], ordered=True)
    mol = dm.fix_mol(mol)
    mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)
    mol = dm.standardize_mol(
        mol,
        disconnect_metals=False,
        normalize=True,
        reionize=True,
        uncharge=False,
        stereo=True,
    )

    row["standard_smiles"] = dm.standardize_smiles(dm.to_smiles(mol))
    row["selfies"] = dm.to_selfies(mol)
    row["inchi"] = dm.to_inchi(mol)
    row["inchikey"] = dm.to_inchikey(mol)
    return row
```

<br>

##### **Converting multiple SMILES into multiple SELFIES**

There were two ways to convert multiple SMILES into multiple SELFIES (there might be more options, but I've found these two for now):

```{python}
# Method one - using lambda function:
# Uncomment code below to run
# df_ai_pd["selfies"] = df_ai_pd["Smiles"].apply(lambda x: dm.to_selfies(x))
# df_ai_pd

# Method two - using _preprocess function:
data_mol_clean = df_ai_pd.apply(_preprocess, axis = 1)
data_mol_clean
```

##### **Converting a single SMILES into a SELFIES**

To convert only one SMILES string into a SELFIES, the following code example should work with Datamol.

``` {{python}}
selfies = dm.to_selfies("O=C(N[C@H](CO)[C@H](O)c1ccc([N+](=O)[O-])cc1)C(Cl)Cl")
selfies
```

<br>

##### **Visualise compounds in 2D using Datamol**

The images generated below might be quite small to see or read clearly. I've tried to increase the molecule size (mol_size) and also reduce the column numbers, but it still appeared the same. However, if the code was run in say VS Code, the compound images would appear larger when increasing the mol_size.

```{python}
# Grab all SMILES of the cleaned/pre-processed ChEMBL anti-infectives
df_ai_sm = data_mol_clean["standard_smiles"]

# Load a list of these molecules in SMILES
# dm.to_mol() has sanitize = True set as default
mol_ls = [dm.to_mol(smile) for smile in df_ai_sm]

# Alternative way to convert dataframe into a list of mols (same as mol_ls)
# mols = dm.from_df(df_name, smiles_column = "Smiles")

# Add compound name for each 2D image
legends_c = list(data_mol_clean["names"])

# Convert the list of molecules into 2D images
dm.to_image(mol_ls, n_cols = 4, mol_size = (400, 400), legends = legends_c)
```

<br>

##### **Extract scaffolds**

```{python}
# Extract Murcko scaffolds from mol_ls (ChEMBL anti-infectives)
m_scaffolds = [dm.to_scaffold_murcko(mol) for mol in mol_ls]
dm.to_image(m_scaffolds, mol_size = (400, 400), legends = legends_c)
```

<br>

#### **Filamenting temperature-sensitive mutant Z (FtsZ) compounds**

##### **Data cleaning**

This section focuses on 3 compounds from this paper: [Lin, H.-Y.J.; Battaje, R.R.; Tan, J.; Doddareddy, M.; Dhaked, H.P.S.; Srivastava, S.; Hawkins, B.A.; Al-Shdifat, L.M.H.; Hibbs, D.E.; Panda, D.; et al. Discovery of 2',6-Bis(4-hydroxybenzyl)-2-acetylcyclohexanone, a Novel FtsZ Inhibitor. Molecules 2022, 27, 6993](https://doi.org/10.3390/molecules27206993). Obviously from the authorship shown, this was from my PhD work and out of interests, I just wanted to look a bit further into them and compare with known anti-infectives.

Before I started cleaning any data on FtsZ compounds, I found this useful website, [OPSIN: Open Parser for Systematic IUPAC nomenclature](https://opsin.ch.cam.ac.uk/), with this [link](https://pubs.acs.org/doi/full/10.1021/ci100384d) to the journal paper as an acknowledgement of the work. I've managed to convert these 3 FtsZ compounds by using their IUPAC names, which were inputted into OPSIN, and converted into the corresponding InChI or SMILES strings.

After that, I started by converting the InChI of compound 1 into a RDKit molecule, which could be visualised in 2D below.

```{python}
# Convert compound 1 to mol from InChI
cpd1 = dm.from_inchi("InChI=1S/C22H20O4/c23-18-9-4-15(5-10-18)8-13-21(25)20-3-1-2-17(22(20)26)14-16-6-11-19(24)12-7-16/h4-14,20,23-24H,1-3H2/b13-8+,17-14+")
cpd1
```

I then converted compound 2 using SMILES string instead.

```{python}
# Convert compound 2 SMILES to mol
cpd2 = dm.to_mol("OC1=C(C=CC=C1CC1=CC=C(C=C1)O)C(CCC1=CC=C(C=C1)O)=O")
cpd2
```

Same thing followed for compound 3.

```{python}
# Convert compound 3 SMILES to mol
cpd3 = dm.to_mol("OC1=CC=C(CC2C(C(CCC2)C(CCC2=CC=C(C=C2)O)=O)=O)C=C1")
cpd3
```

```{python}
# Save these 3 compounds into a list
mol_lst = [cpd1, cpd2, cpd3]
mol_lst
```

```{python}
# Convert a list of mols into a dataframe
df = dm.to_df(mol_lst)
df
```

Then the compound numbers were added into the dataframe as well.

```{python}
names = ["Compound_1", "Compound_2", "Compound_3"]
df["names"] = names
df
```

<br>

##### **Pre-processing and standardising molecules**

```{python}
# Pre-processing FtsZ compounds
data_cleaned = df.apply(_preprocess, axis=1)
data_cleaned
```

<br>

##### **Visualise compounds in 2D using Datamol**

```{python}
# Grab all SMILES from cleaned FtsZ compound dataset
df_ai_ftsz = data_cleaned["standard_smiles"]

# Load a list of these molecules in SMILES
mol_ftsz_list = [dm.to_mol(smile) for smile in df_ai_ftsz]

# Add compound names for each 2D image of compounds
legends = list(data_cleaned["names"])

# Convert the list of molecules into 2D images
dm.to_image(mol_ftsz_list, n_cols = 5, mol_size = (400, 400), legends = legends)
```

<br>

##### **Extract scaffolds**

```{python}
# Get Murcko scaffolds of FtsZ compounds
m_ftsz_scaffolds = [dm.to_scaffold_murcko(mol) for mol in mol_ftsz_list]
dm.to_image(m_ftsz_scaffolds, mol_size = (400, 400), legends = legends)
```

<br>

#### **Combining ChEMBL anti-infectives and FtsZ compounds**

##### **Combining dataframes**

In this part, I wanted to combine the two dataframes I had from above, since my next step was to compare the scaffolds between ChEMBL prescription-only anti-infectives and FtsZ compounds.

```{python}
combined_lists = [data_mol_clean, data_cleaned]
full_data = pd.concat(combined_lists, ignore_index = True)
full_data.head()
```

```{python}
# Specifying only the standard SMILES column
df_full = full_data["standard_smiles"]
df_full
```

```{python}
# Convert the standard SMILES into RDKit molecules
mol_full = [dm.to_mol(smile) for smile in df_full]
```

<br>

##### **Aligning all the scaffolds**

Here, all the scaffolds from both dataframes of compounds were aligned by using Datamol's auto_align_many(). The images of all the aligned molecules were generated in the end. The compound structures did re-align, but unfortunately it only showed up to a maximum of 50 compounds only (the maximum number of molecules to be shown in Datamol was set to 32 as default; this number was pushed up to and truncated at 50 in the warning message from RDKit when attempting to run a total of 75 compounds using the Datamol library, without looking further into other ways to alter this for now).

```{python}
aligned_list = dm.align.auto_align_many(mol_full, partition_method = "anon-scaffold")
dm.to_image(aligned_list, mol_size = (400, 400), max_mols = 50)
```

An attempt to combine Datamol's auto_align_many() with mols2grid library was shown below. Unfortunately, the compounds did not re-align but all 75 compounds were shown in the grids.

```{python}
mols2grid.display(aligned_list)
```

##### **mols2grid library**

Since I've started using mols2grid here, I thought to show an example of this library by combining all 75 compounds using the pre-processed standard SMILES in the grids with corresponding compound names. The resulting table provided a clear overview of all the compounds, with useful options to select or filter compounds. Obviously, other molecular properties or experimental results could be added into the table for other uses.

```{python}
# Full dataset of 75 compounds 
mols2grid.display(full_data, smiles_col = "standard_smiles", subset = ["img", "mols2grid-id", "names"])
```

<br>

##### **scaffold_finder library**

Rather than only trying out Datamol only, I also thought to try out the scaffold_finder library after reading this [Jupyter notebook](https://colab.research.google.com/github/PatWalters/practical_cheminformatics_tutorials/blob/main/sar_analysis/find_scaffolds.ipynb) by Patrick Walters. The GitHub repository of his other useful cheminformatics tutorials can be found [here](https://github.com/PatWalters/practical_cheminformatics_tutorials). His blog is [here](https://practicalcheminformatics.blogspot.com/). Without surprises, this post was also inspired by this Jupyter notebook on "Identifying scaffolds in a set of molecules", with some hope to expand on it a bit more.

Below were my notes on how to use this particular library.

Step 1: Add "mol" column to full_data dataframe (this was needed in order to use the functions from scaffold_finder library, which was also built based on RDKit)

```{python}
full_data["mol"] = full_data.standard_smiles.apply(Chem.MolFromSmiles)
```

Step 2: Change column names of "standard_smiles" to "SMILES" & "names" to "Name" to match with scaffold_finder library functions with set column names (or other way round, by changing the names in the function library)

```{python}
# Note: New column name "SMILES" contains standardised SMILES (old column name as "standard_smiles")
full_data = full_data.rename(columns = {"standard_smiles": "SMILES", "names": "Name"})
full_data.head()
```

Step 3: Identify scaffolds

The find_scaffolds() function was kindly borrowed from the scaffold_finder library as mentioned above. The scaffold_finder_test.py was the modified version, as I've used a different dataset here.

```{python}
mol_df, scaffold_df = find_scaffolds(full_data)
```

Below was a quick overview of the mol_df, showing scaffolds in SMILES, number of atoms, number of R groups, names of compounds and the standardised SMILES of the compounds.

```{python}
mol_df
```

Again to have a quick look at the scaffolds of all 75 compounds, along with counts of each scaffold and number of atoms in each scaffold.

```{python}
scaffold_df
```

Step 4: Display all scaffolds in mols2grid, which helped to identify the scaffold with the highest frequency (counts) of occurence in the dataset.

```{python}
mols2grid.display(scaffold_df, smiles_col = "Scaffold", subset = ["img", "Count"])
```

<br>

#### **Test datasets**

These were my sample datasets for later use in the section on "Reading and querying multiple scaffolds in SMILES strings".

Below was the first test dataset on the top 2 scaffolds with highest frequency of appearance in the full dataframe.

```{python}
# Scaffold of anti-infective with highest count
count_top1_scaffold = scaffold_df.Scaffold.values[0]
# Scaffold of anti-infective with the second highest count
count_top2_scaffold = scaffold_df.Scaffold.values[1]
```

```{python}
# Combine above scaffolds into a list
count_top_scaffold = list((count_top1_scaffold, count_top2_scaffold))
count_top_scaffold
```

Then this was the second sample dataset, purely on the scaffolds for the antibiotic called, "cefepime".

```{python}
cefe_scaffolds = pl.from_pandas(mol_df).filter(pl.col("Name") == "cefepime")
cefe_scaffolds.head()
```

<br>

#### **Focus on FtsZ compound 3**

Compound 3 was the compound found in the paper to have targeted the FtsZ proteins in Gram positive pathogens such as *Streptococcus pneumoniae* with more pronounced activities than its predecessor e.g. compound 1. So this section aimed to look into all of compound 3's scaffolds.

```{python}
# For ease of dataframe manipulation, decided to convert Pandas df into a Polars one (just my personal preference as I've used Polars more lately)
# then filtered out all the scaffolds for compound 3 & saved it as an independent dataframe
cpd3_scaffolds = pl.from_pandas(mol_df).filter(pl.col("Name") == "Compound_3")
cpd3_scaffolds
```

```{python}
# Convert Polars df into a Pandas one 
# and use mols2grid to show the 2D images of compound 3 scaffolds
# Total of 14 different scaffolds
cpd3_scaffolds = cpd3_scaffolds.to_pandas()
mols2grid.display(cpd3_scaffolds, smiles_col = "Scaffold")
```

##### **Testing compound 3 scaffolds using scaffold_finder library**

At this stage, I sort of had an idea of wanting to compare all 14 compound 3 scaffolds against all 75 molecules including ChEMBL-curated prescription-only anti-bacterials.

I tried the get_molecules_with_scaffold() function from scaffold_finder library but didn't exactly get what I hoped to achieve. I played around a bit and noticed it was really designed for spotting a single target scaffold with highest counts in the data set. I was hoping to parse multiple scaffolds actually, or imagining there might be situations where we might want to do this.

I started trialling with one scaffold anyway as shown below on the get_molecule_with_scaffold() function from the scaffold_finder library.

```{python}
# Trial single scaffold first
scaffold_test = cpd3_scaffolds.Scaffold.values[0]
scaffold_test
```

```{python}
s_smiles_list, chem_mol_df = get_molecules_with_scaffold(scaffold_test, mol_df, full_data)
```

```{python}
s_smiles_list
```

```{python}
# Showing only compound 3 as a distinctive compound (no other molecules with similar scaffold)
chem_mol_df
```

<br>

#### **Reading and querying multiple scaffolds in SMILES strings**

I also tried to tweak the get_molecule_with_scaffolds() function but realised it might be even better to write my own function to tailor to my need. Therefore, I wrote a small and simple function which would read and query multiple scaffolds of small molecules in SMILES string formats against a dataframe (with information showing scaffolds in SMILES, number of atoms, number of R groups, names of compounds and also the SMILES of the compounds).

At first, I started with reading all 14 scaffolds of compound 3 by using the values index method on cpd3_scaffolds dataframe that included all 14 scaffolds of compound 3.

```{python}
# Trial feeding all 14 SMILES
scaffold_cpd3_all = cpd3_scaffolds.Scaffold.values[:]
scaffold_cpd3_all
```

Then I thought about how every time if we'd want to convert any molecules from SMILES to RDKit molecules, we really had to have a "mol" column set up, so that was what I did below.

```{python}
cpd3_scaffolds["mol"] = cpd3_scaffolds.Scaffold.apply(Chem.MolFromSmiles)
```

The dataframe would look like this now.

```{python}
cpd3_scaffolds
```

Then perhaps I would place all of these compound 3 scaffolds into an object.

```{python}
cpd3_mols = cpd3_scaffolds["mol"]
cpd3_mols
```

At this stage, nothing really clicked at the moment, but then I thought about how Datamol was built on top of RDKit and also how a few other cheminformatics posts I've read before utilised the functions in RDKit, so it was time to look deeper in RDKit to search for methods with the intended purpose in mind. I then found the SmilesWriter() method from RDKit after reading a few online references.

I've found out that:

-   To write multiple SMILES into a .smi file, use SmilesWriter()

-   To read a set of SMILES from a .smi file, use SmilesMolSupplier()

Acknowledgement of a useful [link](https://github.com/suneelbvs/rdkit_tutorials/blob/master/1_Reading%20and%20Writing%20Smiles%20using%20rdKit.ipynb) I've found online which had helped me to figure out how to save multiple SMILES strings in a .smi file.

```{python}
# Figured out how to save multiple SMILES as a text file 
cpd3 = SmilesWriter('cpd3.smi')

# Note: saving multiple SMILES strings from RDKit mol objects (cpd3_mols)
for s in cpd3_mols:
  cpd3.write(s)
cpd3.close()
```

<br>

##### **Function for saving multiple SMILES strings as a .smi file**

So based on the ideas in the previous section, I came up with the following simple function to save multiple SMILES strings as a .smi file.

```{python}
def save_smiles_strings(df, file_name):

  # Create a RDKit mol column in the dataframe
  df["mol"] = df.Scaffold.apply(Chem.MolFromSmiles)

  # Save the "mol" column with target scaffolds as an object
  smiles_mols = df["mol"]

  # Use RDKit's SmilesWriter() to write the smiles strings from mol objects
  # Specify file name for .smi file, which will be stored in the working directory
  smiles = SmilesWriter(f"{file_name}.smi")
  
  # Use a for loop to iterate through each SMILES string in the dataframe
  for s in smiles_mols:
    smiles.write(s)
  smiles.close()
```

<br>

###### **Testing on the function**

Here I used one of the dataframes I've saved earlier, cefe_scaffolds, to test this function on saving multiple SMILES into a file. Since cefe_scaffolds dataframe was a Polars dataframe from earlier, it needed to be converted into a Pandas dataframe in order to be compatible with RDKit, which was used in the function.

```{python}
# Convert Polars dataframe into a Pandas one
cefe_scaffolds = cefe_scaffolds.to_pandas()

# Running function on cefe_scaffolds dataframe
# First parameter - dataframe to be used
# Second parameter - file name for the SMILES strings saved
save_smiles_strings(cefe_scaffolds, "cefe")
```

A .smi file with the name "cefe.smi" should appear in the working directory after running the function.

Now, the next stage would be to parse these SMILES strings and save them as a list. I actually worked backwards here where I looked into the Pandas.query() method first, and looked into options I could have on reading and checking for matches in multiple strings. To be able to read multiple strings in one go, a list would be suitable to carry out the matching queries (note: in the scaffold_finder library, this dataframe query method was also used in its "find_scaffolds" and "get_molecules_with_scaffold" functions).

An example of Pandas.query() tests:

```{python}
# Using the test dataset from earlier - list of top two scaffolds with highest frequency of occurrences from ChEMBL dataset
count_top_scaffold
```

```{python}
# To demonstrate that querying the two top scaffolds 
# will bring back all the anti-bacterials with the same scaffold
match_df = mol_df.query("Scaffold in @count_top_scaffold")
match_df
```

Here, all tetracycline antibiotics were brought up in the resultant dataframe.

As an aside from what I wanted to do, I also learnt a small trick about how to get the number of atoms in the file with multiple SMILES strings.

```{python}
# Sample use of SmilesMolSupplier & GetNumAtoms()
suppl = SmilesMolSupplier('cpd3.smi')

nMols = len(suppl)

for i in range(nMols):

  a = suppl[i].GetNumAtoms()
  print(a)
```

Now, back to where I was meant to continue working, I wanted to convert these SMILES strings into RDKit molecules first.

```{python}
# Reading cpd3.smi SMILES strings in text file as RDKit mol objects
suppl = SmilesMolSupplier("cpd3.smi")
suppl
```

This was followed by converting the "mol" objects into SMILES strings, so that we could save each SMILES string into a list.

```{python}
# Initialise an empty list
list = []

for mol in suppl:
   # Convert RDKit mol objects into SMILES strings
   m = Chem.MolToSmiles(mol)
   # Add each SMILES read from filename.smi into the empty list
   list.append(m)

list
```

<br>

##### **Function for converting .smi file into a list to query and match scaffolds of interests**

I then came up with the next function that would feed multiple scaffolds into a Pandas.query() to match the strings, meaning we could compare the scaffolds with each other in a dataframe.

```{python}
def query_scaffolds_via_smiles(filename):

    # Initialise an empty list
    list = []
    # Use SmilesMolSupplier() from RDKit to read in the SMILES strings stored in .smi file
    suppl = SmilesMolSupplier(filename)
    # Use a for loop to iterate through the SMILES strings
    for mol in suppl:
        # Convert RDKit mol objects into SMILES strings
        m = Chem.MolToSmiles(mol)
        # Add each SMILES read from filename.smi into the empty list
        list.append(m)
        # Compare the SMILES with the scaffold column in dataframe
        scaffold_match_df = mol_df.query("Scaffold in @list")
        
    return scaffold_match_df
```

<br>

###### **Testing on the function**

Below was a test for this query_scaffolds_via_smiles() function using the previously made "cpd3.smi" file.

To show that compound 3 scaffolds literally only existed in compound 3 and not in any other prescription-only anti-bacterials based on the ChEMBL-extracted anti-infective dataset only (note: other sources not checked at this stage).

```{python}
# Testing query_scaffolds_via_smiles() function
query_scaffolds_via_smiles("cpd3.smi")
```

Then I also tested on "cefe.smi" created before.

```{python}
# Test on cefe.smi
query_scaffolds_via_smiles("cefe.smi")
```

Only cephalosporins were brought up as the result from this scaffold query, which matched with the antibiotic class of cefepime.

<br>

#### **Some answers**

There were no other prescription-only anti-bacterials from ChEMBL database with the same scaffold as compound 3 after comparing the SMILES strings between these selected scaffolds only. This was only limited to the dataset obtained from ChEMBL at this stage, with compound indications limited to anti-infectives for now. This might imply that the scaffold of compound 3 could be considered novel when comparing with molecules with similar indications. Obviously, this was too preliminary to confirm anything substantial, since there were no *in vivo* tests on finding out the efficacy, safety and toxicity of compound 3 apart from the *in vitro* experimental results mentioned in the paper. It probably would provide some ideas for scaffold hopping in hit compounds, or functional group (R-group) comparisons when looking for new compounds for synthesis. Overall, it was interesting to have a re-visit on this work using a more cheminformatics approach.

<br>

#### **Afterthoughts**

What I wanted to achieve in this post were:

-   To familiarise myself with Datamol and scaffold_finder libraries

-   To use Polars dataframe library for initial data wrangling along with Datamol Python library, and the later trial of scaffold_finder library. Using Polars would be a small degree only, as Datamol was likely written with Pandas in mind mostly (based on RDKit), while Pandas was also the more commonly used dataframe libray in many cheminformatics packages. Some people might prefer to stick with Pandas all the way, which I agree, but I'd just wanted to use Polars for the initial data wrangling only as I've been using it more lately

-   To reveal my thought process on building simple cheminformatics-related functions (this was unplanned, but kind of evolved while working on this post)

-   To show some evidence of my own growth from computational and medicinal chemistry with no code, to using data science tools with Python code to help guiding drug discovery projects

-   To mention that experimental validations will always be crucial for computational predictions, and since I had some experimental results from the paper, I thought to accompany it with some computational findings here

I hope I've at least achieved some these points in this post if not all.

Thanks for reading and looking forward to comments if any.
