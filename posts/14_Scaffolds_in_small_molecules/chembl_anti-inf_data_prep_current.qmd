---
title: "Working with scaffolds in small molecules"
subtitle: "Manipulating SMILES strings"
author: Jennifer HY Lin
date: '2023-6-27'
draft: true
categories:
  - RDKit
  - Datamol
  - Python
  - Pandas
  - Cheminformatics
jupyter: python3
---

#### **Features in this post**

This post will discuss about the following:

- Pre-process and standardise compounds (e.g. converting SMILES into SELFIES and others)

- Obtain scaffolds of all of the compounds

- Align scaffolds of compounds

- Query target scaffolds against a dataframe of compounds:

  - Function for saving multiple SMILES in .smi file

  - Function for converting .smi file into a list to query and match scaffolds of interests

- Identify any similarities or differences between the target compound of interest against other compounds in a dataframe

<br>

#### **Key questions to answer**

Will the scaffold of compound 3 (compound of interest) be similar to the scaffolds of any approved ChEMBL anti-infectives? 

<br>

#### **Import libraries**

The following libraries were used in this post.

```{python}
import polars as pl
import pandas as pd
import datamol as dm
import mols2grid

from rdkit import Chem
from rdkit.Chem import AllChem
from rdkit.Chem.rdmolfiles import SmilesWriter, SmilesMolSupplier

# Library adapted with courtesy from Patrick Walters' tutorial on "Identifying Scaffolds" 
# - links provided in "scaffold_finder library" section
from scaffold_finder_test import generate_fragments, find_scaffolds, get_molecules_with_scaffold, cleanup_fragment
```

<br>

#### **ChEMBL anti-infectives**

##### **Data cleaning**

The dataset used was extracted from ChEMBL database, with a focus on the anti-infectives.

```{python}
df_ai = pl.read_csv("chembl_anti-inf.csv", sep = ";")
df_ai
```

```{python}
# Uncomment below if requiring a quick overview on all column names, first ten variables in each column and each column data type
#print(df_ai.glimpse())
```

Under the "Availability Type" column, there were a few different availabilities for each anti-bacterial such as, "Discontinued", "Withdrawn", "Unknown" and "Prescription Only".

```{python}
df_ai.groupby("Availability Type").count()
```

Because I'd like to choose only the "Prescription Only" ones, the following filter condition was added.

```{python}
df_ai_rx = df_ai.filter(pl.col("Availability Type") == "Prescription Only")
df_ai_rx.head()
```

In preparation for possible future work on building machine learning models on this line of work, I looked into Datamol's function on pre-processing molecule (shown in the next section), as it involved converting SMILES strings into SELFIES (self-referencing embedded strings), which were considered to be more robust than SMILES. 

However, I kept running into an error, with the error message showing the SMILES column was empty. After a few tries I realised that I've actually forgotten to check whether there were any missing SMILES in the column. So here I've filtered the SMILES column to look for any missing SMILES

```{python}
df_ai_rx.filter(pl.col("Smiles") == "")
```

Neomycin was the only compound found to have no SMILES recorded. To fix this error, I then used the previously-mentioned "when-then-otherwise" expression in Polars again to replace the empty string in the dataframe. A code example below was kindly adapted from StackOverflow with [this link here](https://stackoverflow.com/questions/72292048/idiomatic-replacement-of-empty-string-with-pl-null-null-in-polars).

``` {{python}}
only_these = ['str1', 'str2']
df.with_columns([
    pl.when(pl.col(only_these).str.lengths() == 0)
    .then(None)
    .otherwise(pl.col(only_these))
    .keep_name()
])
```

This was what I've done to amend the issue.

```{python}
# Canonical SMILES for neomycin was extracted from PubChem (https://pubchem.ncbi.nlm.nih.gov/compound/Neomycin)

df_ai_rx = df_ai_rx.with_columns([
    pl.when(pl.col("Smiles").str.lengths() == 0)
    .then("C1C(C(C(C(C1N)OC2C(C(C(C(O2)CN)O)O)N)OC3C(C(C(O3)CO)OC4C(C(C(C(O4)CN)O)O)N)O)O)N")
    .otherwise(pl.col("Smiles"))
    .keep_name()
])

df_ai_rx
```

```{python}
# Keeping only selected columns with information needed for later use
df_ai_rx = df_ai_rx.select(["Smiles", "Name", "USAN Definition", "Level 4 ATC Codes"])
df_ai_rx.head()
```

The "Smiles" column name was changed below to ensure _preprocess function would work since the parameter "smiles_column" had "smiles" with lowercase "s" (this of course could be the other way round, where we could change the parameter name in the function instead, the column name and parameter name had to match for the function to work was the point). The "Name" column was changed accordingly for similar reason. 

```{python}
df_ai_rx = df_ai_rx.rename({"Smiles": "smiles", "Name": "names"})
df_ai_rx.head()
```

I also wanted to change the all capitalised compound names into lowercases, since I'd prefer to read them in a more friendly way (rather looking like they were shouting at readers being all capitalised letters).

```{python}
# Convert all compounds to lowercases
df_ai_rx = df_ai_rx.with_columns(pl.col("names").str.to_lowercase())
df_ai_rx.head()
```

Since Datamol was built as a thin layer library on top of RDKit, which was only compatible with Pandas, I added the following step to convert the dataframe into a Pandas one.

```{python}
df_ai_pd = df_ai_rx.to_pandas()
df_ai_pd
```

```{python}
# Check the dataframe has been converted from Polars to Pandas
type(df_ai_pd)
```

<br>

##### **Pre-processing and standardising molecules**

I have basically borrowed and adapted the _preprocess function from Datamol ([link here](https://docs.datamol.io/stable/tutorials/Preprocessing.html)), as shown below. It also included a conversion from "mol" (RDKit molecule) to SELFIES as well.

```{python}

# Pre-process molecules using _preprocess function - adapted from datamol.io

smiles_column = "smiles"

dm.disable_rdkit_log()

def _preprocess(row):
    mol = dm.to_mol(row[smiles_column], ordered=True)
    mol = dm.fix_mol(mol)
    mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)
    mol = dm.standardize_mol(
        mol,
        disconnect_metals=False,
        normalize=True,
        reionize=True,
        uncharge=False,
        stereo=True,
    )

    row["standard_smiles"] = dm.standardize_smiles(dm.to_smiles(mol))
    row["selfies"] = dm.to_selfies(mol)
    row["inchi"] = dm.to_inchi(mol)
    row["inchikey"] = dm.to_inchikey(mol)
    return row
```

<br>

##### **Converting multiple SMILES into multiple SELFIES**

There were two ways to convert multiple SMILES into multiple SELFIES (there might be more options, but I've found these two for now):

```{python}
# Method one - using lambda function:
# Uncomment code below to run
# df_ai_pd["selfies"] = df_ai_pd["Smiles"].apply(lambda x: dm.to_selfies(x))
# df_ai_pd

# Method two - using _preprocess function:
data_mol_clean = df_ai_pd.apply(_preprocess, axis = 1)
data_mol_clean
```

##### **Converting a single SMILES into a SELFIES**

To convert only one SMILES string into a SELFIES, the following code should work with Datamol.

```{{python}}
selfies = dm.to_selfies("O=C(N[C@H](CO)[C@H](O)c1ccc([N+](=O)[O-])cc1)C(Cl)Cl")
selfies
```

<br>

##### **Visualise compounds in 2D using Datamol**

The images generated below might be quite small to see or read clearly. I've tried to increase the molecule size (mol_size) and also reduce the column numbers, but it still appeared the same. However, if the code was run in say VS Code, it would appear in much larger sizes when increasing the mol_size.

```{python}
# Grab all SMILES of the cleaned/pre-processed ChEMBL anti-infectives
df_ai_sm = data_mol_clean["standard_smiles"]

# Load a list of these molecules in SMILES
# dm.to_mol has sanitize = True set as default
mol_ls = [dm.to_mol(smile) for smile in df_ai_sm]

# Alternative way to convert dataframe into a list of mols (same as mol_ls)
# mols = dm.from_df(df_name, smiles_column = "Smiles")

# Add compound name for each 2D image
legends_c = list(data_mol_clean["names"])

# Convert the list of molecules into 2D images
dm.to_image(mol_ls, n_cols = 4, mol_size = (400, 400), legends = legends_c)
```

<br>

##### **Extract scaffolds**

```{python}
# Extract Murcko scaffolds from mol_ls (ChEMBL anti-infectives)
m_scaffolds = [dm.to_scaffold_murcko(mol) for mol in mol_ls]
#dm.to_image(m_scaffolds, mol_size = (400, 400), legends = legends_c)
```

<br>

#### **Filamenting temperature-sensitive Z (FtsZ) compounds**

##### **Data cleaning**

This section focuses on 3 compounds from this paper - Lin, H.-Y.J.; Battaje, R.R.; Tan, J.; Doddareddy, M.; Dhaked, H.P.S.; Srivastava, S.; Hawkins, B.A.; Al-Shdifat, L.M.H.; Hibbs, D.E.; Panda, D.; et al. Discovery of 2',6-Bis(4-hydroxybenzyl)-2-acetylcyclohexanone, a Novel FtsZ Inhibitor. Molecules 2022, 27, 6993. https://doi.org/10.3390/molecules27206993. Obviously from the authorship shown for the paper, this was from my PhD work, and out of interests, I just wanted to look a bit further into them and compare with known anti-infectives.

Before I started cleaning any data on FtsZ compounds, I found this useful website, [OPSIN: Open Parser for Systematic IUPAC nomenclature](https://opsin.ch.cam.ac.uk/), with [link](https://pubs.acs.org/doi/full/10.1021/ci100384d) to the journal paper as an acknowledgement of the work. I've managed to convert these 3 FtsZ compounds by using their IUPAC names, inputted into OPSIN, and converted them into the corresponding InChI or SMILES strings.

After that, I started by converting the InChI of compound 1 into a RDKit molecule, which could be visualised in 2D below.

```{python}
# Convert compound 1 to mol from InChI
cpd1 = dm.from_inchi("InChI=1S/C22H20O4/c23-18-9-4-15(5-10-18)8-13-21(25)20-3-1-2-17(22(20)26)14-16-6-11-19(24)12-7-16/h4-14,20,23-24H,1-3H2/b13-8+,17-14+")
cpd1
```

I then converted compound 2 using SMILES string instead. 

```{python}
# Convert compound 2 SMILES to mol
cpd2 = dm.to_mol("OC1=C(C=CC=C1CC1=CC=C(C=C1)O)C(CCC1=CC=C(C=C1)O)=O")
cpd2
```

Same thing followed for compound 3.

```{python}
# Convert compound 3 SMILES to mol
cpd3 = dm.to_mol("OC1=CC=C(CC2C(C(CCC2)C(CCC2=CC=C(C=C2)O)=O)=O)C=C1")
cpd3
```

```{python}
# Save these 3 compounds into a list
mol_lst = [cpd1, cpd2, cpd3]
mol_lst
```

```{python}
# Convert a list of mols into a dataframe
df = dm.to_df(mol_lst)
df
```
Then the compound numbers were added into the dataframe as well.

```{python}
names = ["Compound_1", "Compound_2", "Compound_3"]
df["names"] = names
df
```

<br>

##### **Pre-processing and standardising molecules**

```{python}
# Pre-processing FtsZ compounds
data_cleaned = df.apply(_preprocess, axis=1)
data_cleaned
```

<br>

##### **Visualise compounds in 2D using Datamol**

```{python}
# Grab all SMILES from cleaned FtsZ compound dataset
df_ai_ftsz = data_cleaned["standard_smiles"]

# Load a list of these molecules in SMILES
mol_ftsz_list = [dm.to_mol(smile) for smile in df_ai_ftsz]

# Add compound names for each 2D image of compounds
legends = list(data_cleaned["names"])

# Convert the list of molecules into 2D images
dm.to_image(mol_ftsz_list, n_cols = 5, mol_size = (400, 400), legends = legends)
```

<br>

##### **Extract scaffolds**

```{python}
# Get Murcko scaffolds of FtsZ compounds
m_ftsz_scaffolds = [dm.to_scaffold_murcko(mol) for mol in mol_ftsz_list]
dm.to_image(m_ftsz_scaffolds, mol_size = (400, 400), legends = legends)
```

<br>

#### **Combining ChEMBL anti-infectives and FtsZ compounds**

##### **Combining dataframes**

In this part, I wanted to combine the two dataframes I had from above, since my next step was to compare the scaffolds between ChEMBL prescription-only anti-infectives and FtsZ compounds.

```{python}
combined_lists = [data_mol_clean, data_cleaned]
full_data = pd.concat(combined_lists, ignore_index = True)
full_data.head()
```

```{python}
# Specifying only the standard SMILES column
df_full = full_data["standard_smiles"]
df_full
```

```{python}
# Convert the standard SMILES into RDKit molecules
mol_full = [dm.to_mol(smile) for smile in df_full]
mol_full
```

<br>

##### **Aligning all the scaffolds**

Here, all the scaffolds from both dataframes of compounds were aligned by using Datamol's auto_align_many(). The image of the aligned molecules was generated in the end. The compound structures did re-align, but unfortunately it only showed up to a maximum of 50 compounds only (the default number for the maximum number of molecules was 32 in Datamol; this number was truncated to 50 from the warning message from RDKit when attempting to run the total of 75 compounds using the Datamol library, without looking further into changing any source code at this stage).

```{python}
aligned_list = dm.align.auto_align_many(mol_full, partition_method = "anon-scaffold")
dm.to_image(aligned_list, mol_size = (400, 400), max_mols = 50)
```

```{python}
# Checking the data type of aligned_list
type(aligned_list)
```

An attempt to combine Datamol's auto_align_many() with mols2grid library. Unfortunately, the compounds did not re-align but all 75 compounds were shown in the grids.

```{python}
mols2grid.display(aligned_list)
```

##### **mols2grid library**

Since I've started using mols2grid here, I thought to combine all 75 compounds using the pre-processed standard SMILES in the grids with corresponding compound names. The resulting table provided a clear overview of all the compounds, with useful options to select or filter compounds.

```{python}
# Full dataset of 75 compounds 
mols2grid.display(full_data, smiles_col = "standard_smiles", subset = ["img", "mols2grid-id", "names"])
```

```{python}
# Showing scaffolds of ChEMBL Rx anti-infectives

# **Some scaffolds are repeated e.g. 6 & 8 
# - consider adding count column into the scaffold dataframe**

#mols2grid.display(m_scaffolds)
```

```{python}
# Showing scaffolds of FtsZ compounds
#mols2grid.display(m_ftsz_scaffolds)
```

##### **scaffold_finder library**

Rather than only trying out Datamol only, I also thought to try out the scaffold_finder library after reading this [Jupyter notebook](https://colab.research.google.com/github/PatWalters/practical_cheminformatics_tutorials/blob/main/sar_analysis/find_scaffolds.ipynb) by Patrick Walters. The GitHub repository of his other useful cheminformatics tutorials can be found [here](https://github.com/PatWalters/practical_cheminformatics_tutorials). His well-known "Practical Cheminformatics" blog is [here](https://practicalcheminformatics.blogspot.com/). Without surprises, this post was also inspired by his work on "Identifying Scaffolds", and I thought to expand on it a bit more (hopefully I did that here).

Step 1: add "mol" column to full_data dataframe (which was needed to use the functions from scaffold_finder library, which was also built based on RDKit)

```{python}
full_data["mol"] = full_data.standard_smiles.apply(Chem.MolFromSmiles)
```

Step 2: Change column names of "standard_smiles" to "SMILES" & "names" to "Name" to match with scaffold_finder library functions with set column names (or other way round, by changing the names in the function library)

```{python}
# Note: New column name "SMILES" contains standardised SMILES (old column name as "standard_smiles")
full_data = full_data.rename(columns = {"standard_smiles": "SMILES", "names": "Name"})
full_data.head()
```

Step 3: Identify scaffolds

The find_scaffolds() function was kindly borrowed from P. Walters' scaffold_finder library as mentioned above. The scaffold_finder_test.py was the modified version, as I've used a different dataset here.

```{python}
mol_df, scaffold_df = find_scaffolds(full_data)
```

Below was a quick overview of the mol_df - showing scaffolds in SMILES, number of atoms, number of R groups, names of compounds and the standardised SMILES of the compounds.

```{python}
mol_df
```

Again to have a quick look at the scaffolds of all 75 compounds, along with counts of each scaffold and number of atoms in each scaffold.

```{python}
scaffold_df
```
Step 4: Display all scaffolds in mols2grid, which helped to identify the scaffold with the highest frequency (counts) of occurence in the dataset.

```{python}
mols2grid.display(scaffold_df, smiles_col = "Scaffold", subset = ["img", "Count"])
```

<br>

#### **Test datasets**

These were my sample datasets for later use in the section on "Reading and querying multiple scaffolds in SMILES strings".

Below was the first test dataset on the top 2 scaffolds with highest frequency of appearance in the full dataframe.

```{python}
# Scaffold of anti-infective with highest count
count_top1_scaffold = scaffold_df.Scaffold.values[0]
# Scaffold of anti-infective with the second highest count
count_top2_scaffold = scaffold_df.Scaffold.values[1]
```

```{python}
# Combine above scaffolds into a list
count_top_scaffold = list((count_top1_scaffold, count_top2_scaffold))
count_top_scaffold
```
Then this was the second sample dataset, purely on the scaffolds for the antibiotic called "cefepime".

```{python}
cefe_scaffolds = pl.from_pandas(mol_df).filter(pl.col("Name") == "cefepime")
cefe_scaffolds.head()
```
<br>

#### **Focus on FtsZ compound 3**

Compound 3 was the compound found in the paper to have targeted the FtsZ proteins in Gram positive pathogens such as *Streptococcus pneumonaie*. So this section looks into all of compound 3's scaffolds particularly.

```{python}
# For ease of dataframe manipulation, decided to convert Pandas df to Polars df!
# then filter out all the scaffolds for compound 3 & save it as an independent dataframe
cpd3_scaffolds = pl.from_pandas(mol_df).filter(pl.col("Name") == "Compound_3")
cpd3_scaffolds
```

```{python}
# Convert Polars df into a Pandas one 
# and use mols2grid to show the 2D images of compound 3 scaffolds
# Total of 14 different scaffolds
cpd3_scaffolds = cpd3_scaffolds.to_pandas()
mols2grid.display(cpd3_scaffolds, smiles_col = "Scaffold")
```

```{python}
# Show the full 14 SMILES of compound 3 scaffolds
cpd3_all = cpd3_scaffolds["Scaffold"]
```

```{python}
type(cpd3_all)
```

```{python}
# Compare scaffolds of compound 3 against the rest of Rx anti-infectives
# - specifically, compare anti-bacterials with same Gram +ve pathogenic targets (Strep. pneumoniae) 
# as compound 3

# Use "get_molecules_with_scaffold" function from scaffold_finder library
# - refer to find_scaffolds.ipynb blog post -> tried but not exactly what was intended
# trial editing function initially - need to tailor function to target use

# Goal of function: Compare all 14 compound 3 scaffolds against all 75 molecules including
# ChEMBL-curated Rx anti-bacterials 
# ***At the moment, figuring out best code for iterating over the 14 cpd3 scaffolds***
# ***Only single scaffold query worked as Pandas' query() method only takes in single string***
```

```{python}
# Reference function from scaffold_finder.py

# According to author, there are two main results from this function
# * A list of scaffolds with R-group substitution points labeled --> ***Not required at the moment***
# * A dataframe with molecules containing that scaffold 

# def get_molecules_with_scaffold(scaffold, mol_df, activity_df):
#     """
#     Associate molecules with scaffolds
#     :param scaffold: scaffold SMILES
#     :param mol_df: dataframe with molecules and scaffolds, returned by find_scaffolds()
#     :param activity_df: dataframe with [SMILES, Name, pIC50] columns
#     :return: list of core(s) with R-groups labeled, dataframe with [SMILES, Name, pIC50]
#     """
#     match_df = mol_df.query("Scaffold == @scaffold")
#     merge_df = match_df.merge(activity_df, on=["SMILES", "Name"])
#     scaffold_mol = Chem.MolFromSmiles(scaffold)
#     rgroup_match, rgroup_miss = RGroupDecompose(scaffold_mol, merge_df.mol, asSmiles=True)
#     if len(rgroup_match):
#         rgroup_df = pd.DataFrame(rgroup_match)
#         return rgroup_df.Core.unique(), merge_df[["SMILES", "Name", "pIC50"]]
#     else:
#         return [], merge_df[["SMILES", "Name", "pIC50"]]
```

```{python}
# Test 1: Trial single scaffold first
scaffold_test = cpd3_scaffolds.Scaffold.values[0]
scaffold_test
```

```{python}
s_smiles_list, chem_mol_df = get_molecules_with_scaffold(scaffold_test, mol_df, full_data)
```

```{python}
s_smiles_list
```

```{python}
# Showing only compound 3 as a distinctive compound (no other molecules with similar scaffold)
chem_mol_df
```

<br>

#### **Reading and querying multiple scaffolds in SMILES strings**

The section below was inspired by the "find_scaffolds.ipynb" from Practical Cheminformatics blog. A small function was written which will read and then query multiple scaffolds of small molecules in SMILES string against a dataframe with information showing scaffolds in SMILES, number of atoms, number of R groups, names of compounds and also the SMILES of the compounds. 

The reason behind setting up this small function was that the get_molecule_from_scaffold() function from the scaffold_finder library seems to be only taking in one single SMILES at a time (since it was about a target scaffold with highest frequency count, so this was in a different context).

This function was likely not novel and most likely other more clever functions would have been already available. However, I thought to play around with it a bit and wanted to add the ability to read multiple SMILES at the same time, and this had turned out to be my first piece of cheminformatics-related function.

I also wanted to show how my thought processes were like from the beginning till the end. At first, I started with reading all 14 scaffolds of compound 3 by using the values index method on cpd3_scaffolds dataframe that included all 14 scaffolds of compound 3, trying to get some ideas about how I would start writing a function with the intended purpose in mind.

```{python}
# Trial feeding all 14 SMILES
scaffold_cpd3_all = cpd3_scaffolds.Scaffold.values[:]
scaffold_cpd3_all
```
Then I thought about how every time if we'd want to convert any molecules from SMILES to RDKit molecules, we really had to have a "mol" column set up, which was what I did below.

```{python}
cpd3_scaffolds["mol"] = cpd3_scaffolds.Scaffold.apply(Chem.MolFromSmiles)
```

The dataframe would now look like this.

```{python}
cpd3_scaffolds
```

Then perhaps I would place all of these compound 3 scaffolds into an object.

```{python}
cpd3_mols = cpd3_scaffolds["mol"]
cpd3_mols
```
At this stage, nothing really clicked at the moment, but then I thought about how datamol was built on top of RDKit and also how a few other cheminformatics posts I've read before utilises the functions in RDKit, it was time to look deeper in RDKit to search for methods with my intended purpose in mind. Then I started to think more on the tangent of writing a function, where I then found the SmilesWriter() method from RDKit after reading a few online references. 

Clearly, I've found out that:
- To write multiple SMILES into a .smi file, use SmilesWriter()
- To read a set of SMILES from a .smi file, use SmilesMolSupplier()

Acknowledgement of a useful link I've found online which had helped me figure out how I would go about saving multiple SMILES strings ina .smi file: https://github.com/suneelbvs/rdkit_tutorials/blob/master/1_Reading%20and%20Writing%20Smiles%20using%20rdKit.ipynb


```{python}
# Randomly figured out how to save multiple SMILES as a text file 
cpd3 = SmilesWriter('cpd3.smi')
# Note: saving multiple SMILES strings from RDKit mol objects (cpd3_mols)
for s in cpd3_mols:
  cpd3.write(s)
cpd3.close()
```

<br>

##### **Function for saving multiple SMILES strings as a .smi file**

The following function works based on a Pandas dataframe, since RDKit was used.

```{python}
def save_smiles_strings(df, file_name):

  # Create a RDKit mol column in the dataframe
  df["mol"] = df.Scaffold.apply(Chem.MolFromSmiles)

  # Save the "mol" column with target scaffolds as an object
  smiles_mols = df["mol"]

  # Use RDKit's SmilesWriter() to write the smiles strings from mol objects
  # Specify file name for .smi file, which will be stored in the working directory
  smiles = SmilesWriter(f"{file_name}.smi")
  
  # Use a for loop to iterate through each SMILES string in the dataframe
  for s in smiles_mols:
    smiles.write(s)
  smiles.close()
```

```{python}
# cefe_scaffolds df was a Polars df from earlier, therefore need to convert it to Pandas
cefe_scaffolds = cefe_scaffolds.to_pandas()
#cefe_scaffolds.head()
```

```{python}
# Test on cefe_scaffolds dataframe
# A .smi file with the name "cefe.smi" should appear in working directory
save_smiles_strings(cefe_scaffolds, "cefe")
```

```{python}
# Sample use of SmilesMolSupplier & GetNumAtoms()
suppl = SmilesMolSupplier('cpd3.smi')

nMols = len(suppl)

for i in range(nMols):

  a = suppl[i].GetNumAtoms()
  print(a)
```

```{python}
# Reading cpd3.smi SMILES strings in text file as RDKit mol objects
suppl = SmilesMolSupplier("cpd3.smi")
suppl
```

```{python}
# Then convert mol objects into SMILES strings

list = []

for mol in suppl:
   # Convert RDKit mol objects into SMILES strings
   m = Chem.MolToSmiles(mol)
   # Add each SMILES read from filename.smi into the empty list
   list.append(m)

list
   
   
```

##### **Function for converting .smi file into a list to query and match scaffolds of interests**

I then came up with the next function that would feed multiple scaffolds into a Pandas.query() to match the strings, meaning we could compare the scaffolds with each other in a dataframe.

```{python}
def query_scaffolds_via_smiles(filename):

    # Initialise an empty list
    list = []
    # Use SmilesMolSupplier() from RDKit to read in the SMILES strings stored in .smi file
    suppl = SmilesMolSupplier(filename)
    # Use a for loop to iterate through the SMILES strings
    for mol in suppl:
        # Convert RDKit mol objects into SMILES strings
        m = Chem.MolToSmiles(mol)
        # Add each SMILES read from filename.smi into the empty list
        list.append(m)
        scaffold_match_df = mol_df.query("Scaffold in @list")
    return scaffold_match_df
    #return list
```

Below was the test for this query_scaffolds_via_smiles() function.

```{python}
# Testing query_scaffolds_via_smiles() function
query_scaffolds_via_smiles("cpd3.smi")
```

```{python}
# Test on cefe.smi
query_scaffolds_via_smiles("cefe.smi")
```

```{python}
cpd3 = cpd3_scaffolds["Scaffold"]
cpd3
```

```{python}
# Check object type
type(cpd3)
```

```{python}
# Compound 3 scaffolds
# Convert series to list
cpd3 = cpd3.astype(str).tolist()
cpd3
```

```{python}
# Check object type
type(cpd3)
```

```{python}
# To show that compound 3 scaffolds literally only exist in compound 3 
# and not in any other Rx anti-bacterials
match_df_ftsz = mol_df.query("Scaffold in @cpd3")
match_df_ftsz
```

```{python}
# Saving top two scaffolds with most frequency of occurrences 
#in ChEMBL-curated anti-bacterial dataset as a list
count_top_scaffold
```

```{python}
# To demonstrate that querying the two top scaffolds 
# will bring back all the anti-bacterials with the same scaffold
match_df = mol_df.query("Scaffold in @count_top_scaffold")
match_df
```

#### **Results**

There were no other Rx anti-bacterials with the same scaffold as compound 3 by using SMILES strings to compare their scaffolds. So this might imply that the scaffold from compound 3 could be considered novel when we were looking at Gram positive pathogen-targeting anti-infectives. However, this was also too preliminary to conclude anything substantial, since there were no other *in vivo* tests done to find out the safety and toxicity of compound 3 apart from the *in vitro* ones mentioned in the paper. It probably would provide ideas for scaffold hopping, or functional group (R-group) comparisons when looking for new compounds for synthesis. 

<br>

#### **Ideas to get across**

The intentions of this post:

- To familiarise myself with Datamol and scaffold_finder libraries

- To use Polars dataframe library for initial data wrangling along with Datamol Python library, and the later trial of scaffold_finder library. Using Polars would be more likely to be a small degree only, as Datamol was likely written with Pandas in mind only, and also Pandas was the more commonly used in many cheminformatics packages & libraries since it was around longer than Polars

- To reveal my thought processes of building simple cheminformatics-related functions (this was not planned, but rather kind of evolved from the second half of the work)

- To mention experimental results from paper in PhD work into cheminformatics project (validation always crucial for computational predictions)

- To show some evidence of my own growth from pure organic chemistry and computational chemistry without code into using data science tools via coding in Python to guide directions of drug discovery project 

<br>

#### **Final words**

I've always wanted to shorten my posts to a more readable length, but... it was proven to be hard again. So this post was much longer than I've expected. Please feel free to click on the page content links on the right if needed. Thanks for reading if anyone is reading this at all.