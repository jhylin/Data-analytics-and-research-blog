---
title: "Molecular similarities in selected COVID-19 antivirals"
subtitle: "Using RDKit's similarity map and fingerprint generator"
author: "Jennifer HY Lin"
date: 2022-11-13
categories: [Data analytics projects, Cheminformatics, Python, Research]
jupyter: python3
draft: true
---

##### **Why this post?**
Well, I've always had a thought sitting at the back of my mind about working on a chemistry-related data analytic project since my time in Australia. It was heavily inspired by the research saga mentioned in another [blog post](https://jhylin.github.io/Data_in_life_blog/posts/PhD%20projects/PhD_projects.html) related to my PhD. About two months ago, I thought I will never be able to get anything decent (e.g. first-author paper) published out of my PhD (for reasons already explained in the blog post), so I was thinking of going down the route of working on health data science, which was where I could tie in my pharmacist background. Miraculously, the paper actually got published last month, which meant I might have more career options now (thank you universe and also everyone I've met and worked with so far of course). 

The funny thing was that before I knew this paper was coming, I've already made up my mind about working on at least one piece of chemistry-related work before leaving it behind completely (as in, I'll never touch Chemistry ever again, despite I used to enjoy it a lot since my first year at university). Therefore, this was how I got myself started on this post - a small piece of cheminformatics work on molecular similarity for selected FDA-approved COVID-19 antivirals, as taking my first baby step in this field.

<br>

##### **Source of dataset**
The URLs to obtain canonical simplified molecular input line entry systems (SMILES) of all 5 molecules are listed below (there are several different options to obtain SMILES for molecules, this was what I decided to do in this case):

1. [PubChem [Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; 2004-. PubChem Compound Summary for CID 155903259, Nirmatrelvir; [cited 2022 Nov. 13]. Available from: https://pubchem.ncbi.nlm.nih.gov/compound/Nirmatrelvir](https://pubchem.ncbi.nlm.nih.gov/compound/155903259)

2. [PubChem [Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; 2004-. PubChem Compound Summary for CID 392622, Ritonavir; [cited 2022 Nov. 13]. Available from: https://pubchem.ncbi.nlm.nih.gov/compound/Ritonavir](https://pubchem.ncbi.nlm.nih.gov/compound/ritonavir)

3. [PubChem [Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; 2004-. PubChem Compound Summary for CID 145996610, EIDD-2801; [cited 2022 Nov. 13]. Available from: https://pubchem.ncbi.nlm.nih.gov/compound/eidd-2801](https://pubchem.ncbi.nlm.nih.gov/compound/145996610)

4. [PubChem [Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; 2004-. PubChem Compound Summary for CID 121304016, Remdesivir; [cited 2022 Nov. 13]. Available from: https://pubchem.ncbi.nlm.nih.gov/compound/Remdesivir](https://pubchem.ncbi.nlm.nih.gov/compound/145996610)

5. [PubChem [Internet]. Bethesda (MD): National Library of Medicine (US), National Center for Biotechnology Information; 2004-. PubChem Compound Summary for CID 44205240, Baricitinib; [cited 2022 Nov. 13]. Available from: https://pubchem.ncbi.nlm.nih.gov/compound/Baricitinib](https://pubchem.ncbi.nlm.nih.gov/compound/44205240)

<br>

##### **Install modules/libraries**
For anyone who would like to repeat my work here, I'd just want to give you a heads up - this work was coded entirely in Python and initially saved as .ipynb file which was executed in Jupyter Notebook. It was later converted into .qmd file via CLI^[Command line interface], which was then run without problems in RStudio IDE. One thing to note was that all 2D chemical structures or simialrity maps did not show up in the RStudio IDE after code executions, but after saving and rendering the document, all of them appeared nicely in the published version in my blog.
```{python}
# Uncomment and install the following libraries if required 
#!pip install rdkit-pypi pandas mols2grid matplotlib
```

Import libraries needed for this work as shown below.

```{python}
# RDKit Chemistry
from rdkit import Chem
# RDKit drawing
from rdkit.Chem.Draw import IPythonConsole
from rdkit.Chem import Draw
# RDKit fingerprint generator
from rdkit.Chem import rdFingerprintGenerator
# RDKit functionality for basic data structures
from rdkit.Chem import DataStructs
# Settings to improve quality of structures
from rdkit.Chem import rdDepictor
# SVG = scalable vector graphics, set to false if wanting PNGs instead
IPythonConsole.ipython_useSVG = True
rdDepictor.SetPreferCoordGen(True)
# Add ability to add a molecule to a dataframe
from rdkit.Chem import PandasTools
# mols2grid library provides a convenient way to display molecules in a grid
import mols2grid
# for dataframe manipulations
import pandas as pd
# for plotting graphs
import matplotlib.pyplot as plt
```

<br>

##### **Generate RDKit molecules based on SMILES**

Before any actual molecular manipulation work could begin, I actually needed to download the SMILES of all 5 molecules as mentioned above from the source URLs. I've downloaded all 5 molecules' SMILES and saved as .sdf files (selected 2D structure option).

One of the most well-known COVID-19 oral antivirals was Paxlovid (brand name), which consisted of two active drugs, nirmatrelvir and ritonavir (generic names). As a side note, ritonavir was added like an enhancer agent for nirmatrelvir, due to its known ability to inhibit CYP3A-mediated metabolism of nirmatrelvir, therefore, by having it also inside the oral tablet, it would ensure that the plasma concentration of nirmatrelvir would be kept at an optimal therapeutic level *in vivo*, vital for the antiviral effect. So I started off with nirmatrelvir with its canonical SMILES retrieved from PubChem. To display a molecule as a 2D chemical structure graphically, an open-source cheminformatics toolkit library, RDKit, was used.

```{python}
# Generate a RDKit molecule representing nirmatrelvir
nmt = Chem.MolFromSmiles("CC1(C2C1C(N(C2)C(=O)C(C(C)(C)C)NC(=O)C(F)(F)F)C(=O)NC(CC3CCNC3=O)C#N)C")
nmt
```

```{python}
# Create a RDKit molecule for ritonavir using canonical SMILES
rit = Chem.MolFromSmiles("CC(C)C1=NC(=CS1)CN(C)C(=O)NC(C(C)C)C(=O)NC(CC2=CC=CC=C2)CC(C(CC3=CC=CC=C3)NC(=O)OCC4=CN=CS4)O")
rit
```

```{python}
# Create a RDKit molecule for molnupiravir using canonical SMILES
mol = Chem.MolFromSmiles("CC(C)C(=O)OCC1C(C(C(O1)N2C=CC(=NC2=O)NO)O)O")
mol
```

```{python}
# Create a RDKit molecule for remdesivir by using canonical SMILES
rem = Chem.MolFromSmiles("CCC(CC)COC(=O)C(C)NP(=O)(OCC1C(C(C(O1)(C#N)C2=CC=C3N2N=CN=C3N)O)O)OC4=CC=CC=C4")
rem
```

```{python}
# Create a RDKit molecule for baricitinib by using canonical SMILES
bar = Chem.MolFromSmiles("CCS(=O)(=O)N1CC(C1)(CC#N)N2C=C(C=N2)C3=C4C=CNC4=NC=N3")
bar
```

<br>

##### **Display 2D molecules in grid view**

To display all 5 molecules in a grid view, I've saved all separate .sdf files into  one .sdf file (e.g. covid_antivirals.sdf). A quick way to do this was via CLI by using one line of code: cat *.sdf > file_name.sdf (replace "file_name" as the actual file name wanted). One thing to be aware of was to make sure the directory was changed to the path where all .sdf files were saved when using this line of code (otherwise it might take a while to actually locate it...).
```{python}
# Save all 5 COVID-19 antivirals as a list in a cpds object
cpds = [x for x in Chem.SDMolSupplier("covid_antivirals.sdf")]
cpds
```

Well, this flexible grid view with function to select molecules would be much more useful if there were thousands of molecules downloaded. I was just basically trialling this as a practice, which turned out quite nicely.

```{python}
# Display all compounds in a flexible grid view with selection function
mols2grid.display(cpds)
```

Then I thought about adding drug names to each molecule, rather than listing their IUPAC^[International Union of Pure and Applied Chemistry] names, for the sake of easier reading and viewing. One of the ways to do this was to add legend with the drug names in the same order.

```{python}
# Display compounds in grid view with drug names shown
Draw.MolsToGridImage(cpds, 
                     molsPerRow = 3, 
                     legends = ("baricitinib", "molnupiravir", "nirmatrelvir", "remdesivir", "ritonavir"), 
                     subImgSize=(300, 300), 
                     useSVG = True
                    )
```

<br>

##### **Similarity maps**

Now this part was interesting to me and I spent at least a day or two to just try and understand the fundamentals behind this functionality in RDKit. One of the biggest help for me to fully understand this was this paper: Riniker, S.; Landrum, G. A. “Similarity Maps - A Visualization Strategy for Molecular Fingerprints and Machine-Learning Methods” J. Cheminf. 5:43 (2013). It explained the full methodology behind generating similarity map using fingerprints. 

```{python}
# Build similarity maps between molecules
# Import additional libraries needed
from rdkit.Chem.Draw import SimilarityMaps
import io
from PIL import Image
```

The following step was important to ensure a good image of the map was produced for the molecules, by creating a function for "show_png" first, which was used later.

```{python}
# Binary i/o keeps data as bytes in an in-memory buffer
# A function that creates a bytes object as an image
def show_png(data):
    bio = io.BytesIO(data)
    img = Image.open(bio)
    return img
```

I've randomly set nirmatrelvir as the reference compound. The other 4 molecules were set as test or probe molecules to be compared with the reference compound. So here I've compared nirmatrelvir with ritonavir first.

```{python}
# Create a Draw2D object "a" and specify size of 2D image
a = Draw.MolDraw2DCairo(500, 500)
# Produces a similarity map for nirmatrelvir and ritonavir
# Specify which compounds to compare (reference and probe) for the similarity map
fig, maxweight = SimilarityMaps.GetSimilarityMapForFingerprint(nmt, rit, 
                                                               # creates a lambda function (anonymous function) for use within SimilarityMaps, 
                                                               # then select fingerprint type e.g. Morgan fingerprint
                                                               # types of Morgan fingerprint: bit vector (bv, default) & count vector (count)
                                                               lambda b, c: SimilarityMaps.GetMorganFingerprint(b, c, radius = 2, fpType = 'bv'),
                                                               draw2d = a)

# Finish drawing Draw2D object "a"                                                                                       
a.FinishDrawing()
# Display similarity map                                                             
show_png(a.GetDrawingText())
```

To quickly explain how to look at the contour or topographical map in different colours for the molecule:

* Green shades represented a positive difference or where the similarity decreased when the bits^[Bits in a bit vector or counts in a count vector are converted from structural features in chemical structures to formulate molecular fingerprints, which subsequently allows a more efficient way to compare chemical structures computationally] were removed

* Pink shades showed negative difference or where the similarity increased when the bits were removed 

* Grey shades meant there was no change

Another parameter that might allow us to interpret more easily was to obtain the maximum weight (also known as "maxweight" in the code) for the structure comparison between the two molecules. Maximum weight could be understood as maximum difference between the reference and probe molecules. By default, maximum weight was capped at 1.0. This function was already built in above code, so to find out the maximum weight or difference for nirmatrelvir and ritonavir, simply just use the print() function.

```{python}
# Max weight between nirmatrelvir and ritonavir 
print(maxweight)
```

I've then saved this particular maxweight result with a different label name (to clearly show which molecules were being compared), for later use.

```{python}
mol2_rit_maxw_mol1 = maxweight
mol2_rit_maxw_mol1
```

To further explain and understand the parameter of maximum weight, this paper by Riniker and Landrum have included a full calculation styled as pseudocodes in Python. I have attempted to summarise them in words, along with the codes (adapted from the paper), as below:
```{{python}}
# 1. Calculate the fingerprint for reference molecule
ref_fp = calculate_fingerprint (ref_mol)

# 2. Calculate the fingerprint for test molecule
this_fp = calculate_fingerprint (this_mol)

# 3. Create an empty weights list
weights = []

# 4. Calculate original similarity for ref mol & test mol based on Dice similarity
orig_simil = dice_similarity(ref_fp, this_fp)

# 5. Loop over the different atoms present in the test mol
for atom in this_mol.get_atoms:

# 5. (cont.) Generate a new fingerprint by calculating new fingerprints without each of the atom for the test mol
    new_fp = calculate_fingerprint_without_atom(this_mol, atom)
    
# 5. (cont.) Calculate new similarity for the ref fingerprint & new fingerprint based on Dice similarity
    new_simil = dice_similarity(ref_fp, new_fp)
    
# 6. The atomic weight will be calculated as the difference between the original similarity and the new similarity
weight = original_simil - new_simil

# 7. The atomic weight obtained for each loop iteration (for each atom present) will be added up to contribute to the final atomic weight
weights.append(weight)

# Note: maximum absolute weight is normalised and capped at 1.0
```

Next one was between nirmatrelvir and molnupiravir. I've renamed "maxweight" to "mol3_mol_maxw_mol1" to reflect this parameter was measured between 3^rd^ molecule (molnupiravir) and 1^st^ molecule (nirmatrelvir).

```{python}
# 2. Comparing nirmatrelvir and molnupiravir
a = Draw.MolDraw2DCairo(400, 400)
# Produces a similarity map for molecules selected
# Specify which compounds to compare (reference and probe) for the similarity map
fig, mol3_mol_maxw_mol1 = SimilarityMaps.GetSimilarityMapForFingerprint(nmt, mol, 
                                                               # creates a lambda function (anonymous function) for use within SimilarityMaps, 
                                                               # then select fingerprint type e.g. Morgan fingerprint
                                                               # types of Morgan fingerprint: bit vector (bv, default) & count vector (count)
                                                               lambda b, c: SimilarityMaps.GetMorganFingerprint(b, c, radius = 2, fpType = 'bv'),
                                                               draw2d = a)

# Finish drawing Draw2D object "a"                                                                                       
a.FinishDrawing()
# Display similarity map                                                             
show_png(a.GetDrawingText())
```

The maximum weight between nirmatrelvir and molnupiravir was shown as below.

```{python}
print(mol3_mol_maxw_mol1)
```

Similarity map was then generated for nirmatrelvir and remdesivir.

```{python}
# 3. Comparing nirmatrelvir and remdesivir
a = Draw.MolDraw2DCairo(400, 400)
# Produces a similarity map for molecules selected
# Specify which compounds to compare (reference and probe) for the similarity map
fig, mol4_rem_maxw_mol1 = SimilarityMaps.GetSimilarityMapForFingerprint(nmt, rem, 
                                                               # creates a lambda function (anonymous function) for use within SimilarityMaps, 
                                                               # then select fingerprint type e.g. Morgan fingerprint
                                                               # types of Morgan fingerprint: bit vector (bv, default) & count vector (count)
                                                               lambda b, c: SimilarityMaps.GetMorganFingerprint(b, c, radius = 2, fpType = 'bv'),
                                                               draw2d = a)

# Finish drawing Draw2D object "a"                                                                                       
a.FinishDrawing()
# Display similarity map                                                             
show_png(a.GetDrawingText())
```

Their maximum weight was found as below.

```{python}
print(mol4_rem_maxw_mol1)
```

Lastly, the comparison was made between nirmatrelvir and baricitinib.

```{python}
# 4. Comparing nirmatrelvir and baricitinib
a = Draw.MolDraw2DCairo(400, 400)
# Produces a similarity map for molecules selected
# Specify which compounds to compare (reference and probe) for the similarity map
fig, mol5_bar_maxw_mol1 = SimilarityMaps.GetSimilarityMapForFingerprint(nmt, bar, 
                                                               # creates a lambda function (anonymous function) for use within SimilarityMaps, 
                                                               # then select fingerprint type e.g. Morgan fingerprint
                                                               # types of Morgan fingerprint: bit vector (bv, default) & count vector (count)
                                                               lambda b, c: SimilarityMaps.GetMorganFingerprint(b, c, radius = 2, fpType = 'bv'),
                                                               draw2d = a)

# Finish drawing Draw2D object "a"                                                                                       
a.FinishDrawing()
# Display similarity map                                                             
show_png(a.GetDrawingText())
```

The maximum weight was found as below.

```{python}
print(mol5_bar_maxw_mol1)
```

Short summary:

* Nirmatrelvir vs. remdesivir had the smallest maximum weight or difference out of all 5 compounds

* Nirmatrelvir vs. ritonavir had the biggest maximum weight or difference out of all compounds, the next biggest one would be molnupiravir

<br>

##### **Fingerprint generator**

After using the similarity maps, I found more things to trial in RDKit, and this one was a fingerprint generator. I've decided to use the same 5 molecules as before, and see if I could get similar results.

```{python}
# Re-label molecules for later use
mol1 = nmt
mol2 = rit
mol3 = mol
mol4 = rem
mol5 = bar

# Combine all 5 molecules into a list
mols = [mol1, mol2, mol3, mol4, mol5]
```

Below was the set of codes used to generate a fingerprint between compounds. I've changed the radius to 2 to align with the similarity map test above.

```{python}
# Create an object fp to generate fingerprint
# Default radius of molecule = 3 
fp = rdFingerprintGenerator.GetMorganGenerator(radius = 2)
# Get fingerprints of all molecules in the list
fp1 = [fp.GetFingerprint(x) for x in mols]
fp1
```

```{python}
# Create a loop to iterate through all 5 COVID antivirals 
# to compare the molecular similarities by using Tanimoto coefficient
for i in range(len(fp1)):
    for a in range(i):
        tc = DataStructs.TanimotoSimilarity(fp1[i], fp1[a])
        print(f'mol{i+1}-mol{a+1}: Tanimoto coefficient {tc}')
```

```{python}
# Tanimoto coefficient between nirmatrelvir (mol1) & ritonavir (mol2)
tc_mol1_mol2 = DataStructs.TanimotoSimilarity(fp1[0], fp1[1])

# Tanimoto coefficient between nirmatrelvir (mol1) & molnupiravir (mol3)
tc_mol1_mol3 = DataStructs.TanimotoSimilarity(fp1[0], fp1[2])

# Tanimoto coefficient between nirmatrelvir (mol1) & remdesivir (mol4)
tc_mol1_mol4 = DataStructs.TanimotoSimilarity(fp1[0], fp1[3])

# Tanimoto coefficient between nirmatrelvir (mol1) & baricitinib (mol5)
tc_mol1_mol5 = DataStructs.TanimotoSimilarity(fp1[0], fp1[4])
```

```{python}
tc_mols = [tc_mol1_mol2, tc_mol1_mol3, tc_mol1_mol4, tc_mol1_mol5]
tc_mols
```

```{python}
# Display compounds to help with recognising which antivirals are being compared
Draw.MolsToGridImage(mols, 
                     molsPerRow = 3, 
                     legends = ("mol1 = nirmatrelvir", "mol2 = ritonavir", "mol3 = molnupiravir", "mol4 = remdesivir", "mol5 = baricitinib"), 
                     subImgSize=(300, 300), 
                     useSVG = True
                    )
```

```{python}
maxw_diff = [mol2_rit_maxw_mol1, mol3_mol_maxw_mol1, mol4_rem_maxw_mol1, mol5_bar_maxw_mol1]
maxw_diff
```

```{python}
df_ms = pd.DataFrame(list(zip(maxw_diff, tc_mols)),
                     index = ['nmt_v_rit', 'nmt_v_mol', 'nmt_v_rem', 'nmt_v_bar'],
                     columns = ['Maxweight', 'T_coeff']
                    )
df_ms
```

```{python}
df_ms.reset_index(inplace = True)
df_ms_new = df_ms.rename(columns = {'index': 'Molecules'})
df_ms_new
```

```{python}
# Set the overall font size to make all labels on graph easier to read
plt.rcParams.update({'font.size': 12})
# Plot a bar graph showing two different molecular similarity parameters 
# Maximum weight from similarity map & Tanimoto coefficient calculated based on Morgan fingerprints 
# Used on 5 known FDA-approved COVID-19 antivirals
# Used nirmatrelvir as reference compound (mol1) and compared it with 4 other antivirals
df_ms_new.plot(x = 'Molecules', 
               y = ['Maxweight', 'T_coeff'], 
               kind = 'bar', 
               figsize = (7, 7)
               )
# Add title
plt.title(label = 'Molecular similarities between 5 known COVID-19 antivirals')


# Add caption for the graph about the abbreviations of all the molecules compared 
# Import textwrap module
import textwrap
t = "nmt = nirmatrelvir, "\
    "rit = ritonavir, "\
    "mol = molnupiravir, "\
    "rem = remdesivir, "\
    "bar = baricitinib"
b = textwrap.fill(t, width = 58)
x = 'Molecules'
y = ['Maxweight', 'T_coeff']
plt.text(len(x) / 2, 0, b, ha = 'left', va = 'bottom')
```

<br>

##### **Final words and acknowledgement**
I have read quite a few blog posts from P. Walter and Iwatobipen, and have enjoyed them but never quite got around to write one myself, so finally I did it... although this post itself is not written in an amazing style or grand scale, but I hope to project what I did here in the future, e.g. to apply them for a larger set of compounds. My very draft thought now is to perhaps trial using ChEMBL library, which from what I've heard and seen, is a useful open-source cheminformatics compounds library, which includes many other relevant compound information (not just chemical structures). 

As a little prelude to what other work I'm also planning to do, um... I've managed to start learning Rust as well (there is also a story about why I started learning Rust, which I'll leave for another future post to explain if I feel it fits the context of the blog post. I think from what I tried so far, only at the seedling stage currently, it's going to be an even steeper learning curve than Python and R, but I feel it's going to benefit whatever I'm planning to do consciously/unconsciously in the future).

* [P. Walter's blog](https://practicalcheminformatics.blogspot.com)
* [Iwatobipen's blog](https://iwatobipen.wordpress.com)
* [RDKit documentation](https://www.rdkit.org/docs/index.html) by G. Landrum