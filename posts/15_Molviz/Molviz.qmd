---
title: "Molecular visualisation (Molviz) web application"
subtitle: "Using Shiny for Python application framework - part 2"
author: Jennifer HY Lin
date: '2023-8-9'
draft: true
categories:
  - Python
  - Datamol
  - Shiny
  - Pandas
  - Polars
  - itables
jupyter: python3
---

*The final deployed app is now on Shinyapps.io with [link here](https://jhylin.shinyapps.io/molviz_app/) or visit https://jhylin.shinyapps.io/molviz_app/*

*Full code [link here](https://github.com/jhylin/Molviz_app) or visit https://github.com/jhylin/Molviz_app*

<br>

##### **Background - how the app started**

Originally I had an idea of incorporating mols2grid library within Shiny for Python web app framework (after seeing an example of a similar app in Streamlit previously). So I worked on a few ideas, but obviously mols2grid was designed to work inside Jupyter Notebook/Lab and Shiny for Python was only out of alpha at that stage so things were still being developed. After a few trials, unfortunately mols2grid wasn't directly compatible with the Shiny for Python framework at that time (I even wrote a small story about it - link). 

I then went away to work on another project on molecular scaffolds and left this mini project aside. However, recently I had another idea of trying to build a Shiny for Python app from the scratch (with a focus on cheminformatics or chemical information), so that users in relevant fields can view and save 2D images of small molecules in a web browser environment instead of only inside a Jupyter Notebook/Lab. I also thought to place the Shiny for Python framework to test if it was being used in a more intensive area such as chemistry and drug discovery.

Another reason that have triggered this side project was that I came across a comment from an old RDKit blog post from someone asking about how to save compound image as a PNG file, since SVG version was hard to convert etc. (or something along that line). I thought it should be possible, and this should not be only limited to Jupyter environments only (thinking of people not doing coding at all...), so here we are.

<br>

##### **About each version of the app**

I'll try to explain what each version of the app_x.py script entails, as there are currently several different versions of them inside the repository. The final version is the one called "app.py", named this way so that it'll be recognised by rsconnect/Shinyapps.io when deploying the app. By providing some explanations below should also show that it was quite a process to arrive at the final "app.py", it wasn't built within a day for sure (at least for me).

<br>

###### **app_molviz_v1.py**

This was the first version that purely provided the ability to show 2D images of the molecules via selecting their corresponding index numbers. The libraries used appeared less aligned and a few tests were run below (some of them commented out during trials). This was the one that I've figured out how to make the image appeared in the app.

<br>

###### **app_molviz_v2.py**

For the second version, I started thinking about how I would present the app in a simple layout for the end users. The backbone code to support image generations was by using rdkit.Chem.Draw package's [MolToImage()](https://www.rdkit.org/docs/source/rdkit.Chem.Draw.html?highlight=moltofile) module, which normally returns a PIL[^4] image object, and also supports atom and bond highlighting. Another useful module that I've tried was MolToFile() within the same package, which would generate and save a PNG file for a specified molecule from the dataframe.

I then took a bit more time to familiarise myself with some basic PIL image manipulations, and used online resources to formulate code to merge separate PNG images into one table grid-like image - potentially may be useful for substructural or R-group comparisons. 

I have also added the interactive data table at the end to see how it would fit in with the rest of the app.

[^4]: Python image library

<br>

###### **app_molviz_v3.py**

The third version mainly dealt with how to segregate and differentiate between highlighting or non-highlighting and also with or without index numbers showing for the compounds in the images. I've tried to use a different code for atom labelling this time with thanks to this [link](https://stackoverflow.com/questions/53321453/rdkit-how-to-show-moleculars-atoms-number/66732268#66732268). However, there was always an issue of not being able to flip back from with index to without index, since the atom labelling code itself somehow overflows its effect to the rest after labelling the atom indices (presumably this atom labelling code would work great in a Jupyter notebook scenario).

<br>

###### **app_molviz_v4.py & app_molviz_v5.py**

Both version four and five were where I've tested using "atomNote" (numbers appear beside atoms) instead of "atomLabel" (numbers replaces atoms directly in structures) to label atoms in molecular structures.

An example of the atom labelling code would look like this (replace 'atomNote' with 'atomLabe' to get different labelling effect):

```{{python}}
for atom in mols[input.mol()].GetAtoms():
  atom.SetProp('atomNote', str(atom.GetIdx()))
```

I've also started adding introductory texts for the app and edited the layout a bit more.

<br>

###### **app_molviz_v6_hf.py**

This was basically the final version of the app, but with code edited to attempt to deploy the app on HuggingFace. The main difference I was testing was how to store the saved images as Docker was new to me at the time, and then while I was thinking about changing the Dockerfile, a newer problem actually appeared in relation to the cairosvg code. Because of this, I then placed this deployment on hold in order to buy more time to figure out code, and also to try Shinyapps.io to see if this could be deployed.

<br>

###### **app_molviz_v6.py or app.py**

This was the last version and was the version used to deploy the app on Shinyapps.io. I had to rename the file as mentioned previously to "app.py" so that the Shinyapps.io servers would recognise this Python script as the script to run the app (otherwise it wouldn't be deployed successfully, this took me a few tries and to read the log file to figure this out). So it was saved as a separate file, and for any latest text changes in the app I would refer to app.py as the most current app file.

The biggest code change was that I ended up not using the MolToImage() or MolToFile() modules, but rather I used rdMolDraw2D module from rdkit.Chem.Draw package. The reason being I've noticed the image resolutions weren't great for the previously used modules (Jupyter notebook environments should not have this problem, as you could simply switch on this line of code by setting it to true like this, IPythonConsole.ipython_useSVG = True). So I resorted to other means and came across this useful [link](https://stackoverflow.com/questions/61659643/rdkit-how-to-draw-high-resolution-chemical-structure?rq=3) to generate images with better resolutions, and introduced the cairosvg library.

So the code was changed and would now use rdMolDraw2D.MolDraw2DSVG() first and add on addAtomIndices from drawOptions() and also DrawMolecule() to highlight substructures. The SVG generated would then be converted to PNG via cairosvg library. The end result produced slightly better image resolutions. Although I've found for more structurally complexed molecules, the image size would really need to be quite large to be in the high resolution zone. For compounds with simpler structures, this seemed much less of a problem. This was also why I had to have these PNG images blown up this large in the app, so to cater for the image resolution aspect.

<br>

##### **Other files**

###### **code_test.py**

I'm not sure exactly sure how other data scientists/developers work, but for me since I came from a completely different background and training, I'm used to plan, set up and do experiments to test things I'd like to try, and see where the results will lead me to. So for this in a virtual computer setting, I use the "code_tests.py" to test a lot of different code. 

If you go into this file, you'll likely see a lot of RDKit code trials, and I have had a lot of fun doing this since I get to see the results right away when running the code, and learning new code functions that way. If the end result is not the one I've intended, I go on short journeys to look for answers (surprisingly I didn't use any generative AI chatbots actually), it'll mainly be chosen intuitively as I search online, but for this particular project, a lot of it was past RDKit blogs, StackOverflow and random snippets I came across that have given me ideas about solving a particular issue.

<br>

###### **app_table.py & app_itables.py**

These two as the file names have suggested were trials for incorporating dataframe inside a web app. The difference was that app_table.py was purely a data table being presented inside the app, without any other particular features, while app_itables.py utilised a different package called itables, which provided an interactive feature to search for data in rows. The previous post on data source used for this app was presented as an interactive data table embedded inside a Quarto document, the same principle would also apply to the table being present inside a Jupyter notebook environment.

<br>

###### **app_sample.py**

This file was provided by Posit (formerly known as RStudio) from their Python for Shiny app template in HuggingFace as an example script for an app.

<br>

##### **Features of the app**

Comments from scripts available - check.

Mainly for viewing, saving and substructure highlighting of target molecules.

<br>

##### **App deployment**

Two places I've tried so far - HuggingFace and Shinyapps.io. 

Issue with cairosvg code when deploying on HuggingFace.

Deploying to Shinyapps.io wasn't a smooth ride as well - some problems initially. Explain the steps.

requirements.txt

<br>

##### **Further improvements of the app**

May be useful to add a download option for real-world use case, but for demonstration purpose, I'm leaving it as a "View" only for now, unless I get comments from readers that they'd like to try this. For localhost version (e.g. if operating from an IDE such as VS Code), the saving image function should work and the files will be saved into the working directory.

It may be even better to use SMARTS or SMILES for highlighting compound substructures actually. I'm using atom indices as I'm using a specific code in RDKit, but perhaps more experienced people with RDKit will know how to add other alternative options.

The app layout may be further optimised e.g. interactive data table could be placed at a different location.

<br>

##### **Final words**

The whole idea behind this mini side project was to show that interested users could use this web app framework to build an interactive app using their own data. Other useful web app frameworks are also available and definitely not limited to the one I'm using here (I'm simply trying to test it out since it's relatively new comparing to others). In a drug discovery and development setting, this could be useful to make non-coding parties understand where the computer side is trying to do, and to help them during their lab experimental workflows, hoping to add some convenience at least.
