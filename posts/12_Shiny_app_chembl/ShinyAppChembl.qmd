---
title: Shiny app in R
subtitle: Small molecules in ChEMBL database
author: Jennifer HY Lin
date: '2023-4-5'
draft: true
categories:
  - R
  - Shiny
  - ChEMBL database
  - Cheminformatics
---

##### **Back story**

It has been a long while since I've used R in my projects. Last year during the time when I bravely embraced the role of rotating curator for @WeAreRLadies on Twitter around end of October, I did mention that I wanted to learn Shiny. I haven't forgotten about this actually. So as promised, here it is, my first ever Shiny app in R, which is really a very simple interactive web app about small molecules from ChEMBL database. The URL to reach this app, [ShinyAppChembl](https://jhylin.shinyapps.io/ShinyAppChembl/), is at: https://jhylin.shinyapps.io/ShinyAppChembl/. It shows a selected set of physicochemical properties for the curated small molecules in different max phases from the database in boxplot formats.

<br>

##### **The process**

Since I haven't been using a lot of R lately, I'd just like to document how I approached this Shiny app framework, as part of my self-directed learning for R that started around mid-2022. The first place I went to was not Google's Bard or OpenAI's ChatGPT, as I was trying to preempt a scenario where if both of these options were temporarily down, what would I do to learn a new tool. So I visited the [Shiny website](https://shiny.rstudio.com/) first, and literally started from the "Get Started" section there, then tried to read through the lessons provided. I gathered a quick overview about the main core components within a Shiny app, which were the user interface, server logic and the last part to run or create app, and thought to get started from there.

One of the most helpful online books called, "[Mastering Shiny](https://mastering-shiny.org/index.html)" had clarified a few coding issues for me. The reactivity section in the book was very useful as well to help with understanding the interactivity concept in the app. The best and also the hardest thing at this stage after reading some of the information was to actually start coding for the app in RStudio IDE, which I did soon after.

<br>

##### **Trial-and-errors**

Initially I've noticed from the gallery section from the Shiny website that some of the basic Shiny apps had plots produced from the original stats R code. So I started with this first and ended up with a draft version shown below:

![Draft app using base R boxplot format - screenshot taken by author](Draft_app_error_1.jpg)

<br>

This then got me thinking to try the ggplot2 version, which I've personally found it to be more elegant and aesthetically more pleasing. However, I kept on hitting a roadblock repeatedly which could be seen in the image below:

![Second draft app using ggplot2 boxplot format - screenshot taken by author](Draft_app_error_2.jpg)

I ended up working through this issue of not being able to display the boxplots properly over two days at least, where I tried to figure out how to change the code so that the boxplots would appear as the output in the app.

<br>

##### **Final app**

Before I even started setting up the app.R file, I actually wrote a plot function code, as shown below, to trial plotting the boxplots in a separate R script file ensuring that the code works before using it in the app.R file for the app.

``` {{r}}
dfBoxplot <- function(var) {
  label <- rlang::englue("{{var}} vs. Max Phases of small molecules")
  
  chembl %>% 
    select(`Max Phase`, {{ var }}) %>% 
    ggplot(aes(x = `Max Phase`, y = {{ var }})) +
    geom_boxplot(aes(group = cut_width(`Max Phase`, 0.25), 
                     colour = `Max Phase`), 
                 outlier.alpha = 0.2) +
    labs(title = label)
}
```

Once I made sure it worked, then I transplanted the function code I wrote earlier into the server section of the app.R file, however it wasn't that simple obviously. Then through the process of trial-and-errors which were described above, I managed to figure out the plot output code in the final version. I then read about the section in the "Mastering Shiny" book on "Tidy evaluation", which had thoroughly summarised the problems I've encountered and also explained how to write the code to make the app work with the intended input data and outcome, so I'd highly recommend new users to read this section, which might shorten the time required to figure out the code. So, the final app now looks like this:

![Screenshot taken by author](Final_app.jpg)

<br>

##### **App deployment**

The next stage after I got the app to work was choosing where I would deploy it. At first, I went to the [Shiny section](https://quarto.org/docs/interactive/shiny/index.html) in the Quarto website to see if it was possible to deploy the app in Quarto. However, after reading through several questions and answers in relation to Shiny apps and Quarto website, it was obvious that it was still not possible yet to deploy the Shiny app in an interactive style on the Quarto website (but it was mentioned in Posit community that this was being looked into, so perhaps this is currently still a work-in-progress). This meant that at most, there could only be an image of the app on a Quarto document at most. However, I was pleasantly surprised that there was a Shiny in Python version, which had a ShinyLive option to deploy Shiny app interactively in GitHub Gist etc. I ended up choosing shinyapp.io to deploy my first Shiny app for now, and I'll go from there in the future.


##### **Brief look at the boxplots**

Perhaps it might be a bit too elusive not to talk about these boxplots. So I'll briefly discuss the outcomes I've seen from using the app myself.
