---
title: Shiny app in R
subtitle: Small molecules in ChEMBL database
author: Jennifer HY Lin
date: '2023-4-4'
draft: true
categories:
  - R
  - Shiny
  - ChEMBL database
  - Cheminformatics
---

##### **Back story**

It has been a long while since I've used R in my projects. Last year during the time when I bravely embraced the role of rotating curator for @WeAreRLadies on Twitter around end of October, I remembered mentioning that I wanted to learn Shiny. I haven't forgotten about this actually. So as promised, here it is, my first ever Shiny app in R, combining pharmaceutical chemistry (the dataset came from ChEMBL) and web interactive app, I've got myself and perhaps a few others a very simple interactive web app on small molecules from ChEMBL database. I seem to really like the data in ChEMBL database, knowing that I can probably do many more with it to explore further. 

The URL to reach this app, [ShinyAppChembl](https://jhylin.shinyapps.io/ShinyAppChembl/), is at: https://jhylin.shinyapps.io/ShinyAppChembl/, which shows a selected set of physicochemical properties of small molecules in different max phases from the ChEMBL database in a set of boxplots.

<br>

##### **The process**

Since I haven't been using a lot of R lately, I'd like to document how I approached this Shiny app framework, which was brand new for me, as part of my self-directed learning of R that started around mid-2022. The first place I went to was not Google's Bard or OpenAI's ChatGPT, as I was trying to preempt a scenario where if both of these options were temporarily down, what would I do to learn a new tool. So I visited the [Shiny website](https://shiny.rstudio.com/) first, and literally started from the "Get Started" section there, then tried to read through the lessons provided. I gathered a quick overview about the main core components within a Shiny app, which were the user interface, server logic and the last part to run or create app, and thought to get started from there.

One of the most helpful online books called, "[Mastering Shiny](https://mastering-shiny.org/index.html)" had clarified a few coding issues for me, which I would talk a bit more down below. The reactivity section in the book was very useful for me to understand the interactivity concept for the app. The best and also the hardest thing at this stage after reading some of the information was to actually start coding for the app in RStudio IDE. I did get myself started soon after, which was where the fun began.

<br>

##### **Trial-and-errors**

I'd just like share two trial-and-error stages where I tried to do what I intended to do, but did not quite reach the expected outcome. The first one was where I've noticed from the gallery section in the Shiny website that some of the basic Shiny apps had plots in the format of using base R code. So I started with this first with a draft version shown in the screenshot below:

![Draft app using base R boxplot format - screenshot taken by author](Draft_app_error_1.jpg)

<br>

This then got me thinking to use the ggplot2 version, which I've personally found to be more elegant and aesthetically more pleasing. However, I kept on hitting a roadblock repeatedly at the app outcome shown below:

![Second draft app using ggplot2 boxplot format - screenshot taken by author](Draft_app_error_2.jpg)

I ended up working through this issue of not being able to display the boxplots properly over two days at least, trying to figure out how to change the plotting code. 

<br>

##### **Final app**

I initially wrote a function code, as shown below, to plot the boxplots in a separate R script file to make sure the code works before using this function code in the app.R file for the Shiny app. 

```{{r}}
dfBoxplot <- function(var) {
  label <- rlang::englue("{{var}} vs. Max Phases of small molecules")
  
  chembl %>% 
    select(`Max Phase`, {{ var }}) %>% 
    ggplot(aes(x = `Max Phase`, y = {{ var }})) +
    geom_boxplot(aes(group = cut_width(`Max Phase`, 0.25), 
                     colour = `Max Phase`), 
                 outlier.alpha = 0.2) +
    labs(title = label)
}
```

I then transplanted the function code I wrote earlier into the server section of the app.R file, but it didn't quite work. 

A section in the "Mastering Shiny" book on "Tidy evaluation" had thoroughly summarised the problems new users might encounter and also explained how to write the code to make the app work with the intended input data and outcome. 

I managed to solve my own errors in the code by reading the code examples from the "Mastering Shiny" book, and changed the plotting code in the server section. The final app now looks like this:

![Screenshot taken by author](Final_app.jpg)

<br>

##### **App deployment**

Now having a Shiny app working on my local machine was not a problem when I've finally reached how I wanted the app to be, even though it was really a very simple app to make, nothing fancy at this stage. I went to the [Shiny section](https://quarto.org/docs/interactive/shiny/index.html) in the Quarto website to see if it's possible to deploy Shiny app in Quarto. After reading through several other questions and answers about Shiny app and Quarto website, it was obvious that it was still yet not possible to deploy the Shiny app on the Quarto website (but it was mentioned that this was being looked into, so perhaps still a work-in-progress), which meant that at most, there could only be an image of the app on a Quarto document at most (knowing that Quarto website is based on static web pages). However, I was pleasantly surprised that there was a Shiny in Python version, which had a ShinyLive option where developers would be able to deploy an interactive app in GitHub Gist etc. I ended up deploying my first Shiny app using the free version from shinyapp.io for now, as I might be thinking about tweaking my current app further e.g. adding more details to it.

