{
  "hash": "d0edce4dff5522e9b5585a8b327c5ca7",
  "result": {
    "markdown": "---\ntitle: Small molecules in ChEMBL database\nsubtitle: Series 1.1.3 - Building logistic regression model using *scikit-learn*\nauthor: Jennifer HY Lin\ndate: 2023-1-4\ndate-modified: last-modified\ndraft: true\ncategories:\n  - Machine learning projects\n  - Scikit-learn\n  - Polars\n  - Python\n  - Jupyter\n  - ChEMBL database\n  - Cheminformatics\n---\n\n##### **Import libraries**\n\nThis is the third post that follows on from the previous two about parquet file and data preprocessing, and it will need the following libraries to build and train a logistic regression (LR) model before using it to predict max phase outcome on a testing dataset by using scikit-learn.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n## using magic pip to install sklearn & altair (somehow venv keeps switching off in vscode...)\n# %pip install -U scikit-learn\n# %pip install altair\n\nimport sklearn\nprint(f\"scikit-learn version used is: {sklearn.__version__}\")\nfrom sklearn import preprocessing, set_config\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nimport polars as pl\nprint(f\"polars version used is: {pl.__version__}\")\nimport altair as alt\nprint(f\"altair version used is: {alt.__version__}\")\nimport pickle\nimport numpy as np\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nscikit-learn version used is: 1.5.0\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\npolars version used is: 1.9.0\naltair version used is: 5.4.1\n```\n:::\n:::\n\n\nThe same set of data saved in the previous post will be read here using polars dataframe library.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pl.read_csv(\"df_ml.csv\")\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5_670, 9)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Max_Phase</th><th>Polar Surface Area</th><th>HBA</th><th>HBD</th><th>#RO5 Violations</th><th>QED Weighted</th><th>CX LogP</th><th>CX LogD</th><th>Heavy Atoms</th></tr><tr><td>i64</td><td>f64</td><td>i64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>0</td><td>66.81</td><td>4</td><td>1</td><td>0</td><td>0.47</td><td>3.94</td><td>3.94</td><td>32</td></tr><tr><td>0</td><td>62.55</td><td>3</td><td>1</td><td>0</td><td>0.93</td><td>3.38</td><td>3.38</td><td>25</td></tr><tr><td>0</td><td>73.86</td><td>5</td><td>1</td><td>2</td><td>0.12</td><td>9.34</td><td>9.34</td><td>40</td></tr><tr><td>0</td><td>84.22</td><td>4</td><td>2</td><td>0</td><td>0.76</td><td>2.01</td><td>-0.19</td><td>26</td></tr><tr><td>0</td><td>40.46</td><td>4</td><td>0</td><td>0</td><td>0.62</td><td>4.0</td><td>4.0</td><td>26</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>1</td><td>128.03</td><td>8</td><td>2</td><td>0</td><td>0.49</td><td>2.09</td><td>1.86</td><td>34</td></tr><tr><td>1</td><td>0.0</td><td>0</td><td>0</td><td>0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0</td></tr><tr><td>1</td><td>74.02</td><td>6</td><td>1</td><td>0</td><td>0.68</td><td>3.65</td><td>2.3</td><td>30</td></tr><tr><td>1</td><td>94.83</td><td>4</td><td>3</td><td>0</td><td>0.44</td><td>1.2</td><td>-1.18</td><td>12</td></tr><tr><td>1</td><td>95.92</td><td>6</td><td>1</td><td>0</td><td>0.9</td><td>1.66</td><td>1.66</td><td>18</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Logistic regression with *scikit-learn***\n\n[LR](https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html#logisticregression) is one of the supervised methods in the statistical machine learning (ML) area. As the term \"supervised\" suggests, this type of ML is purely data-driven to allow computers to learn patterns from the input data with known outcomes in order to predict the same target outcomes for a different set of data that is previously unseen by the computer.\n\n###### **Define X and y variables**\n\nThe dataset will be splitted into X (features) and y (target) variables first.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Define X variables\nX = df[\"#RO5 Violations\", \"Polar Surface Area\", \"HBA\", \"HBD\", \"QED Weighted\", \"CX LogP\", \"CX LogD\", \"Heavy Atoms\"]\nX\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5_670, 8)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>#RO5 Violations</th><th>Polar Surface Area</th><th>HBA</th><th>HBD</th><th>QED Weighted</th><th>CX LogP</th><th>CX LogD</th><th>Heavy Atoms</th></tr><tr><td>i64</td><td>f64</td><td>i64</td><td>i64</td><td>f64</td><td>f64</td><td>f64</td><td>i64</td></tr></thead><tbody><tr><td>0</td><td>66.81</td><td>4</td><td>1</td><td>0.47</td><td>3.94</td><td>3.94</td><td>32</td></tr><tr><td>0</td><td>62.55</td><td>3</td><td>1</td><td>0.93</td><td>3.38</td><td>3.38</td><td>25</td></tr><tr><td>2</td><td>73.86</td><td>5</td><td>1</td><td>0.12</td><td>9.34</td><td>9.34</td><td>40</td></tr><tr><td>0</td><td>84.22</td><td>4</td><td>2</td><td>0.76</td><td>2.01</td><td>-0.19</td><td>26</td></tr><tr><td>0</td><td>40.46</td><td>4</td><td>0</td><td>0.62</td><td>4.0</td><td>4.0</td><td>26</td></tr><tr><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td><td>&hellip;</td></tr><tr><td>0</td><td>128.03</td><td>8</td><td>2</td><td>0.49</td><td>2.09</td><td>1.86</td><td>34</td></tr><tr><td>0</td><td>0.0</td><td>0</td><td>0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0</td></tr><tr><td>0</td><td>74.02</td><td>6</td><td>1</td><td>0.68</td><td>3.65</td><td>2.3</td><td>30</td></tr><tr><td>0</td><td>94.83</td><td>4</td><td>3</td><td>0.44</td><td>1.2</td><td>-1.18</td><td>12</td></tr><tr><td>0</td><td>95.92</td><td>6</td><td>1</td><td>0.9</td><td>1.66</td><td>1.66</td><td>18</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Define y variable\ny = df[\"Max_Phase\"]\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (5_670,)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Max_Phase</th></tr><tr><td>i64</td></tr></thead><tbody><tr><td>0</td></tr><tr><td>0</td></tr><tr><td>0</td></tr><tr><td>0</td></tr><tr><td>0</td></tr><tr><td>&hellip;</td></tr><tr><td>1</td></tr><tr><td>1</td></tr><tr><td>1</td></tr><tr><td>1</td></tr><tr><td>1</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nNote: no need to use `to_numpy()` as there's a transform step included when using pipeline to create a LR model (also `StandardScaler()` going to be used). This also applies if using `fit_transform()` or `transform()` when not using pipeline - see scikit-learn reference on \"[transform](https://scikit-learn.org/stable/glossary.html#term-transform)\".\n\n<br>\n\n###### **Prepare training and testing sets**\n\nThen the data will be further splitted into separate training and testing sets.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n## Random number generator\n#rng = np.random.RandomState(0) - note: this may produce different result each time\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 50)\nprint('Training set:', X_train.shape, y_train.shape)\nprint('Testing set:', X_test.shape, y_test.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTraining set: (4536, 8) (4536,)\nTesting set: (1134, 8) (1134,)\n```\n:::\n:::\n\n\n<br>\n\n###### **Pipeline method**\n\nSome benefits of using pipeline ([scikit-learn reference](https://scikit-learn.org/stable/modules/compose.html#pipeline-chaining-estimators)):\n\n- chaining preprocessing step with different transformers and estimators in one go where we only have to call fit and predict once on our data \n\n- avoiding data leakage from the testing set into the training set by making sure the same set of samples is used to train the transformers and predictors \n\n- avoiding missing out on the transform step (note: calling `fit()` on pipeline is equivalent to calling `fit()` on each estimator and `transform()` input data before the next step, plus `StandardScaler()` is going to be used in the pipeline as well - repeating myself here but this is just a gentle reminder...)\n\nThe example below uses `Pipeline()` to construct a pipeline that takes in a standard scaler to scale data and also a LR estimator, along with some parameters.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n## Pipeline:\n\n# Ensure prediction output can be read in polars df\nset_config(transform_output=\"polars\")\n\n# multi_class defaults to 'auto' which selects 'ovr' if the data is binary, or if solver='liblinear'\n# multi_class is deprecated in version 1.5 and will be removed in 1.7 \n# this post uses sklearn version 1.5.0\nparams_lr = {\n  # solver for small dataset\n  \"solver\": \"liblinear\",\n  \"random_state\": 50\n}\n\nLR = Pipeline(steps=[\n  # Preprocess/scale the dataset (transformer)\n  (\"StandardScaler\", StandardScaler()), # can add set_output() if preferred\n  # e.g. StandardScaler().set_output(transform=\"polars\")\n  # Create an instance of LR classifier (estimator)\n  (\"LogR\", LogisticRegression(**params_lr))\n  ])\n\n# can add set_output() if preferred e.g. LR.set_output(transform=\"polars\")\nLR.fit(X_train, y_train)\npred = LR.predict(X_test)\nLR.score(X_test, y_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n0.689594356261023\n```\n:::\n:::\n\n\nDuring the pipeline building, I've figured out how to integrate set_output() in Polars, and noted that the best use case is to show the `feature_names_in_` along with `coef_` ([scikit-learn reference](https://scikit-learn.org/stable/glossary.html#term-coef_)). The first issue is that the feature names are being generated as \"[x0, x1, x2...]\", which is not useful. One of the possible reasons could be because all the molecular features are not in strings (as they're either i64 or f64), so the feature names are not shown - I'm actually unsure about this but this is just my guess. \n\nOne of the other ways I've tried is to use `ColumnTransformer()` within the pipeline ([scikit-learn reference]((https://scikit-learn.org/stable/modules/generated/sklearn.compose.ColumnTransformer.html)) - code example folded below) but unfortunately it hasn't worked as well as expected.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code code-fold=\"true\"}\n# from sklearn.compose import ColumnTransformer\n# num_cols = [\"#RO5 Violations\", \"Polar Surface Area\", \"HBA\", \"HBD\", \"QED Weighted\", \"CX LogP\", \"CX LogD\", \"Heavy Atoms\"]\n# ct = ColumnTransformer(\n#     (\"numerical\", num_cols),\n#     verbose_feature_names_out=False,\n#   )\n# ct.set_output(transform=\"polars\")\n```\n:::\n\n\nThe pipeline above is the final version that works to show molecular feature names with their corresponding coefficients in a polars dataframe output. There are 3 options to add either `set_config(transform_output=\"polars\")` or `set_output(transform_output=\"polars\")` with the pipeline code - only really needing one line (and not all 3 - it'll still work but probably unnecessary to add extra code). I've marked all 3 options in the pipeline code above.\n\n<br>\n\n###### **Molecular features and coefficients**\n\nNext, I'm calling out the LR model used above in the pipeline as we want to get the feature names used for training and predicting along with their corresponding coefficients, and generate a bar chart to show their relationship ([reference on plotting directly in Polars using Altair](https://docs.pola.rs/api/python/stable/reference/dataframe/plot.html)).\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nlog_reg = LR[-1]\nlog_reg\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: black;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 1ex;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(random_state=50, solver=&#x27;liblinear&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LogisticRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(random_state=50, solver=&#x27;liblinear&#x27;)</pre></div> </div></div></div></div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Save feature array as df\nlr_feat = pl.Series(log_reg.feature_names_in_).to_frame(\"Feature_names\")\n# Explode df due to a list series - e.g. array([[1, 2, 3...]]) and not array([1, 2, 3...])\nlr_coef = pl.Series(log_reg.coef_).to_frame(\"Coef\").explode(\"Coef\")\n# Concatenate dfs horizontally\ndf_feat = pl.concat([lr_feat, lr_coef], how=\"horizontal\")\n\n# Using altair to plot feature names vs. coefficients \ndf_feat.plot.bar(\n  x=\"Coef\", \n  # -x = sorting in descending order, x = ascending\n  y=alt.Y(\"Feature_names\").sort(\"-x\"), \n  #color=\"Feature_names\", #will create a legend if used\n  tooltip=\"Coef\",\n).configure_axis(\n  labelFontSize=15,\n  titleFontSize=15\n).configure_view(\n  continuousWidth=600,\n  discreteHeight=300\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n\n<style>\n  #altair-viz-7583d6cee5b54830befb77c005f83757.vega-embed {\n    width: 100%;\n    display: flex;\n  }\n\n  #altair-viz-7583d6cee5b54830befb77c005f83757.vega-embed details,\n  #altair-viz-7583d6cee5b54830befb77c005f83757.vega-embed details summary {\n    position: relative;\n  }\n</style>\n<div id=\"altair-viz-7583d6cee5b54830befb77c005f83757\"></div>\n<script type=\"text/javascript\">\n  var VEGA_DEBUG = (typeof VEGA_DEBUG == \"undefined\") ? {} : VEGA_DEBUG;\n  (function(spec, embedOpt){\n    let outputDiv = document.currentScript.previousElementSibling;\n    if (outputDiv.id !== \"altair-viz-7583d6cee5b54830befb77c005f83757\") {\n      outputDiv = document.getElementById(\"altair-viz-7583d6cee5b54830befb77c005f83757\");\n    }\n    const paths = {\n      \"vega\": \"https://cdn.jsdelivr.net/npm/vega@5?noext\",\n      \"vega-lib\": \"https://cdn.jsdelivr.net/npm/vega-lib?noext\",\n      \"vega-lite\": \"https://cdn.jsdelivr.net/npm/vega-lite@5.20.1?noext\",\n      \"vega-embed\": \"https://cdn.jsdelivr.net/npm/vega-embed@6?noext\",\n    };\n\n    function maybeLoadScript(lib, version) {\n      var key = `${lib.replace(\"-\", \"\")}_version`;\n      return (VEGA_DEBUG[key] == version) ?\n        Promise.resolve(paths[lib]) :\n        new Promise(function(resolve, reject) {\n          var s = document.createElement('script');\n          document.getElementsByTagName(\"head\")[0].appendChild(s);\n          s.async = true;\n          s.onload = () => {\n            VEGA_DEBUG[key] = version;\n            return resolve(paths[lib]);\n          };\n          s.onerror = () => reject(`Error loading script: ${paths[lib]}`);\n          s.src = paths[lib];\n        });\n    }\n\n    function showError(err) {\n      outputDiv.innerHTML = `<div class=\"error\" style=\"color:red;\">${err}</div>`;\n      throw err;\n    }\n\n    function displayChart(vegaEmbed) {\n      vegaEmbed(outputDiv, spec, embedOpt)\n        .catch(err => showError(`Javascript Error: ${err.message}<br>This usually means there's a typo in your chart specification. See the javascript console for the full traceback.`));\n    }\n\n    if(typeof define === \"function\" && define.amd) {\n      requirejs.config({paths});\n      require([\"vega-embed\"], displayChart, err => showError(`Error loading script: ${err.message}`));\n    } else {\n      maybeLoadScript(\"vega\", \"5\")\n        .then(() => maybeLoadScript(\"vega-lite\", \"5.20.1\"))\n        .then(() => maybeLoadScript(\"vega-embed\", \"6\"))\n        .catch(showError)\n        .then(() => displayChart(vegaEmbed));\n    }\n  })({\"config\": {\"view\": {\"continuousWidth\": 600, \"continuousHeight\": 300, \"discreteHeight\": 300}, \"axis\": {\"labelFontSize\": 15, \"titleFontSize\": 15}}, \"data\": {\"name\": \"data-579934047bcbc379ba0b195368585316\"}, \"mark\": {\"type\": \"bar\"}, \"encoding\": {\"tooltip\": {\"field\": \"Coef\", \"type\": \"quantitative\"}, \"x\": {\"field\": \"Coef\", \"type\": \"quantitative\"}, \"y\": {\"field\": \"Feature_names\", \"sort\": \"-x\", \"type\": \"nominal\"}}, \"params\": [{\"name\": \"param_1\", \"select\": {\"type\": \"interval\", \"encodings\": [\"x\", \"y\"]}, \"bind\": \"scales\"}], \"$schema\": \"https://vega.github.io/schema/vega-lite/v5.20.1.json\", \"datasets\": {\"data-579934047bcbc379ba0b195368585316\": [{\"Feature_names\": \"#RO5 Violations\", \"Coef\": 0.3735277804060403}, {\"Feature_names\": \"Polar Surface Area\", \"Coef\": -0.9373660789745578}, {\"Feature_names\": \"HBA\", \"Coef\": 0.1654057324576582}, {\"Feature_names\": \"HBD\", \"Coef\": 0.275370381037448}, {\"Feature_names\": \"QED Weighted\", \"Coef\": -0.08193798160111046}, {\"Feature_names\": \"CX LogP\", \"Coef\": 0.1011514397635371}, {\"Feature_names\": \"CX LogD\", \"Coef\": -1.0558500392306795}, {\"Feature_names\": \"Heavy Atoms\", \"Coef\": -0.17388713338224362}]}}, {\"mode\": \"vega-lite\"});\n</script>\n```\n:::\n:::\n\n\n#RO5 Violations, CXLogP, HBA and HBD all have positive weights or coefficients, when the rest of the molecular features (CXLogD, heavy atoms, polar surface area and QED Weighted) all have the negative coefficients. This is likely the equivalent of using the `feature_importances_` in random forest I'm guessing. I've sorted the order of coefficients from highest to lowest in the chart.\n\nAnother way to get features names is from the pipeline as well but requires a step saving dataframe column names separately as an NumPy array first ([scikit-learn reference](https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline.get_feature_names_out)). The previous way seems to save a bit more time on coding as there's no need to do this, and also you can retrieve the coefficients of the features at the same time. \n\n::: {.cell execution_count=10}\n``` {.python .cell-code code-fold=\"true\"}\n## note: df.columns = column names of physicochemical properties\n# feat_names = pl.Series(\"feat_names\", df.columns[1:])\n# LR[:-1].get_feature_names_out(feat_names)\n```\n:::\n\n\n<br>\n\n###### **Predicted probabilities**\n\nOne way to get predicted probabilities of the samples in each outcome class (either 0 - not approved or 1 - approved) is via `predict_proba()` in *scikit-learn*.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ny_mp_pre_proba = LR.predict_proba(X_test)\nprint(y_mp_pre_proba)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.45825999 0.54174001]\n [0.15229678 0.84770322]\n [0.38040658 0.61959342]\n ...\n [0.29652    0.70348   ]\n [0.83812298 0.16187702]\n [0.45729476 0.54270524]]\n```\n:::\n:::\n\n\nThen we can convert the predicted probabilities into a polars dataframe, along with a statistics summary.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\npl.DataFrame(y_mp_pre_proba).describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (9, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>statistic</th><th>column_0</th><th>column_1</th></tr><tr><td>str</td><td>f64</td><td>f64</td></tr></thead><tbody><tr><td>&quot;count&quot;</td><td>1134.0</td><td>1134.0</td></tr><tr><td>&quot;null_count&quot;</td><td>0.0</td><td>0.0</td></tr><tr><td>&quot;mean&quot;</td><td>0.486442</td><td>0.513558</td></tr><tr><td>&quot;std&quot;</td><td>0.199652</td><td>0.199652</td></tr><tr><td>&quot;min&quot;</td><td>0.00459</td><td>0.044198</td></tr><tr><td>&quot;25%&quot;</td><td>0.341463</td><td>0.360326</td></tr><tr><td>&quot;50%&quot;</td><td>0.506803</td><td>0.493416</td></tr><tr><td>&quot;75%&quot;</td><td>0.639674</td><td>0.658537</td></tr><tr><td>&quot;max&quot;</td><td>0.955802</td><td>0.99541</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n<br>\n\n###### **Pickle LR pipeline**\n\nThis last part is really for saving the LR pipeline for the next post on evaluating the LR model. I've talked a bit more about the security aspect of pickling files in [this old post](https://jhylin.github.io/Data_in_life_blog/posts/19_ML2-3_Boosted_trees/1_adaboost_xgb.html#pickle-model) in case anyone's interested.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Pickle to save (serialise) the model in working directory (specify path if needed)\npickle.dump(LR, open(\"LR.pkl\", \"wb\")) # \"wb\" - write binary\n# Unpickle (de-serialise) the model\nLR2 = pickle.load(open(\"LR.pkl\", \"rb\")) # \"rb\" - read binary\n# Use the unpickled model object to make prediction\npred2 = LR2.predict(X_test)\n## Check unpickled model and original model are the same via Python's assertion method\n#assert np.sum(np.abs(pred2 - pred)) == 0\n## or alternatively use numpy's allclose()\nprint(np.allclose(pred, pred2)) # note: pred = LR.predict(X_test) from original LR pipeline\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\n```\n:::\n:::\n\n\n",
    "supporting": [
      "ML1-1-3_chembl_cpds_ml_model_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}