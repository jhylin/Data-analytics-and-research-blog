{
  "hash": "221133bcde8e07e30864da7c8013173a",
  "result": {
    "markdown": "---\ntitle: Tree models in ChEMBL data\nsubtitle: ML series 2.1 - decision tree - data pre-processing (part 2)\nauthor: Jennifer HY Lin\ndate: 2023-9-2\ndraft: true\ncategories:\n  - Machine learning projects\n  - Pandas\n  - ChEMBL database\nformat: html\nbibliography: references.bib\n---\n\n##### **Data source**\n\n**To explain source of dataframe**\n\nSince data preparation and cleaning was a well-known process that would take up a lot of time, I've decided to split this part into two posts to ensure the reading time for each post was reasonable.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import all libraries used\nimport pandas as pd\nimport math\nimport datamol as dm\n```\n:::\n\n\n<br>\n\n##### **Re-importing saved dataframe**\n\nRe-imported the partly pre-processed dtree_df from the earlier post.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndtree_df = pd.read_csv(\"ache_chembl.csv\")\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNoticed there was an extra index column, likely inherited from how the .csv file was saved, which was subsequently removed.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndtree_df = dtree_df.drop(\"Unnamed: 0\", axis = 1)\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe merged dataframe was found to have Ki with zero nM, which meant the function to convert Ki to pKi would not proceed (due to natural log of zero normally means undefined answer!). So a good practice to clean data like this was probably best to run a statistical summary such as the code below first, then look for minimum and maximum values and also others to see if there were anything to be tidied up first.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndtree_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Ki</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.400000e+02</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.544039e+05</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4.103437e+06</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.700000e-03</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.437500e+01</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.995000e+02</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.100000e+03</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.496300e+07</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom the above quick statistical summary and also the code below to find out the minimum Ki value, it confirmed that there were no zero Ki values recorded.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndtree_df[\"Ki\"].min()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n0.0017\n```\n:::\n:::\n\n\nNow we could convert the Ki values to pKi values, which were the negative logs of Ki in molar units (a [PubChem example](https://pubchem.ncbi.nlm.nih.gov/bioassay/213088) might help to explain it a little further). The key to understand pKi here was to treat pKi similarly to how we would normally understand pH for our acids and bases. The formula to convert Ki to pKi for nM units was:\n\n$$\n\\text{pKi} = 9 - log _{10}(Ki)\n$$\n\nSet up a small function to do the conversion.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef calc_pKi(Ki):\n    pKi_value = 9 - math.log10(Ki)\n    return pKi_value\n```\n:::\n\n\nApplying the calc_pKi function to convert all rows of the compound dataset for the \"Ki\" column.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Create a new column for pKi\n# Apply calc_pKi function to the data in Ki column\ndtree_df[\"pKi\"] = dtree_df.apply(lambda x: calc_pKi(x.Ki), axis = 1)\n```\n:::\n\n\nThe dataframe would now look like this, with a new pKi column ready for use. Now, one question regarding to Ki was whether it was a good idea to use Ki values like this from public database like ChEMBL. This paper [@Kalliokoski2013a] may provide further things to consider.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n      <td>9.982967</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHowever, for a decision tree model, a few more molecular descriptors were probably needed rather than only Ki or pKi and SMILES... One way to do this could be through computations based on canonical SMILES of compounds by using RDKit to add some molecular descriptors.\n\nBefore doing this, a compound sanitisation step would probably be the best before starting any calculations, as this might rule out some compounds with questionable chemical validities. This could also be done via RDKit or Datamol (a Python wrapper library built based on RDKit).\n\nI thought to convert the data types of the \"smiles\" and \"data_validity_comment\" columns to string first (in case of running into problems later).\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndtree_df = dtree_df.astype({\"smiles\": \"string\", \"data_validity_comment\": \"string\"})\ndtree_df.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nmolecule_chembl_id               object\nKi                              float64\nunits                            object\ndata_validity_comment    string[python]\nsmiles                   string[python]\npKi                             float64\ndtype: object\n```\n:::\n:::\n\n\nAlso, before jumping straight to compound sanitisation, I thought I should check out if there were any comments in the \"data_validity_comment\" column.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndtree_df[\"data_validity_comment\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n<StringArray>\n['Potential transcription error', <NA>, 'Outside typical range']\nLength: 3, dtype: string\n```\n:::\n:::\n\n\nInterestingly, there were 3 different types of data validity comments found, which were \"NaN\", \"Outside typical range\" and \"Potential transcirption error\". So, this meant compounds with comments would need to be addressed first.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Find out number of compounds with \"outside typical range\" as data validity comment\ndtree_df[dtree_df[\"data_validity_comment\"] == \"Outside typical range\"].shape\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n(58, 6)\n```\n:::\n:::\n\n\nThere were a total of 58 compounds with Ki outside typical range.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Find out number of compounds with \"potential transcription error\" as data validity comment\ndtree_df[dtree_df[\"data_validity_comment\"] == \"Potential transcription error\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n      <td>9.982967</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere were 1 compound with potential transcription errors for the Ki value.\n\nThis meant it would be best to remove these compounds with questionable Ki values, as they could be potential sources of errors for ML models later on. One of the ways I thought of doing was to fill the empty cells under \"data_validity_comment\" column first, so they would be easier to be filtered and kept for further use.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Fill \"NaN\" entries with an actual name e.g. zero\ndtree_df = dtree_df.fillna(\"none\")\ndtree_df.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n      <td>9.982967</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CHEMBL1128</td>\n      <td>200.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>6.698970</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CHEMBL102226</td>\n      <td>20000.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCCCCCCSC(=O)OCC[N+](C)(C)C.[Cl-]</td>\n      <td>4.698970</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>CHEMBL103873</td>\n      <td>2000.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCCCCSC(=O)OCC[N+](C)(C)C.[Cl-]</td>\n      <td>5.698970</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>CHEMBL640</td>\n      <td>1000.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CC)CCNC(=O)c1ccc(N)cc1</td>\n      <td>6.000000</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>CHEMBL75121</td>\n      <td>21.700</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>COc1cc2cc(-c3ccc(CN(C)Cc4ccccc4)cc3)c(=O)oc2cc1OC</td>\n      <td>7.663540</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFiltered out only the compounds with nil data validity comments.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n#dtree_df[\"data_validity_comment\"].unique()\ndtree_df = dtree_df[dtree_df[\"data_validity_comment\"] == \"none\"]\n```\n:::\n\n\nChecking the dtree_df dataframe again and also whether if only the compounds with \"none\" labelled for \"data_validity_comment\" column were kept (and other two types were removed).\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(dtree_df.shape)\ndtree_df[\"data_validity_comment\"].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 6)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n<StringArray>\n['none']\nLength: 1, dtype: string\n```\n:::\n:::\n\n\n<br>\n\n#### **Compound sanitisation**\n\nI've found the [pre-processing molecules tutorial](https://docs.datamol.io/stable/tutorials/Preprocessing.html) and its reference links provided by Datamol at the bottom of the webpage to be very informative. Each steps of fix_mol(), sanitize_mol() and standardize_mol() were explained to a certain degree in the link provided above. I guess the key was to select pre-processing options required to fit the purpose of the ML models being built later on, and more experiences in doing this would also help to improve the compound pre-processing step.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# _preprocess function to sanitise compounds - adapted from datamol.io\n\nsmiles_column = \"smiles\"\n\ndm.disable_rdkit_log()\n\ndef _preprocess(row):\n    # Convert each compound to a RDKit molecule in the smiles column\n    mol = dm.to_mol(row[smiles_column], ordered=True)\n    # Fix common errors in the molecules\n    mol = dm.fix_mol(mol)\n    # Sanitise the molecules \n    mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)\n    # Standardise the molecules\n    mol = dm.standardize_mol(\n        mol,\n        disconnect_metals=False,\n        normalize=True,\n        reionize=True,\n        # Decided to switch on \"uncharge\" to neutralise charges - the only change\n        uncharge=True,\n        stereo=True,\n    )\n\n    # Added a new column below for RDKit molecules\n    row[\"rdkit_mol\"] = dm.to_mol(mol)\n    row[\"standard_smiles\"] = dm.standardize_smiles(dm.to_smiles(mol))\n    row[\"selfies\"] = dm.to_selfies(mol)\n    row[\"inchi\"] = dm.to_inchi(mol)\n    row[\"inchikey\"] = dm.to_inchikey(mol)\n    return row\n```\n:::\n\n\nThen the compound sanitisation function was applied to the dtree_df.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndtree_san_df = dtree_df.apply(_preprocess, axis = 1)\ndtree_san_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n      <th>rdkit_mol</th>\n      <th>standard_smiles</th>\n      <th>selfies</th>\n      <th>inchi</th>\n      <th>inchikey</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12b1e69e0&gt;</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>[C][C][C][=C][C][C][C][=N][C][=C][C][Branch1][...</td>\n      <td>InChI=1S/C18H19ClN2/c1-2-10-5-11-7-12(6-10)17-...</td>\n      <td>QTPHSDHUHXUYFE-KIYNQFGBSA-N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12b1e67b0&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.BrH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>CAEPIUXAUPYIIJ-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12b1e6900&gt;</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>[N][C][=C][C][=Branch1][N][=N][C][=C][C][=C][C...</td>\n      <td>InChI=1S/C13H14N2/c14-13-9-5-1-3-7-11(9)15-12-...</td>\n      <td>YLJREFDVOIBQDA-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12b1e66d0&gt;</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>[C][C][N][Branch2][Branch1][Ring1][C][C][C][C]...</td>\n      <td>InChI=1S/C42H70N4O4/c1-7-45(35-37-25-17-19-27-...</td>\n      <td>VJXLWYGKZGTXAF-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CHEMBL1128</td>\n      <td>200.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>6.698970</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12b1e6660&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.ClH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>BXKDSDJJOVIHMX-UHFFFAOYSA-N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlease note if the dataset required for sanitisation is large, Datamol has suggested using their example code to add parallelisation as shown below.\n\n``` {{python}}\n# Code adapted from: https://docs.datamol.io/stable/tutorials/Preprocessing.html#references\ndata_clean = dm.parallelized(\n    _preprocess, \n    data.iterrows(), \n    arg_type=\"args\", \n    progress=True, \n    total=len(data)\n    )\ndata_clean = pd.DataFrame(data_clean)\n```\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndtree_san_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n(481, 11)\n```\n:::\n:::\n\n\nIn this case, I tried using the preprocessing function without adding the parallelisation, the whole sanitisation process wasn't very long (since I had a small dataset), and was done within a minute or so.\n\n<br>\n\n#### **Detect outliers**\n\nPlotting a histogram to see the distribution of pKi values first.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndtree_san_df.hist(column = \"pKi\")\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\narray([[<Axes: title={'center': 'pKi'}>]], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Data_prep_2_files/figure-html/cell-20-output-2.png){width=575 height=431}\n:::\n:::\n\n\nI read a bit about Dixon's Q test and realised that there were a few required assumptions prior to using this test, and the current dataset being used here (dtree_san_df) might not fit the requirements, which were:\n\n-   normally distributed data\n-   a small sample size e.g. between 3 and 10 (as originally stated in the paper published by R. B. Dean and W. J. Dixon (1951) Simplified Statistics for Small Numbers of Observations\". Anal. Chem., 1951, 23 (4), 636--638).\n\nSo I've decided that rather than showing Python code for Dixon's Q test myself, I'd attach a few examples from others instead, [Q test from Plotly](https://plotly.com/python/v3/outlier-test/) and also [Dixon's Q test for outlier identification -- a questionable practice](https://sebastianraschka.com/Articles/2014_dixon_test.html), since this dataset here wasn't quite normally distributed as shown from the histogram plotted above.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndtree_san_df.boxplot(column = \"pKi\")\n\n# the boxplot version below shows a blank background\n# rather than above version with horizontal grid lines\n#dtree_san_df.plot.box(column = \"pKi\")\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n<Axes: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Data_prep_2_files/figure-html/cell-21-output-2.png){width=566 height=411}\n:::\n:::\n\n\nSo I used Pandas' built-in boxplot in addition to the histogram to show the likely outliers within the pKi values. Clearly, the possible outliers for pKi values appeared to be above 10. I've then decided not to completely remove these outliers due to the dataset itself being not in a Gaussian distribution (which meant they might not be true outliers).\n\n<br>\n\n#### **Molecular descriptors**\n\nTo be continued.\n\n",
    "supporting": [
      "Data_prep_2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}