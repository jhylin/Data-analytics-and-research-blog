{
  "hash": "ca4d3b8840a8f6dfc2f9bbf3bc602cb3",
  "result": {
    "markdown": "---\ntitle: Decision tree\nsubtitle: ML series 2.1 - data pre-processing (part 2)\nauthor: Jennifer HY Lin\ndate: 2023-9-7\ndraft: true\ncategories:\n  - Machine learning projects\n  - Pandas\n  - ChEMBL database\nformat: html\nbibliography: references.bib\n---\n\n##### **Data source**\n\nThe data used in part 2 of data pre-processing was extracted from ChEMBL database by using ChEMBL webresource client in Python. The details of all the steps taken to reach the final .csv file could be seen in this earlier *post*. Since data preparation and cleaning was a well-known process that would take up a lot of time before doing anything significant on the data, I've splitted this process into two posts to ensure reasonable reading time for each.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import all libraries used\nimport pandas as pd\nimport math\nfrom rdkit.Chem import Descriptors\nimport datamol as dm\n# tqdm library used in datamol's batch descriptor code\nfrom tqdm import tqdm\n```\n:::\n\n\n<br>\n\n##### **Re-import saved data**\n\nRe-imported the partly pre-processed data from the earlier post.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndtree_df = pd.read_csv(\"ache_chembl.csv\")\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Unnamed: 0</th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNoticed there was an extra index column (named \"Unnamed: 0\"), likely inherited from how the .csv file was saved, dropping this column for now.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndtree_df = dtree_df.drop(\"Unnamed: 0\", axis = 1)\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Calculate pKi**\n\nThe distribution of Ki values were shown below via a simple statistical summary.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndtree_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Ki</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>5.400000e+02</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.544039e+05</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>4.103437e+06</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.700000e-03</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2.437500e+01</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1.995000e+02</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>3.100000e+03</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.496300e+07</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFrom the above quick statistical summary and also the code below to find the minimum Ki value, it confirmed that there were no zero Ki values recorded.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndtree_df[\"Ki\"].min()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n0.0017\n```\n:::\n:::\n\n\nNow we could convert the Ki values to pKi values, which were the negative logs of Ki in molar units (a [PubChem example](https://pubchem.ncbi.nlm.nih.gov/bioassay/213088) might help to explain it a little further). The key to understand pKi here was to treat pKi similarly to how we would normally understand pH for our acids and bases. The formula to convert Ki to pKi for nanomolar (nM) units was: \n\n$$\n\\text{pKi} = 9 - log _{10}(Ki)\n$$\n\nSet up a small function to do the conversion.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef calc_pKi(Ki):\n    pKi_value = 9 - math.log10(Ki)\n    return pKi_value\n```\n:::\n\n\nApplying the calc_pKi function to convert all rows of the compound dataset for the \"Ki\" column (please scroll to the very right to see it).\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Create a new column for pKi\n# Apply calc_pKi function to the data in Ki column\ndtree_df[\"pKi\"] = dtree_df.apply(lambda x: calc_pKi(x.Ki), axis = 1)\n```\n:::\n\n\nThe dataframe would now look like this, with a new pKi column.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n      <td>9.982967</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>NaN</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Plan other data pre-processing steps**\n\nHowever, for a decision tree model, a few more molecular descriptors were most likely needed rather than only Ki or pKi and SMILES. One way to do this could be through computations based on canonical SMILES of compounds by using RDKit to add some molecular descriptors.\n\nHowever, before doing this, a compound sanitisation step should be applied before starting any calculations to rule out compounds with questionable chemical validities. RDKit or Datamol (a Python wrapper library built based on RDKit) was also capable of doing this.\n\nI've added a quick step here to convert the data types of \"smiles\" and \"data_validity_comment\" columns to string (in case of running into problems later).\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndtree_df = dtree_df.astype({\"smiles\": \"string\", \"data_validity_comment\": \"string\"})\ndtree_df.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nmolecule_chembl_id        object\nKi                       float64\nunits                     object\ndata_validity_comment     string\nsmiles                    string\npKi                      float64\ndtype: object\n```\n:::\n:::\n\n\n<br>\n\n##### **Check data validity**\n\nAlso, before jumping straight to compound sanitisation, I remembered that I needed to check the \"data_validity_comment\" column.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndtree_df[\"data_validity_comment\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<StringArray>\n['Potential transcription error', <NA>, 'Outside typical range']\nLength: 3, dtype: string\n```\n:::\n:::\n\n\nThere were 3 different types of data validity comments found, which were \"NaN\", \"Outside typical range\" and \"Potential transcirption error\". So, this meant compounds with comments other than \"NaN\" would need to be addressed first.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Find out number of compounds with \"outside typical range\" as data validity comment\ndtree_df_err = dtree_df[dtree_df[\"data_validity_comment\"] == \"Outside typical range\"]\nprint(dtree_df_err.shape)\ndtree_df_err.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(58, 6)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>111</th>\n      <td>CHEMBL225198</td>\n      <td>0.0090</td>\n      <td>nM</td>\n      <td>Outside typical range</td>\n      <td>O=C(CCc1c[nH]c2ccccc12)NCCCCCCCNc1c2c(nc3cc(Cl...</td>\n      <td>11.045757</td>\n    </tr>\n    <tr>\n      <th>114</th>\n      <td>CHEMBL225021</td>\n      <td>0.0017</td>\n      <td>nM</td>\n      <td>Outside typical range</td>\n      <td>O=C(CCCc1c[nH]c2ccccc12)NCCCCCNc1c2c(nc3cc(Cl)...</td>\n      <td>11.769551</td>\n    </tr>\n    <tr>\n      <th>118</th>\n      <td>CHEMBL402976</td>\n      <td>313700.0000</td>\n      <td>nM</td>\n      <td>Outside typical range</td>\n      <td>CN(C)CCOC(=O)Nc1ccncc1</td>\n      <td>3.503485</td>\n    </tr>\n    <tr>\n      <th>119</th>\n      <td>CHEMBL537454</td>\n      <td>140200.0000</td>\n      <td>nM</td>\n      <td>Outside typical range</td>\n      <td>CN(C)CCOC(=O)Nc1cc(Cl)nc(Cl)c1.Cl</td>\n      <td>3.853252</td>\n    </tr>\n    <tr>\n      <th>120</th>\n      <td>CHEMBL3216883</td>\n      <td>316400.0000</td>\n      <td>nM</td>\n      <td>Outside typical range</td>\n      <td>CN(C)CCOC(=O)Nc1ccncc1Br.Cl.Cl</td>\n      <td>3.499764</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere were a total of 58 compounds with Ki outside typical range.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Find out number of compounds with \"potential transcription error\" as data validity comment\ndtree_df[dtree_df[\"data_validity_comment\"] == \"Potential transcription error\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n      <td>9.982967</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere was one compound with potential transcription errors for Ki value.\n\nThese compounds with questionable Ki values were removed, as they could be potential sources of errors for ML models later on (error trickling effect). One of the ways I thought of doing was to fill the empty cells within the \"data_validity_comment\" column first, so it would be easier to filter them out.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Fill \"NaN\" entries with an actual name e.g. zero\ndtree_df = dtree_df.fillna(\"none\")\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n      <td>9.982967</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFiltered out only the compounds with nil data validity comments.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n#dtree_df[\"data_validity_comment\"].unique()\ndtree_df = dtree_df[dtree_df[\"data_validity_comment\"] == \"none\"]\n```\n:::\n\n\nChecking the dtree_df dataframe again and also whether if only the compounds with \"none\" labelled for \"data_validity_comment\" column were kept (and other two types were removed).\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nprint(dtree_df.shape)\ndtree_df[\"data_validity_comment\"].unique()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 6)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n<StringArray>\n['none']\nLength: 1, dtype: string\n```\n:::\n:::\n\n\n<br>\n\n#### **Sanitise compounds**\n\nI've found the [pre-processing molecules tutorial](https://docs.datamol.io/stable/tutorials/Preprocessing.html) and its reference links provided by Datamol to be very informative. Each steps of fix_mol(), sanitize_mol() and standardize_mol() were explained in the link provided above. I guess the key was to select pre-processing options required to fit the purpose of the ML models being built later on, and more experiences in doing so would hopefully help with improving the compound pre-processing step.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# _preprocess function to sanitise compounds - adapted from datamol.io\n\nsmiles_column = \"smiles\"\n\ndm.disable_rdkit_log()\n\ndef _preprocess(row):\n    # Convert each compound to a RDKit molecule in the smiles column\n    mol = dm.to_mol(row[smiles_column], ordered=True)\n    # Fix common errors in the molecules\n    mol = dm.fix_mol(mol)\n    # Sanitise the molecules \n    mol = dm.sanitize_mol(mol, sanifix=True, charge_neutral=False)\n    # Standardise the molecules\n    mol = dm.standardize_mol(\n        mol,\n        # Switch on to disconnect metal ions\n        disconnect_metals=True,\n        normalize=True,\n        reionize=True,\n        # Switch on \"uncharge\" to neutralise charges\n        uncharge=True,\n        # Taking care of stereochemistries of compounds\n        stereo=True,\n    )\n\n    # Added a new column below for RDKit molecules\n    row[\"rdkit_mol\"] = dm.to_mol(mol)\n    row[\"standard_smiles\"] = dm.standardize_smiles(dm.to_smiles(mol))\n    row[\"selfies\"] = dm.to_selfies(mol)\n    row[\"inchi\"] = dm.to_inchi(mol)\n    row[\"inchikey\"] = dm.to_inchikey(mol)\n    return row\n```\n:::\n\n\nThen the compound sanitisation function was applied to the dtree_df.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndtree_san_df = dtree_df.apply(_preprocess, axis = 1)\ndtree_san_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n      <th>rdkit_mol</th>\n      <th>standard_smiles</th>\n      <th>selfies</th>\n      <th>inchi</th>\n      <th>inchikey</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf4c0&gt;</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>[C][C][C][=C][C][C][C][=N][C][=C][C][Branch1][...</td>\n      <td>InChI=1S/C18H19ClN2/c1-2-10-5-11-7-12(6-10)17-...</td>\n      <td>QTPHSDHUHXUYFE-KIYNQFGBSA-N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf840&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.BrH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>CAEPIUXAUPYIIJ-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddeff0&gt;</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>[N][C][=C][C][=Branch1][N][=N][C][=C][C][=C][C...</td>\n      <td>InChI=1S/C13H14N2/c14-13-9-5-1-3-7-11(9)15-12-...</td>\n      <td>YLJREFDVOIBQDA-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf060&gt;</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>[C][C][N][Branch2][Branch1][Ring1][C][C][C][C]...</td>\n      <td>InChI=1S/C42H70N4O4/c1-7-45(35-37-25-17-19-27-...</td>\n      <td>VJXLWYGKZGTXAF-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CHEMBL1128</td>\n      <td>200.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>6.698970</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf760&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.ClH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>BXKDSDJJOVIHMX-UHFFFAOYSA-N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlease note if the dataset required for sanitisation is large, Datamol has suggested using their example code to add parallelisation as shown below.\n\n``` {{python}}\n# Code adapted from: https://docs.datamol.io/stable/tutorials/Preprocessing.html#references\ndata_clean = dm.parallelized(\n    _preprocess, \n    data.iterrows(), \n    arg_type=\"args\", \n    progress=True, \n    total=len(data)\n    )\ndata_clean = pd.DataFrame(data_clean)\n```\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndtree_san_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n(481, 11)\n```\n:::\n:::\n\n\nIn this case, I tried using the preprocessing function without adding the parallelisation, the whole sanitisation process wasn't very long (since I had a small dataset), and was done within a minute or so.\n\n<br>\n\n#### **Detect outliers**\n\nPlotting a histogram to see the distribution of pKi values first.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndtree_san_df.hist(column = \"pKi\")\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([[<AxesSubplot: title={'center': 'pKi'}>]], dtype=object)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Data_prep_2_files/figure-html/cell-20-output-2.png){width=575 height=431}\n:::\n:::\n\n\nI read a bit about Dixon's Q test and realised that there were a few required assumptions prior to using this test, and the current dataset used here (dtree_san_df) might not fit the requirements, which were:\n\n-   normally distributed data\n-   a small sample size e.g. between 3 and 10, which was originally stated in this paper [@dean1951].\n\nSo I've decided that rather than showing Python code for Dixon's Q test myself, I'd attach a few examples from others instead, [Q test from Plotly](https://plotly.com/python/v3/outlier-test/) and also [Dixon's Q test for outlier identification -- a questionable practice](https://sebastianraschka.com/Articles/2014_dixon_test.html), since this dataset here wasn't quite normally distributed as shown from the histogram plotted above.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndtree_san_df.boxplot(column = \"pKi\")\n\n# the boxplot version below shows a blank background\n# rather than above version with horizontal grid lines\n#dtree_san_df.plot.box(column = \"pKi\")\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<AxesSubplot: >\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Data_prep_2_files/figure-html/cell-21-output-2.png){width=566 height=411}\n:::\n:::\n\n\nI also used Pandas' built-in boxplot in addition to the histogram to show the possible outliers within the pKi values. Clearly, the outliers for pKi values appeared to be above 10. I've also decided not to completely remove these outliers due to the dataset itself being not in a Gaussian distribution (which meant they might not be true outliers).\n\n<br>\n\n#### **Calculate molecular descriptors**\n\nI've explored a few different ways to compute molecular descriptors, essentially RDKit was used as the main library to do this. A [blog post](https://drzinph.com/rdkit_2d-descriptors-in-python-part-4/) I've come across on calculating RDKit 2D molecular descriptors has explained it well, it gave details about how to bundle the functions together in a class (the idea of building a small library yourself to use in projects, which were quite handy). I've also read into RDKit's documentations and also the ones from Datamol. Rather than re-inventing the wheels as there were already several really well-explained blog posts about this, I'd probably opt for Datamol since it was relatively new to me.\n\nWith the lastest format of the dtree_san_df, it already included a RDKit molecule column (named \"rdkit_mol\"), so this meant I could go ahead with the calculations. Without jumping into Datamol directly, I just wanted to try out RDKit's code first. There was also a useful [descriptor calculation tutorial](https://greglandrum.github.io/rdkit-blog/posts/2022-12-23-descriptor-tutorial.html) written by Greg Landrum about this.\n\n###### **RDKit code**\n\nThis was just one of the code examples in RDKit as there could be more variations of this depending on needs.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Saving the RDKit mol column as an object\nmols_rdkit = dtree_san_df[\"rdkit_mol\"]\nmols_rdkit\n\n# Run descriptor calculations on mols object\n# and save as a new list\nmol_ls = [Descriptors.CalcMolDescriptors(mol) for mol in mols_rdkit]\n\n# Convert the list into a dataframe\ndf_rdkit_2d = pd.DataFrame(mol_ls)\nprint(df_rdkit_2d.shape)\ndf_rdkit_2d.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 209)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>ExactMolWt</th>\n      <th>NumValenceElectrons</th>\n      <th>NumRadicalElectrons</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>6.509708</td>\n      <td>6.509708</td>\n      <td>0.547480</td>\n      <td>0.547480</td>\n      <td>0.763869</td>\n      <td>298.817</td>\n      <td>279.665</td>\n      <td>298.123676</td>\n      <td>108</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.662462</td>\n      <td>246.148</td>\n      <td>230.020</td>\n      <td>245.041526</td>\n      <td>74</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>198.115698</td>\n      <td>76</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>12.614796</td>\n      <td>12.614796</td>\n      <td>0.269546</td>\n      <td>0.269546</td>\n      <td>0.079730</td>\n      <td>695.046</td>\n      <td>624.486</td>\n      <td>694.539707</td>\n      <td>282</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.608112</td>\n      <td>201.697</td>\n      <td>185.569</td>\n      <td>201.092042</td>\n      <td>74</td>\n      <td>0</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 209 columns</p>\n</div>\n```\n:::\n:::\n\n\nIn total, it generated 209 descriptors. \n\n<br>\n\n###### **Datamol code**\n\nThen I tested Datamol's code on this as shown below.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Convert RDKit molecule column into list\nmols_dm = dtree_san_df[\"rdkit_mol\"]\n\n# Datamol's batch descriptor code for a list of compounds\ndtree_san_df_dm = dm.descriptors.batch_compute_many_descriptors(mols_dm)\nprint(dtree_san_df_dm.shape)\ndtree_san_df_dm.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 22)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>n_rotatable_bonds</th>\n      <th>n_radical_electrons</th>\n      <th>tpsa</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>1</td>\n      <td>0</td>\n      <td>38.91</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>2</td>\n      <td>0</td>\n      <td>20.23</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>38.91</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>29</td>\n      <td>0</td>\n      <td>65.56</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>2</td>\n      <td>0</td>\n      <td>20.23</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere were a total of 22 molecular descriptors generated, which seemed more like what I might use for the decision tree model. The types of descriptors were shown below.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndtree_san_df_dm.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\nIndex(['mw', 'fsp3', 'n_lipinski_hba', 'n_lipinski_hbd', 'n_rings',\n       'n_hetero_atoms', 'n_heavy_atoms', 'n_rotatable_bonds',\n       'n_radical_electrons', 'tpsa', 'qed', 'clogp', 'sas',\n       'n_aliphatic_carbocycles', 'n_aliphatic_heterocyles',\n       'n_aliphatic_rings', 'n_aromatic_carbocycles', 'n_aromatic_heterocyles',\n       'n_aromatic_rings', 'n_saturated_carbocycles',\n       'n_saturated_heterocyles', 'n_saturated_rings'],\n      dtype='object')\n```\n:::\n:::\n\n\n<br>\n\n##### **Combine dataframes**\n\nThe trickier part for this second-half of data pre-processing actually lied here -\nmerging/joining/concatenating dataframes of the pre-processed dataframe (dtree_san_df) and Datamol's descriptor code (dtree_san_df_dm). \n\nInitially, I tried using all of Pandas' code of merge/join/concat dataframes. They all failed to create the correct final combined dataframe since there were too many rows, with one run actually created 540 rows (maximum should be 481 rows). One of the possible reasons for this could be that some of the descriptors had zeros generated as results for some of the compounds, and when combining using Pandas code like the ones mentioned here, they might cause unexpected results (as suggested by Pandas, they were not exactly equivalent to SQL joins). So I looked into different ways, and while there were no other common columns for both dataframes, the index column seemed to be the only one that correlated both.\n\nI also found out after going back to the previous steps that when I applied the compound pre-processing function from Datamol, the index of the resultant dataframe was changed to start from 1 (rather than zero). Because of this, I tried re-setting the index of dtree_san_df first, then dropped the index column, followed by re-setting the index again to ensure it started at zero, and this worked. So now the dtree_san_df would have exactly the same index as the one for dtree_san_df_dm.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# 1st index re-set\ndtree_san_df = dtree_san_df.reset_index()\n# Drop the index column\ndtree_san_df = dtree_san_df.drop([\"index\"], axis = 1)\ndtree_san_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n      <th>rdkit_mol</th>\n      <th>standard_smiles</th>\n      <th>selfies</th>\n      <th>inchi</th>\n      <th>inchikey</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf4c0&gt;</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>[C][C][C][=C][C][C][C][=N][C][=C][C][Branch1][...</td>\n      <td>InChI=1S/C18H19ClN2/c1-2-10-5-11-7-12(6-10)17-...</td>\n      <td>QTPHSDHUHXUYFE-KIYNQFGBSA-N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf840&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.BrH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>CAEPIUXAUPYIIJ-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddeff0&gt;</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>[N][C][=C][C][=Branch1][N][=N][C][=C][C][=C][C...</td>\n      <td>InChI=1S/C13H14N2/c14-13-9-5-1-3-7-11(9)15-12-...</td>\n      <td>YLJREFDVOIBQDA-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf060&gt;</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>[C][C][N][Branch2][Branch1][Ring1][C][C][C][C]...</td>\n      <td>InChI=1S/C42H70N4O4/c1-7-45(35-37-25-17-19-27-...</td>\n      <td>VJXLWYGKZGTXAF-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>200.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>6.698970</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf760&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.ClH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>BXKDSDJJOVIHMX-UHFFFAOYSA-N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# 2nd index re-set\ndtree_san_df = dtree_san_df.reset_index()\nprint(dtree_san_df.shape)\ndtree_san_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 12)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n      <th>pKi</th>\n      <th>rdkit_mol</th>\n      <th>standard_smiles</th>\n      <th>selfies</th>\n      <th>inchi</th>\n      <th>inchikey</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>10.585027</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf4c0&gt;</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n      <td>[C][C][C][=C][C][C][C][=N][C][=C][C][Branch1][...</td>\n      <td>InChI=1S/C18H19ClN2/c1-2-10-5-11-7-12(6-10)17-...</td>\n      <td>QTPHSDHUHXUYFE-KIYNQFGBSA-N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>8.787812</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf840&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.BrH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>CAEPIUXAUPYIIJ-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>CHEMBL95</td>\n      <td>151.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>6.821023</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddeff0&gt;</td>\n      <td>Nc1c2c(nc3ccccc13)CCCC2</td>\n      <td>[N][C][=C][C][=Branch1][N][=N][C][=C][C][=C][C...</td>\n      <td>InChI=1S/C13H14N2/c14-13-9-5-1-3-7-11(9)15-12-...</td>\n      <td>YLJREFDVOIBQDA-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>CHEMBL173309</td>\n      <td>12.200</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>7.913640</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf060&gt;</td>\n      <td>CCN(CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)CCCCCN(CC)C...</td>\n      <td>[C][C][N][Branch2][Branch1][Ring1][C][C][C][C]...</td>\n      <td>InChI=1S/C42H70N4O4/c1-7-45(35-37-25-17-19-27-...</td>\n      <td>VJXLWYGKZGTXAF-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>CHEMBL1128</td>\n      <td>200.000</td>\n      <td>nM</td>\n      <td>none</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>6.698970</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x120ddf760&gt;</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Cl-]</td>\n      <td>[C][C][N+1][Branch1][C][C][Branch1][C][C][C][=...</td>\n      <td>InChI=1S/C10H15NO.ClH/c1-4-11(2,3)9-6-5-7-10(1...</td>\n      <td>BXKDSDJJOVIHMX-UHFFFAOYSA-N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAlso re-setting the index of the dtree_san_df_dm.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndtree_san_df_dm = dtree_san_df_dm.reset_index()\nprint(dtree_san_df_dm.shape)\ndtree_san_df_dm\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 23)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>n_rotatable_bonds</th>\n      <th>n_radical_electrons</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>1</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>29</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>476</th>\n      <td>476</td>\n      <td>377.231456</td>\n      <td>0.600000</td>\n      <td>7</td>\n      <td>3</td>\n      <td>2</td>\n      <td>7</td>\n      <td>27</td>\n      <td>6</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2.079621</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>477</th>\n      <td>477</td>\n      <td>391.247107</td>\n      <td>0.619048</td>\n      <td>7</td>\n      <td>3</td>\n      <td>2</td>\n      <td>7</td>\n      <td>28</td>\n      <td>6</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2.651646</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>478</th>\n      <td>478</td>\n      <td>311.152144</td>\n      <td>0.315789</td>\n      <td>4</td>\n      <td>1</td>\n      <td>3</td>\n      <td>4</td>\n      <td>23</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2.423278</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>479</th>\n      <td>479</td>\n      <td>368.096076</td>\n      <td>0.923077</td>\n      <td>4</td>\n      <td>0</td>\n      <td>2</td>\n      <td>5</td>\n      <td>18</td>\n      <td>3</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4.476639</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>480</th>\n      <td>480</td>\n      <td>246.136828</td>\n      <td>0.500000</td>\n      <td>4</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>18</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>3.223652</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n<p>481 rows × 23 columns</p>\n</div>\n```\n:::\n:::\n\n\nMerged both dataframes of dtree_san_df and dtree_san_df_dm based on both of their indices.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# merge dtree_san_df & dtree_san_df_dm\ndtree_f_df = pd.merge(\n    dtree_san_df[[\"index\", \"molecule_chembl_id\", \"pKi\"]],\n    dtree_san_df_dm,\n    left_index=True,\n    right_index=True\n)\n```\n:::\n\n\nCheck final dataframe to make sure there were 481 rows and increased columns (combined numbers of columns from both dataframes). So this finally seemed to work.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nprint(dtree_f_df.shape)\ndtree_f_df.head(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 26)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>index_x</th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>index_y</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>0</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>1</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>2</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>3</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>CHEMBL102226</td>\n      <td>4.698970</td>\n      <td>5</td>\n      <td>297.152928</td>\n      <td>0.923077</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>...</td>\n      <td>2.965170</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>CHEMBL103873</td>\n      <td>5.698970</td>\n      <td>6</td>\n      <td>269.121628</td>\n      <td>0.909091</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>...</td>\n      <td>3.097106</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>CHEMBL640</td>\n      <td>6.000000</td>\n      <td>7</td>\n      <td>235.168462</td>\n      <td>0.461538</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>...</td>\n      <td>1.791687</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>CHEMBL75121</td>\n      <td>7.663540</td>\n      <td>8</td>\n      <td>415.178358</td>\n      <td>0.192308</td>\n      <td>5</td>\n      <td>0</td>\n      <td>4</td>\n      <td>5</td>\n      <td>...</td>\n      <td>2.117241</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>CHEMBL502</td>\n      <td>7.688246</td>\n      <td>9</td>\n      <td>379.214744</td>\n      <td>0.458333</td>\n      <td>4</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>...</td>\n      <td>2.677222</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 26 columns</p>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "Data_prep_2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}