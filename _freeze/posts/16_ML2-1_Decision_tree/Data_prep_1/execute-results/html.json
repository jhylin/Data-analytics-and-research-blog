{
  "hash": "a54883c3801474e97d99f3d0c6012b6d",
  "result": {
    "markdown": "---\ntitle: Decision tree\nsubtitle: Series 2.1 - data collection and preprocessing\nauthor: Jennifer HY Lin\ndate: 2023-9-19\ndraft: false\ncategories:\n  - Machine learning projects\n  - Tree models\n  - Data preprocessing\n  - Pandas\n  - ChEMBL database\nformat: html\nbibliography: references.bib\n---\n\n##### **Series overview**\n\n* Post 1 (this post) - data collection from ChEMBL database using web resource client in Python, with initial data preprocessing\n\n* Post 2 (link) - more data preprocessing and transformation to reach the final dataset prior to model building\n\n* Post 3 (link) - estimating experimental errors and building decision tree model using *scikit-learn*\n\n<br>\n\n##### **Introduction**\n\nI've now come to a stage to do some more machine learning (ML) work after reading a few peer-reviewed papers about ML and drug discovery. It seemed that traditional ML methods were still indispensible performance-wise, and when used in combination with deep learning neural networks, they tend to increase prediction accuracy more. I also haven't ventured into the practicality and usefulness of large language models in drug discovery yet, but I'm aware work in this area has been started. However, comments from experienced seniors did mention that they are still very much novel and therefore may not be as useful yet. Although by the speed of how things evolve in the so-called \"AI\" field, this possibly may change very soon. Also from what I can imagine, molecular representations in texts or strings are not quite the same as natural human language texts, since there are a lot of other chemistry-specific features to consider, e.g. chiralities, aromaticities and so on. Because of this, I'm sticking with learning to walk first by trying to cover conventional ML methods in a more thorough way, before trying to run in the deep learning zone.\n\nSo this leads to this series of posts (3 in total) about decision tree. Previously, I've only lightly touched on a commonly used classifier algorithm, logistic regression, as the first series in the ML realm. Reflecting back, I think I could've done a more thorough job during the data preparation stage. So this would be attempted this time. The data preparation used here was carried out with strong reference to the materials and methods section in this paper [@vantilborg2022], which was one of the papers I've read. There are probably other useful methods out there, but this paper made sense to me, so I've adopted a few of their ways of doing things during data preprocessing.\n\n<br>\n\n##### **Data retrieval**\n\nThis time I decided to try something new which was to use the ChEMBL web resource client to collect data (i.e. not by direct file downloads from ChEMBL website, although other useful way could be through SQL queries, which is also on my list to try later). I found this great online resource about fetching data this way from the TeachOpenCADD talktorial on [compound data acquisition](https://projects.volkamerlab.org/teachopencadd/talktorials/T001_query_chembl.html). The data retrieval workflow used below was mainly adapted from this talktorial with a few changes to suit the selected dataset and ML model.\n\nThe web resource client was supported by the ChEMBL group and was based on a Django QuerySet interface. Their [GitHub repository](https://github.com/chembl/chembl_webresource_client) might explain a bit more about it, particularly the Jupyter notebook link provided in the repository would help a lot regarding how to write code to search for specific data.\n\nTo do this, a few libraries needed to be loaded first.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import libraries\n# Fetch data through ChEMBL web resource client\nfrom chembl_webresource_client.new_client import new_client\n\n# Dataframe library\nimport pandas as pd\n\n# Progress bar\nfrom tqdm import tqdm\n```\n:::\n\n\nTo see what types of data were provided by ChEMBL web resource client, run the following code and refer to ChEMBL documentations to find out what data were embedded inside different data categories. Sometimes, it might not be that straight forward and some digging would be required (I went back to this step below to find the \"[data_validity_comment](http://chembl.blogspot.com/2020/10/data-checks.html)\" when I was trying to do some compound sanitisations actually).\n\n::: callout-note\nThe link provided above also talked about other useful techniques for data checks in the ChEMBL database - a very important step to do during data preprocessing, which was also something I was trying to cover and achieve as much as possible in this post.\n:::\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\navailable_resources = [resource for resource in dir(new_client) if not resource.startswith('_')]\nprint(available_resources)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['activity', 'activity_supplementary_data_by_activity', 'assay', 'assay_class', 'atc_class', 'binding_site', 'biotherapeutic', 'cell_line', 'chembl_id_lookup', 'compound_record', 'compound_structural_alert', 'description', 'document', 'document_similarity', 'drug', 'drug_indication', 'drug_warning', 'go_slim', 'image', 'mechanism', 'metabolism', 'molecule', 'molecule_form', 'official', 'organism', 'protein_classification', 'similarity', 'source', 'substructure', 'target', 'target_component', 'target_relation', 'tissue', 'xref_source']\n```\n:::\n:::\n\n\nResource objects were created to enable API access as suggested by the talktorial.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# for targets (proteins)\ntargets_api = new_client.target\n\n# for bioactivities\nbioact_api = new_client.activity\n\n# for assays\nassay_api = new_client.assay\n\n# for compounds\ncpd_api = new_client.molecule\n```\n:::\n\n\nChecked object type for one of these API objects (e.g. bioactivity API object).\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntype(bioact_api)\n```\n\n::: {.cell-output .cell-output-display execution_count=292}\n```\nchembl_webresource_client.query_set.QuerySet\n```\n:::\n:::\n\n\n<br>\n\n##### **Fetching target data**\n\nA protein target e.g. acetylcholinesterase was randomly chosen by using [UniProt](https://www.uniprot.org/) to look up the protein UniProt ID.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Specify Uniprot ID for acetylcholinesterase\nuniprot_id = \"P22303\"\n\n# Get info from ChEMBL about this protein target, \n# with selected features only\ntargets = targets_api.get(target_components__accession = uniprot_id).only(\n    \"target_chembl_id\",\n    \"organism\", \n    \"pref_name\", \n    \"target_type\"\n)\n```\n:::\n\n\nThe query results were stored in a \"targets\" object, which was a QuerySet with lazy data evaluation only, meaning it would only react when there was a request for the data. Therefore, to see the results, the \"targets\" object was then read through Pandas DataFrame.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Read \"targets\" with Pandas\ntargets = pd.DataFrame.from_records(targets)\ntargets\n```\n\n::: {.cell-output .cell-output-display execution_count=294}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>organism</th>\n      <th>pref_name</th>\n      <th>target_chembl_id</th>\n      <th>target_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Homo sapiens</td>\n      <td>Acetylcholinesterase</td>\n      <td>CHEMBL220</td>\n      <td>SINGLE PROTEIN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Homo sapiens</td>\n      <td>Acetylcholinesterase</td>\n      <td>CHEMBL220</td>\n      <td>SINGLE PROTEIN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Homo sapiens</td>\n      <td>Cholinesterases; ACHE &amp; BCHE</td>\n      <td>CHEMBL2095233</td>\n      <td>SELECTIVITY GROUP</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSelected the first protein target from this dataframe.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Save the first protein in the dataframe\nselect_target = targets.iloc[0]\nselect_target\n```\n\n::: {.cell-output .cell-output-display execution_count=295}\n```\norganism                    Homo sapiens\npref_name           Acetylcholinesterase\ntarget_chembl_id               CHEMBL220\ntarget_type               SINGLE PROTEIN\nName: 0, dtype: object\n```\n:::\n:::\n\n\nThen saved the selected ChEMBL ID for the first protein (to be used later).\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nchembl_id = select_target.target_chembl_id\n# Check it's saved\nprint(chembl_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCHEMBL220\n```\n:::\n:::\n\n\n<br>\n\n##### **Fetching bioactivity data**\n\nObtaining bioactivity data for the selected target.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nbioact = bioact_api.filter(\n    # Use the previously saved target ChEMBL ID\n    target_chembl_id = chembl_id, \n    # Selecting for Ki\n    standard_type = \"Ki\",\n    # Requesting exact measurements\n    relation = \"=\",\n    # Binding data as \"B\"\n    assay_type = \"B\",\n).only(\n    \"activity_id\",\n    \"data_validity_comment\"\n    \"assay_chembl_id\",\n    \"assay_description\",\n    \"assay_type\",\n    \"molecule_chembl_id\",\n    \"standard_units\",\n    \"standard_type\",\n    \"relation\",\n    \"standard_value\",\n    \"target_chembl_id\",\n    \"target_organism\"\n)\n\n# Check the length and type of bioactivities object\nprint(len(bioact), type(bioact))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n706 <class 'chembl_webresource_client.query_set.QuerySet'>\n```\n:::\n:::\n\n\nTo have a quick look at the data being held inside each entry of the bioactivity dataset, e.g. for first entry.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(len(bioact[0]), type(bioact[0]))\nbioact[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n15 <class 'dict'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=298}\n```\n{'activity_id': 111024,\n 'assay_chembl_id': 'CHEMBL641011',\n 'assay_description': 'Inhibition constant determined against Acetylcholinesterase (AChE) receptor.',\n 'assay_type': 'B',\n 'data_validity_comment': 'Potential transcription error',\n 'molecule_chembl_id': 'CHEMBL11805',\n 'relation': '=',\n 'standard_type': 'Ki',\n 'standard_units': 'nM',\n 'standard_value': '0.104',\n 'target_chembl_id': 'CHEMBL220',\n 'target_organism': 'Homo sapiens',\n 'type': 'Ki',\n 'units': 'nM',\n 'value': '0.104'}\n```\n:::\n:::\n\n\nThe next step might take a few minutes - downloading the QuerySet as a Pandas DataFrame.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nbioact_df = pd.DataFrame.from_dict(bioact)\n\nbioact_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=299}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>standard_type</th>\n      <th>standard_units</th>\n      <th>standard_value</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n      <th>type</th>\n      <th>units</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>111024</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>Potential transcription error</td>\n      <td>CHEMBL11805</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.104</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.104</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>118575</td>\n      <td>CHEMBL641012</td>\n      <td>Inhibitory activity against human AChE</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL208599</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.026</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.026</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>125075</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL60745</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>1.63</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>1.63</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nChecked total rows and columns in the bioactivities dataframe.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=300}\n```\n(706, 15)\n```\n:::\n:::\n\n\n<br>\n\n###### **Preprocess bioactivity data**\n\nWhen I reached the second half of data preprocessing, an alarm bell went off regarding using half maximal inhibitory concentration (IC50) values in ChEMBL. I remembered reading recent blog posts by Greg Landrum about using [IC50](https://greglandrum.github.io/rdkit-blog/posts/2023-06-12-overlapping-ic50-assays1.html) and inhibition constant ([Ki](https://greglandrum.github.io/rdkit-blog/posts/2023-06-17-overlapping-Ki-assays1.html)) values from ChEMBL. A useful open-access paper [@Kalliokoski2013a] from 2013 also looked into this issue about using mixed IC50 data in ChEMBL, and provided a thorough overview about how to deal with situations like this. There was also another paper [@Kramer2012] on mixed Ki data from the same author group in 2012 that touched on similar issues.\n\nTo summarise both the paper about IC50 and blog posts mentioned above:\n\n-   it would be the best to check the details of assays used to test the compounds to ensure they were aligned and not extremely heterogeneous, since IC50 values were very assay-specific, and knowing that these values were extracted from different papers from different labs all over the world, mixing them without knowing was definitely not a good idea\n\n-   the slightly better news was that it was more likely okay to combine Ki values for the same protein target from ChEMBL as they were found to be adding less noise to the data (however ideally similar data caution should also apply)\n\n-   it was also possible to mix Ki values with IC50 values, but the data would need to be corrected via using a conversion factor of 2.0 to convert Ki values to IC50 values (note: I also wondered if this needed to be re-looked again since this paper was published 10 years ago...)\n\nBecause of this, I decided to stick with Ki values only for now before adding more complexities as I wasn't entirely confident about mixing IC50 values with Ki values yet. Firstly, I checked for all types of units being used in bioact_df. There were numerous different units and formats, which meant they would need to be converted to nanomolar (nM) units first.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nbioact_df[\"units\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=301}\n```\narray(['nM', 'M', 'uM', None, 'pM', \"10'-9M\", \"10'-3M\", \"10'-6M\",\n       \"10'-10M\", '/min/M', \"10'5/M/min\", \"10'2/M/min\", \"10'3/M/min\",\n       \"10'8/M/min\", \"10'7/M/min\", 'microM/L', 'umol/L', 'mM',\n       \"10'4/M/min\", \"10'6/M/min\", 'mM/min', '10^8M'], dtype=object)\n```\n:::\n:::\n\n\nChecking again that I've fetched Ki values only.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nbioact_df[\"standard_type\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=302}\n```\narray(['Ki'], dtype=object)\n```\n:::\n:::\n\n\nIt looked like there were duplicates of columns on units and values, so the \"units\" and \"value\" columns were removed and \"standard_units\" and \"standard_value\" columns were kept instead. Also, \"type\" column was dropped as there were already a \"standard_type\" column.\n\n::: callout-note\nDifferences between \"type\" and \"standard_type\" columns were mentioned by this ChEMBL [blog post](https://chembl.blogspot.com/2013/02/latest-activities-on-activities-table.html).\n:::\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nbioact_df.drop([\"units\", \"value\", \"type\"], axis = 1, inplace = True)\n# Re-check df\nbioact_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=303}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>standard_type</th>\n      <th>standard_units</th>\n      <th>standard_value</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>111024</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>Potential transcription error</td>\n      <td>CHEMBL11805</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.104</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>118575</td>\n      <td>CHEMBL641012</td>\n      <td>Inhibitory activity against human AChE</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL208599</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.026</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>125075</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL60745</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>1.63</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nbioact_df.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=304}\n```\nactivity_id               int64\nassay_chembl_id          object\nassay_description        object\nassay_type               object\ndata_validity_comment    object\nmolecule_chembl_id       object\nrelation                 object\nstandard_type            object\nstandard_units           object\nstandard_value           object\ntarget_chembl_id         object\ntarget_organism          object\ndtype: object\n```\n:::\n:::\n\n\nThe column of \"standard_value\" was converted from \"object\" to \"float64\" so we could use the Ki values for calculations later.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nbioact_df = bioact_df.astype({\"standard_value\": \"float64\"})\n# Check column data types again\nbioact_df.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=305}\n```\nactivity_id                int64\nassay_chembl_id           object\nassay_description         object\nassay_type                object\ndata_validity_comment     object\nmolecule_chembl_id        object\nrelation                  object\nstandard_type             object\nstandard_units            object\nstandard_value           float64\ntarget_chembl_id          object\ntarget_organism           object\ndtype: object\n```\n:::\n:::\n\n\nThen the next step was taking care of any missing entries by removing them in the first place. I excluded \"data_validity_comment\" column here as this was required to check if there were any unusual activity data e.g. excessively low or high Ki values. A lot of the compounds in this column probably had empty cells or \"None\", which ensured that there were no particular alarm bells to the extracted bioactivity data.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nbioact_df.dropna(subset = [\"activity_id\", \"assay_chembl_id\", \"assay_description\", \"assay_type\", \"molecule_chembl_id\", \"relation\",  \"standard_type\", \"standard_units\", \"standard_value\", \"target_chembl_id\", \"target_organism\"], axis = 0, how = \"any\", inplace = True)\n# Check number of rows and columns again (in this case, there appeared to be no change for rows)\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=306}\n```\n(706, 12)\n```\n:::\n:::\n\n\nSince all unique units inside the \"units\" and \"values\" columns were checked previously, I'd done the same for the \"standard_units\" column to see the ones recorded in it.\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nbioact_df[\"standard_units\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=307}\n```\narray(['nM', '/min/M', \"10'5/M/min\", \"10'2/M/min\", \"10'3/M/min\",\n       \"10'8/M/min\", \"10'7/M/min\", \"10'4/M/min\", \"10'6/M/min\", 'mM/min',\n       '10^8M'], dtype=object)\n```\n:::\n:::\n\n\nThere were a mixture of different units.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Check for number of non-nM units\nbioact_df[bioact_df[\"standard_units\"] != \"nM\"].shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=308}\n```\n61\n```\n:::\n:::\n\n\nThere appeared to be 61 non-nM values inside the fetched bioactivity data.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nbioact_df = bioact_df[bioact_df[\"standard_units\"] == \"nM\"]\n```\n:::\n\n\nI then narrowed the results to only \"nM\" and checked the dataframe again to see what units were left now.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Check there were only nM\nbioact_df[\"standard_units\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=310}\n```\narray(['nM'], dtype=object)\n```\n:::\n:::\n\n\nSo the filtering worked and the number of rows and columns were reduced.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Check df rows & columns\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=311}\n```\n(645, 12)\n```\n:::\n:::\n\n\nNext part would be to remove all the duplicates in the dataframe, especially when there were duplicate tests for the same compound.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nbioact_df.drop_duplicates(\"molecule_chembl_id\", keep = \"first\", inplace = True)\n```\n:::\n\n\nRenamed the \"standard_value\" and \"standard_units\" columns to \"Ki\" and \"units\" respectively.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nbioact_df.rename(\n    columns = {\n        \"standard_value\": \"Ki\",\n        \"standard_units\": \"units\"\n    }, inplace = True\n)\n\n# Check df to ensure name change\nbioact_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=313}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>standard_type</th>\n      <th>units</th>\n      <th>Ki</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>111024</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>Potential transcription error</td>\n      <td>CHEMBL11805</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.104</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>118575</td>\n      <td>CHEMBL641012</td>\n      <td>Inhibitory activity against human AChE</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL208599</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.026</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>125075</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL60745</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>1.630</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLastly, the index of the dataframe was reset.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nbioact_df.reset_index(drop = True, inplace = True)\nbioact_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=314}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>standard_type</th>\n      <th>units</th>\n      <th>Ki</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>111024</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>Potential transcription error</td>\n      <td>CHEMBL11805</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.104</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>118575</td>\n      <td>CHEMBL641012</td>\n      <td>Inhibitory activity against human AChE</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL208599</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>0.026</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>125075</td>\n      <td>CHEMBL641011</td>\n      <td>Inhibition constant determined against Acetylc...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL60745</td>\n      <td>=</td>\n      <td>Ki</td>\n      <td>nM</td>\n      <td>1.630</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOne final check on the number of columns and rows after preprocessing the bioactivity dataframe.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=315}\n```\n(540, 12)\n```\n:::\n:::\n\n\nThere were a total of 12 columns with 540 rows of data left in the bioactivity dataframe.\n\n<br>\n\n##### **Fetching assay data**\n\nThe assay data was added after I went through the rest of the data preprocessing and also after remembering to check on the confidence scores for assays used in the final data collected (to somewhat assess assay-to-target relationships). This [link from ChEMBL](https://chembl.gitbook.io/chembl-interface-documentation/frequently-asked-questions/chembl-data-questions#what-is-the-confidence-score) explained what the confidence score meant.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nassays = assay_api.filter(\n    # Use the previously saved target ChEMBL ID\n    target_chembl_id = chembl_id, \n    # Binding assays only as before\n    assay_type = \"B\"\n).only(\n    \"assay_chembl_id\",\n    \"confidence_score\"\n)\n```\n:::\n\n\nPlacing the fetched assay data into a Pandas DataFrame.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nassays_df = pd.DataFrame.from_dict(assays)\n\nprint(assays_df.shape)\nassays_df.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(2044, 2)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=317}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>assay_chembl_id</th>\n      <th>confidence_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL634034</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL642512</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL642513</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nassays_df.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=318}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>confidence_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>2044.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>8.778865</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>0.415113</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>9.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>9.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt looked like the lowest confidence score for this particular protein target in binding assays was at 8, with others sitting at 9 (the highest). There were 452 assays with confidence score of 8.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# Some had score of 8 - find out which ones\nassays_df[assays_df[\"confidence_score\"] == 8]\n```\n\n::: {.cell-output .cell-output-display execution_count=319}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>assay_chembl_id</th>\n      <th>confidence_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL634034</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL642512</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL642513</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL642514</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL642515</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1141</th>\n      <td>CHEMBL3887379</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1142</th>\n      <td>CHEMBL3887855</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1143</th>\n      <td>CHEMBL3887947</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1144</th>\n      <td>CHEMBL3888161</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1874</th>\n      <td>CHEMBL5058677</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n<p>452 rows × 2 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Combining bioactivity & assay data**\n\nThe key was to combine the bioactivity and assay data along the \"assay_chembl_id\" column.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nbioact_assay_df = pd.merge(\n    bioact_df[[\"assay_chembl_id\", \"molecule_chembl_id\", \"Ki\", \"units\", \"data_validity_comment\"]],\n    assays_df,\n    on = \"assay_chembl_id\",\n)\nprint(bioact_assay_df.shape)\nbioact_assay_df.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(540, 6)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=320}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>assay_chembl_id</th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>confidence_score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL641011</td>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL641011</td>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL641012</td>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nI actually came back to this step to relax the confidence score limit to include all the 8s as well as the 9s (otherwise previously I tried only using assays with score of 9), so that donepezil and galantamine could be included in the dataset as well (the purpose of this would be clearer in post 3 when building the model).\n\n<br>\n\n##### **Fetching compound data**\n\nWhile having identified the protein target, obtained the bioactivity data, and also the assay data, this next step was to fetch the compound data. This could be done by having the ChEMBL IDs available in the bioactivity dataset.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ncpds = cpd_api.filter(\n    molecule_chembl_id__in = list(bioact_df[\"molecule_chembl_id\"])\n).only(\n    \"molecule_chembl_id\",\n    \"molecule_structures\",\n    \"max_phase\"\n)\n```\n:::\n\n\nHere, the same step was applied where the compound QuerySet object was converted into a Pandas dataframe. However, the compound data extracted here might take longer than the bioactivity one. One way to monitor progress was through using tqdm package.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ncompds = list(tqdm(cpds))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|          | 0/540 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 540/540 [00:00<00:00, 7521.09it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n:::\n\n\nConverting retrieved compound QuerySet into a Pandas DataFrame.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ncpds_df = pd.DataFrame.from_records(compds)\nprint(cpds_df.shape)\ncpds_df.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(540, 3)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=323}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>molecule_structures</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>None</td>\n      <td>CHEMBL28</td>\n      <td>{'canonical_smiles': 'O=c1cc(-c2ccc(O)cc2)oc2c...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>CHEMBL50</td>\n      <td>{'canonical_smiles': 'O=c1c(O)c(-c2ccc(O)c(O)c...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>None</td>\n      <td>CHEMBL8320</td>\n      <td>{'canonical_smiles': 'O=C1C=CC(=O)C=C1', 'molf...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n###### **Preprocess compound data**\n\nRemoving any missing entries in the compound data (excluding the \"max_phase\" column as it was needed during the model training/testing part in post 3 - note: \"None\" entries meant they were preclinical molecules so not assigned with a max phase yet).\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ncpds_df.dropna(subset = [\"molecule_chembl_id\", \"molecule_structures\"], axis = 0, how = \"any\", inplace = True)\n\n# Check columns & rows in df\ncpds_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=324}\n```\n(540, 3)\n```\n:::\n:::\n\n\nRemoving any duplicates in the compound data.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ncpds_df.drop_duplicates(\"molecule_chembl_id\", keep = \"first\", inplace = True)\n\n# Check columns & rows again\ncpds_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=325}\n```\n(540, 3)\n```\n:::\n:::\n\n\nIdeally, only the compounds with canonical SMILES would be kept. Checking for the types of molecular representations used in the \"molecule_structures\" column of the compound dataset.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# Randomly choosing the 2nd entry as example\ncpds_df.iloc[1].molecule_structures.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=326}\n```\ndict_keys(['canonical_smiles', 'molfile', 'standard_inchi', 'standard_inchi_key'])\n```\n:::\n:::\n\n\nThere were 4 types: \"canonical_smiles\", \"molfile\", \"standard_inchi\" and \"standard_inchi_key\".\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# Create an empty list to store the canonical smiles\ncan_smiles = []\n\n# Create a for loop to loop over each row of data, \n# searching for only canonical_smiles to append to the created list\nfor i, cpd in cpds_df.iterrows():\n    try:\n        can_smiles.append(cpd[\"molecule_structures\"][\"canonical_smiles\"])\n    except KeyError:\n        can_smiles.append(None)\n\n# Create a new df column with name as \"smiles\", \n# which will store all the canonical smiles collected from the list above\ncpds_df[\"smiles\"] = can_smiles\n```\n:::\n\n\nCheck the compound dataframe quickly to see if a new column for SMILES has been created.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ncpds_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=328}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>molecule_structures</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>None</td>\n      <td>CHEMBL28</td>\n      <td>{'canonical_smiles': 'O=c1cc(-c2ccc(O)cc2)oc2c...</td>\n      <td>O=c1cc(-c2ccc(O)cc2)oc2cc(O)cc(O)c12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>CHEMBL50</td>\n      <td>{'canonical_smiles': 'O=c1c(O)c(-c2ccc(O)c(O)c...</td>\n      <td>O=c1c(O)c(-c2ccc(O)c(O)c2)oc2cc(O)cc(O)c12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>None</td>\n      <td>CHEMBL8320</td>\n      <td>{'canonical_smiles': 'O=C1C=CC(=O)C=C1', 'molf...</td>\n      <td>O=C1C=CC(=O)C=C1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOnce confirmed, the old \"molecule_structures\" column was then removed.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ncpds_df.drop(\"molecule_structures\", axis = 1, inplace = True)\n```\n:::\n\n\nFinally, adding another step to ensure all missing entries or entries without canonical SMILES strings were removed from the compound dataset.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\ncpds_df.dropna(subset = [\"smiles\"], axis = 0, how = \"any\", inplace = True)\n\nprint(cpds_df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(540, 3)\n```\n:::\n:::\n\n\nFinal look at the compound dataset, which should only include max phase, compound ChEMBL IDs and SMILES columns.\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ncpds_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=331}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>None</td>\n      <td>CHEMBL28</td>\n      <td>O=c1cc(-c2ccc(O)cc2)oc2cc(O)cc(O)c12</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3.0</td>\n      <td>CHEMBL50</td>\n      <td>O=c1c(O)c(-c2ccc(O)c(O)c2)oc2cc(O)cc(O)c12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>None</td>\n      <td>CHEMBL8320</td>\n      <td>O=C1C=CC(=O)C=C1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Combining bioactivity and compound data**\n\nTo combine both datasets, the key was to look for common column (similar to a SQL \"join\" query) between the two datasets.\n\nListing all the column names for both datasets.\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nbioact_assay_df.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=332}\n```\nIndex(['assay_chembl_id', 'molecule_chembl_id', 'Ki', 'units',\n       'data_validity_comment', 'confidence_score'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ncpds_df.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=333}\n```\nIndex(['max_phase', 'molecule_chembl_id', 'smiles'], dtype='object')\n```\n:::\n:::\n\n\nClearly, the column that existed in both dataframes was the \"molecule_chembl_id\" column.\n\nThe next step was to combine or merge both datasets.\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\n# Create a final dataframe that will contain both bioactivity and compound data\ndtree_df = pd.merge(\n    bioact_assay_df[[\"molecule_chembl_id\",\"Ki\", \"units\", \"data_validity_comment\"]],\n    cpds_df,\n    on = \"molecule_chembl_id\",\n)\n\ndtree_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=334}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>Ki</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>max_phase</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL11805</td>\n      <td>0.104</td>\n      <td>nM</td>\n      <td>Potential transcription error</td>\n      <td>None</td>\n      <td>COc1ccccc1CN(C)CCCCCC(=O)N(C)CCCCCCCCN(C)C(=O)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL60745</td>\n      <td>1.630</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>None</td>\n      <td>CC[N+](C)(C)c1cccc(O)c1.[Br-]</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL208599</td>\n      <td>0.026</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>None</td>\n      <td>CCC1=CC2Cc3nc4cc(Cl)ccc4c(N)c3[C@@H](C1)C2</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nShape of the final dataframe was checked.\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nprint(dtree_df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(540, 6)\n```\n:::\n:::\n\n\nSaving a copy of the merged dataframe for now to avoid re-running the previous code repeatedly, and also to be ready for second-half of the data preprocessing work, which will be in post 2.\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\ndtree_df.to_csv(\"ache_chembl.csv\")\n```\n:::\n\n\n",
    "supporting": [
      "Data_prep_1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}