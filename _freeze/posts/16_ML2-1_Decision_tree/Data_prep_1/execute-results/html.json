{
  "hash": "227298edce69f54a3acc38e83596c3b4",
  "result": {
    "markdown": "---\ntitle: Tree models in ChEMBL data\nsubtitle: ML series 2.1 - decision tree - data pre-processing (part 1)\nauthor: Jennifer HY Lin\ndate: 2023-8-30\ndraft: false\ncategories:\n  - Pandas\n  - ChEMBL database\nformat: html\nbibliography: references.bib\n---\n\n#### **Introduction**\n\nI've now come to a stage to do some more in-depth machine learning work after reading some peer-reviewed papers about it in relation to drug discovery and cheminformatics. Previously, I've only lightly touched on a commonly used classifier algorithm, logistic regression, as the first series in the machine learning realm. Reflecting back, I think I could've done a more thorough job during the data preparation stage. So this would be attempted this time.\n\nFrom a few of the papers I've read so far, dated in the recent years of 2021 and 2022, it seemed that traditional machine learning (ML) methods were still indispensible performance-wise, and when used in combination with deep learning neural networks, they tend to increase prediction accuracy more in the drug discovery field. I haven't ventured into the practicality and usefulness of large language models in drug discovery yet. However, comments from experienced seniors in this area did mention that they were still very much novel and hence not as useful yet, and from what I could imagine, molecular representations in texts or strings probably had already created many headaches e.g. molecular standardisations in regard to whether to use canonical SMILES and SELFIES or not, and other areas such as chiralities and aromaticities etc. Because of this, I'm sticking with learning to walk first in the conventional ML area before trying to run in the more in-depth areas such as deep learning (coming up in the future).\n\nThe data preparation used here was carried out with strong reference to the materials and methods section in this paper [@vantilborg2022]. There were probably other methods out there, but this was the paper I've read recently that had made sense and relatively easy to follow.\n\n<br>\n\n#### **Data retrieval**\n\nThis time I decided to try something new which was to use the ChEMBL webresource client to collect data (i.e. not from direct file downloads from the ChEMBL website). I found this great online resource about fetching data this way from the TeachOpenCADD talktorial on [compound data acquisition](https://projects.volkamerlab.org/teachopencadd/talktorials/T001_query_chembl.html). The data retrieval workflow used below was mainly adapted from this talktorial, with a few changes or additions to suit the dataset used for this post.\n\nThe webresource client was supported by the ChEMBL group and was based on a Django QuerySet interface. Their [GitHub repository](https://github.com/chembl/chembl_webresource_client) might explain a bit more about it, particularly the Jupyter notebook link provided within the repository would help a lot regarding how to write code to search for specific data.\n\nTo do this, a few libraries needed to be loaded first.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# Import libraries\n# Fetch data through ChEMBL webresource client\nfrom chembl_webresource_client.new_client import new_client\n\n# Dataframe library\nimport pandas as pd\n\n# Progress bar\nfrom tqdm import tqdm\n```\n:::\n\n\nTo see what types of data were provided by ChEMBL webresource client, run the following code and refer to ChEMBL documentations to find out what data were embedded inside different data categories. Sometimes, it might not be that straight forward and some digging would be required (I went back to this step below to find the \"data_validity_comment\" when I was trying to do some compound sanitisations actually).\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\navailable_resources = [resource for resource in dir(new_client) if not resource.startswith('_')]\nprint(available_resources)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['activity', 'activity_supplementary_data_by_activity', 'assay', 'assay_class', 'atc_class', 'binding_site', 'biotherapeutic', 'cell_line', 'chembl_id_lookup', 'compound_record', 'compound_structural_alert', 'description', 'document', 'document_similarity', 'drug', 'drug_indication', 'drug_warning', 'go_slim', 'image', 'mechanism', 'metabolism', 'molecule', 'molecule_form', 'official', 'organism', 'protein_classification', 'similarity', 'source', 'substructure', 'target', 'target_component', 'target_relation', 'tissue', 'xref_source']\n```\n:::\n:::\n\n\nResource objects were created to enable API access as suggested by the talktorial.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# for targets (proteins)\ntargets_api = new_client.target\n\n# for bioactivities\nbioact_api = new_client.activity\n\n# for compounds\ncpd_api = new_client.molecule\n```\n:::\n\n\nChecked object type for one of these API objects (e.g. bioactivity API object).\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ntype(bioact_api)\n```\n\n::: {.cell-output .cell-output-display execution_count=172}\n```\nchembl_webresource_client.query_set.QuerySet\n```\n:::\n:::\n\n\n<br>\n\n##### **Fetching target data**\n\nA protein target e.g. acetylcholinesterase was randomly chosen by using [UniProt](https://www.uniprot.org/) to look up the protein UniProt ID.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Specify Uniprot ID for acetylcholinesterase\nuniprot_id = \"P22303\"\n\n# Get info from ChEMBL about this protein target, \n# with selected features only\ntargets = targets_api.get(target_components__accession = uniprot_id).only(\n    \"target_chembl_id\",\n    \"organism\", \n    \"pref_name\", \n    \"target_type\"\n)\n```\n:::\n\n\nThe query results were stored in a \"targets\" object, which was a QuerySet with lazy data evaluation only, meaning it would only react when there was a request for the data. Therefore, to see the results, the \"targets\" object was then read through Pandas DataFrame.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Read \"targets\" with Pandas\ntargets = pd.DataFrame.from_records(targets)\ntargets\n```\n\n::: {.cell-output .cell-output-display execution_count=174}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>organism</th>\n      <th>pref_name</th>\n      <th>target_chembl_id</th>\n      <th>target_type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Homo sapiens</td>\n      <td>Acetylcholinesterase</td>\n      <td>CHEMBL220</td>\n      <td>SINGLE PROTEIN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Homo sapiens</td>\n      <td>Acetylcholinesterase</td>\n      <td>CHEMBL220</td>\n      <td>SINGLE PROTEIN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Homo sapiens</td>\n      <td>Cholinesterases; ACHE &amp; BCHE</td>\n      <td>CHEMBL2095233</td>\n      <td>SELECTIVITY GROUP</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSelected the first protein target from this dataframe.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Save the first protein in the dataframe\nselect_target = targets.iloc[0]\nselect_target\n```\n\n::: {.cell-output .cell-output-display execution_count=175}\n```\norganism                    Homo sapiens\npref_name           Acetylcholinesterase\ntarget_chembl_id               CHEMBL220\ntarget_type               SINGLE PROTEIN\nName: 0, dtype: object\n```\n:::\n:::\n\n\nThen saved the selected ChEMBL ID for the first protein (to be used later).\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nchembl_id = select_target.target_chembl_id\n# Check it's saved\nprint(chembl_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCHEMBL220\n```\n:::\n:::\n\n\n<br>\n\n##### **Fetching bioactivity data**\n\nObtaining bioactivity data for the selected target.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nbioact = bioact_api.filter(\n    # Use the previously saved target ChEMBL ID\n    target_chembl_id = chembl_id, \n    # Bioactivity type\n    type = \"IC50\",\n    # Requesting exact measurements\n    relation = \"=\",\n    # Binding data as \"B\"\n    assay_type = \"B\"\n).only(\n    \"activity_id\",\n    \"data_validity_comment\"\n    \"assay_chembl_id\",\n    \"assay_description\",\n    \"assay_type\",\n    \"molecule_chembl_id\",\n    \"type\",\n    \"standard_units\",\n    \"relation\",\n    \"standard_value\",\n    \"target_chembl_id\",\n    \"target_organism\",\n)\n\n# Check the length and type of bioactivities object\nprint(len(bioact), type(bioact))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n6129 <class 'chembl_webresource_client.query_set.QuerySet'>\n```\n:::\n:::\n\n\nTo have a quick look at the data being held inside each entry of the bioactivity dataset, e.g. for first entry.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nprint(len(bioact[0]), type(bioact[0]))\nbioact[0]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n14 <class 'dict'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=178}\n```\n{'activity_id': 33969,\n 'assay_chembl_id': 'CHEMBL643384',\n 'assay_description': 'Inhibitory concentration against acetylcholinesterase',\n 'assay_type': 'B',\n 'data_validity_comment': None,\n 'molecule_chembl_id': 'CHEMBL133897',\n 'relation': '=',\n 'standard_units': 'nM',\n 'standard_value': '750.0',\n 'target_chembl_id': 'CHEMBL220',\n 'target_organism': 'Homo sapiens',\n 'type': 'IC50',\n 'units': 'uM',\n 'value': '0.75'}\n```\n:::\n:::\n\n\nThe next step might take a few minutes - downloading the QuerySet as a Pandas DataFrame.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nbioact_df = pd.DataFrame.from_dict(bioact)\n\nbioact_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=179}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>standard_units</th>\n      <th>standard_value</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n      <th>type</th>\n      <th>units</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33969</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL133897</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>750.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n      <td>uM</td>\n      <td>0.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37563</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL336398</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>100.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n      <td>uM</td>\n      <td>0.1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38902</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130628</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>300.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n      <td>uM</td>\n      <td>0.3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>41170</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130478</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>800.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n      <td>uM</td>\n      <td>0.8</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>42363</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130112</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>2400.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n      <td>uM</td>\n      <td>2.4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nChecked total rows and columns in the bioactivities dataframe.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=180}\n```\n(6129, 14)\n```\n:::\n:::\n\n\n<br>\n\n###### **Pre-process bioactivity data**\n\nTo see a variety of units being recorded in the ChEMBL database, which meant they would need to be converted to nanomolar (nM).\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nbioact_df[\"units\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=181}\n```\narray(['uM', 'mM', 'nM', 'M', 'ug ml-1', 'pM', \"10'-5M\", \"10'-3M\",\n       \"10'-2M\", \"10'-4M\", \"10'-7M\", \"10'-9M\", \"10'-6M\", \"10'-8M\",\n       \"10'-3microM\", \"10'-4microM\", 'uM/L', \"10'-10M\", 'umol', 'umol/L',\n       \"10'3pM\", \"10'6pM\", \"10'5pM\", \"10'2pM\", \"10'-12M\", \"10'-2microM\",\n       '10^-3microM', '10^-4microM', 'mg/ml', 'µM'], dtype=object)\n```\n:::\n:::\n\n\nThe simplest thing to do was to drop the \"units\" and \"value\" columns, which were in micromolar (μM), and to avoid unit conversion to nM, we could use columns such as \"standard_units\" and \"standard_value\" which were recorded with nM already.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nbioact_df.drop([\"units\", \"value\"], axis = 1, inplace = True)\n# Re-check df\nbioact_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=182}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>standard_units</th>\n      <th>standard_value</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33969</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL133897</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>750.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37563</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL336398</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>100.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38902</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130628</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>300.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>41170</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130478</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>800.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>42363</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130112</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>2400.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nbioact_df.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=183}\n```\nactivity_id               int64\nassay_chembl_id          object\nassay_description        object\nassay_type               object\ndata_validity_comment    object\nmolecule_chembl_id       object\nrelation                 object\nstandard_units           object\nstandard_value           object\ntarget_chembl_id         object\ntarget_organism          object\ntype                     object\ndtype: object\n```\n:::\n:::\n\n\nAt this stage, I did a little detour test to see how this dataframe would be read in Polars dataframe library, particularly to see if the data types for each column might be more accurate than how it was in Pandas. After converting this Pandas dataframe into a Polars one, I realised that even Polars was reading in the \"standard_value\" column as \"str\", which meant it would still need another conversion into \"float64\" anyway. Therefore, I decided to stick with Pandas all the way since there were not so much differences between the two dataframe libraries.\n\nThe column of \"standard_value\" was converted from \"object\" to \"float64\" - so we could use this half maximal inhibitory concentration (IC50) values for calculations later.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nbioact_df = bioact_df.astype({\"standard_value\": \"float64\"})\n# Check column data types again\nbioact_df.dtypes\n```\n\n::: {.cell-output .cell-output-display execution_count=184}\n```\nactivity_id                int64\nassay_chembl_id           object\nassay_description         object\nassay_type                object\ndata_validity_comment     object\nmolecule_chembl_id        object\nrelation                  object\nstandard_units            object\nstandard_value           float64\ntarget_chembl_id          object\ntarget_organism           object\ntype                      object\ndtype: object\n```\n:::\n:::\n\n\nThen the next step was taking care of any missing entries by removing them in the first place. I excluded \"data_validity_comment\" column here as this was required to check if there were any activity data that were deemed to be not as valid e.g. excessively high IC50 value and so on. A lot of the compounds in this column probably had \"None\", which ensured that there were no particular alarm bells to the curated bioactivity data.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nbioact_df.dropna(subset = [\"activity_id\", \"assay_chembl_id\", \"assay_description\", \"assay_type\", \"molecule_chembl_id\", \"relation\", \"standard_units\", \"standard_value\", \"target_chembl_id\", \"target_organism\", \"type\"], axis = 0, how = \"any\", inplace = True)\n# Check number of rows and columns again (in this case, there appeared to be no change for rows)\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=185}\n```\n(6129, 12)\n```\n:::\n:::\n\n\nSince all unique units inside the \"units\" and \"values\" columns were checked previously, I'd done the same for the \"standard_units\" column to see the ones recorded in it.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nbioact_df[\"standard_units\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=186}\n```\narray(['nM', 'ug.mL-1', \"10'3pM\", \"10'6pM\", \"10'5pM\", '10^-4microM', 'µM'],\n      dtype=object)\n```\n:::\n:::\n\n\nThere were a mixture of nM, μM and also picomolars (pM)!\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Check for number of non-nM units\nbioact_df[bioact_df[\"standard_units\"] != \"nM\"].shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=187}\n```\n30\n```\n:::\n:::\n\n\nThere appeared to be 30 non-nM values inside the fetched bioactivity data.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nbioact_df = bioact_df[bioact_df[\"standard_units\"] == \"nM\"]\n```\n:::\n\n\nI then narrowed the results to only \"nM\" and checked the dataframe again to see what units were left now.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Check there were only nM\nbioact_df[\"standard_units\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=189}\n```\narray(['nM'], dtype=object)\n```\n:::\n:::\n\n\nSo the filtering worked and the number of rows and columns were reduced.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Check df rows & columns\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=190}\n```\n(6099, 12)\n```\n:::\n:::\n\n\nNext part would be to remove all the duplicates in the dataframe, especially when there were duplicate tests for the same compound.\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nbioact_df.drop_duplicates(\"molecule_chembl_id\", keep = \"first\", inplace = True)\n```\n:::\n\n\nRenamed the \"standard_value\" and \"standard_units\" columns to \"IC50\" and \"units\" respectively.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nbioact_df.rename(\n    columns = {\n        \"standard_value\": \"IC50\",\n        \"standard_units\": \"units\"\n    }, inplace = True\n)\n\n# Check df to ensure name change\nbioact_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=192}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>units</th>\n      <th>IC50</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33969</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL133897</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>750.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37563</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL336398</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>100.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38902</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130628</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>300.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>41170</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130478</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>800.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>42363</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130112</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>2400.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLastly, the index of the dataframe was reset.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nbioact_df.reset_index(drop = True, inplace = True)\nbioact_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=193}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>activity_id</th>\n      <th>assay_chembl_id</th>\n      <th>assay_description</th>\n      <th>assay_type</th>\n      <th>data_validity_comment</th>\n      <th>molecule_chembl_id</th>\n      <th>relation</th>\n      <th>units</th>\n      <th>IC50</th>\n      <th>target_chembl_id</th>\n      <th>target_organism</th>\n      <th>type</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>33969</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL133897</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>750.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>37563</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL336398</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>100.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>38902</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130628</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>300.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>41170</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130478</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>800.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>42363</td>\n      <td>CHEMBL643384</td>\n      <td>Inhibitory concentration against acetylcholine...</td>\n      <td>B</td>\n      <td>None</td>\n      <td>CHEMBL130112</td>\n      <td>=</td>\n      <td>nM</td>\n      <td>2400.0</td>\n      <td>CHEMBL220</td>\n      <td>Homo sapiens</td>\n      <td>IC50</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOne final check on the number of columns and rows after pre-processing the bioactivity dataframe.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nbioact_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\n(5041, 12)\n```\n:::\n:::\n\n\nThere were a total of 12 columns with 5,041 rows of data left in the bioactivity dataframe.\n\n<br>\n\n##### **Fetching compound data**\n\nWhile having identified the protein target and obtained the bioactivity data, this step was to link the bioactivity data to the compounds.\n\nThis could be done by having the ChEMBL IDs available for the compounds involved in the bioactivity dataset.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ncpds = cpd_api.filter(\n    molecule_chembl_id__in = list(bioact_df[\"molecule_chembl_id\"])\n).only(\n    \"molecule_chembl_id\",\n    \"molecule_structures\"\n)\n```\n:::\n\n\nHere, the same step was applied where the compound QuerySet object was converted into a Pandas dataframe. However, the dataset extracted this time could take longer than the time taken to fetch the bioactivity data. This was then monitored using a progress bar (tqdm package).\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Uncomment line below to use progress bar\n# when running in ipynb or qmd files\n#compds = list(tqdm(cpds))\n\n# Code below was the same as above, \n# except without the progress bar\n# - for published version (images of progress bar taking too much space)\ncompds = list(cpds)\n```\n:::\n\n\nConverting retrieved compound QuerySet into a Pandas DataFrame.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ncpds_df = pd.DataFrame.from_records(compds)\n\nprint(cpds_df.shape)\ncpds_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5041, 2)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=197}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>molecule_structures</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL411</td>\n      <td>{'canonical_smiles': 'CC/C(=C(/CC)c1ccc(O)cc1)...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL416</td>\n      <td>{'canonical_smiles': 'COc1c2occc2cc2ccc(=O)oc1...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL21</td>\n      <td>{'canonical_smiles': 'Nc1ccc(S(N)(=O)=O)cc1', ...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL424</td>\n      <td>{'canonical_smiles': 'O=C(O)c1ccccc1O', 'molfi...</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL7002</td>\n      <td>{'canonical_smiles': 'CC1(COc2ccc(CC3SC(=O)NC3...</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n###### **Pre-process compound data**\n\nRemoving any missing entries in the compound data.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ncpds_df.dropna(axis = 0, how = \"any\", inplace = True)\n\n# Check columns & rows in df\ncpds_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=198}\n```\n(5040, 2)\n```\n:::\n:::\n\n\nRemoving any duplicates in the compound data.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ncpds_df.drop_duplicates(\"molecule_chembl_id\", keep = \"first\", inplace = True)\n\n# Check columns & rows again\ncpds_df.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=199}\n```\n(5040, 2)\n```\n:::\n:::\n\n\nIdeally, only the compounds with canonical SMILES would be kept. Checking for the types of molecular representations used in the \"molecule_structures\" column of the compound dataset.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# Randomly choosing the 2nd entry\ncpds_df.iloc[1].molecule_structures.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=200}\n```\ndict_keys(['canonical_smiles', 'molfile', 'standard_inchi', 'standard_inchi_key'])\n```\n:::\n:::\n\n\nThere were 4 types as: \"canonical_smiles\", \"molfile\", \"standard_inchi\" and \"standard_inchi_key\".\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# Create an empty list to store the canonical smiles\ncan_smiles = []\n\n# Create a for loop to loop over each row of data, \n# searching for only canonical_smiles to append to the created list\nfor i, cpd in cpds_df.iterrows():\n    try:\n        can_smiles.append(cpd[\"molecule_structures\"][\"canonical_smiles\"])\n    except KeyError:\n        can_smiles.append(None)\n\n# Create a new df column with name as \"smiles\", \n# which will store all the canonical smiles collected from the list above\ncpds_df[\"smiles\"] = can_smiles\n```\n:::\n\n\nCheck the compound dataframe quickly to see if a new column for SMILES has been created.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ncpds_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=202}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>molecule_structures</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL411</td>\n      <td>{'canonical_smiles': 'CC/C(=C(/CC)c1ccc(O)cc1)...</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL416</td>\n      <td>{'canonical_smiles': 'COc1c2occc2cc2ccc(=O)oc1...</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL21</td>\n      <td>{'canonical_smiles': 'Nc1ccc(S(N)(=O)=O)cc1', ...</td>\n      <td>Nc1ccc(S(N)(=O)=O)cc1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL424</td>\n      <td>{'canonical_smiles': 'O=C(O)c1ccccc1O', 'molfi...</td>\n      <td>O=C(O)c1ccccc1O</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL7002</td>\n      <td>{'canonical_smiles': 'CC1(COc2ccc(CC3SC(=O)NC3...</td>\n      <td>CC1(COc2ccc(CC3SC(=O)NC3=O)cc2)CCCCC1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nOnce confirmed, the old \"molecule_structures\" column was then removed.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ncpds_df.drop(\"molecule_structures\", axis = 1, inplace = True)\n```\n:::\n\n\nFinally, adding another step to ensure all missing entries or entries without canonical SMILES strings were removed from the compound dataset.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ncpds_df.dropna(axis = 0, how = \"any\", inplace = True)\n\nprint(cpds_df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5040, 2)\n```\n:::\n:::\n\n\nFinal look at the compound dataset, which should only include compounds ChEMBL IDs and SMILES columns.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ncpds_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=205}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL411</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL416</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL21</td>\n      <td>Nc1ccc(S(N)(=O)=O)cc1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL424</td>\n      <td>O=C(O)c1ccccc1O</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL7002</td>\n      <td>CC1(COc2ccc(CC3SC(=O)NC3=O)cc2)CCCCC1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Combining bioactivity and compound data**\n\nTo combine both datasets, the key was to look for common column (similar to a SQL \"join\" query) between the two datasets.\n\nListing all the column names for both datasets would show the common column.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nbioact_df.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=206}\n```\nIndex(['activity_id', 'assay_chembl_id', 'assay_description', 'assay_type',\n       'data_validity_comment', 'molecule_chembl_id', 'relation', 'units',\n       'IC50', 'target_chembl_id', 'target_organism', 'type'],\n      dtype='object')\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ncpds_df.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=207}\n```\nIndex(['molecule_chembl_id', 'smiles'], dtype='object')\n```\n:::\n:::\n\n\nClearly, the one column that existed in both dataframes was the \"molecule_chembl_id\" column.\n\nThe next step was to combine or merge both datasets.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n# Create a final dataframe that will contain both bioactivity and compound data\ndtree_df = pd.merge(\n    bioact_df[[\"molecule_chembl_id\", \"IC50\", \"units\", \"data_validity_comment\"]],\n    cpds_df,\n    on = \"molecule_chembl_id\",\n)\n\ndtree_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=208}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>IC50</th>\n      <th>units</th>\n      <th>data_validity_comment</th>\n      <th>smiles</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL133897</td>\n      <td>750.0</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>CCOc1nn(-c2cccc(OCc3ccccc3)c2)c(=O)o1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL336398</td>\n      <td>100.0</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>O=C(N1CCCCC1)n1nc(-c2ccc(Cl)cc2)nc1SCC1CC1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL130628</td>\n      <td>300.0</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>O=C(N1CCCCC1)n1nc(-c2ccc(Cl)cc2)nc1SCC(F)(F)F</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL130478</td>\n      <td>800.0</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>CSc1nc(-c2ccc(OC(F)(F)F)cc2)nn1C(=O)N(C)C</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL130112</td>\n      <td>2400.0</td>\n      <td>nM</td>\n      <td>None</td>\n      <td>CSc1nc(-c2ccc(C)cc2)nn1C(=O)N(C)c1ccccc1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nRow indices were reset and shape of the final dataframe was checked.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ndtree_df.reset_index(drop = True, inplace = True)\n\nprint(dtree_df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5040, 5)\n```\n:::\n:::\n\n\nSaving a copy of the merged dataframe for now (to avoid re-running the previous code repeatedly).\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\ndtree_df.to_csv(\"ache_chembl.csv\")\n```\n:::\n\n\nThe second-half of data pre-processing will carry on in the next post.\n\n",
    "supporting": [
      "Data_prep_1_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}