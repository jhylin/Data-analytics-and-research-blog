{
  "hash": "4bf43a22c0ccd01e3eb3b495cf1940dc",
  "result": {
    "markdown": "---\ntitle: Decision tree\nsubtitle: Series 2.1 - model building and estimating experimental errors\nauthor: Jennifer HY Lin\ndate: 2023-9-19\ndraft: true\ncategories:\n  - Machine learning projects\n  - Tree models\n  - Pandas\n  - Scikit-learn\n  - ChEMBL database\nformat: html\nbibliography: references.bib\n---\n\n##### **Data source**\n\nThe data used here was extracted from ChEMBL database by using ChEMBL web resource client in Python. The details of all the steps taken to reach the final .csv file could be seen in these earlier **posts** (yes, it took quite a while to clean the data, so it was splitted into two posts).\n\n-   The final .csv file used to train the model was named, \"ache_2d_chembl.csv\"\n\n-   The earlier version without any RDKit 2D descriptors calculated was named, \"ache_chembl.csv\"\n\n-   Both files should be in a GitHub repository called, \"[ML2-1_decision_tree](https://github.com/jhylin/ML2-1_decision_tree)\" or in my [blog repository](https://github.com/jhylin/Data_in_life_blog), under \"posts\" folder (look for \"16_ML2-1_Decision_tree\" folder)\n\n<br>\n\n##### **Estimate experimental errors**\n\nThis part was about estimating the impact of experimental errors (pKi values) on the predictive machine learning (ML) models. It was also needed to estimate the maximum possible correlation that could be drawn from the dataset prepared from the previous two posts. I supposed it made more sense if this was done prior to building the ML model, so this wouldn't be forgotten or missed, as we know that real-life is full of many imperfections.\n\nThis subsection was inspired by Pat Walters' posts, which have discussed about estimating errors for experimental data with code links available in these posts:\n\n-   [How Good Could (Should) My Models Be?](http://practicalcheminformatics.blogspot.com/2019/07/how-good-could-should-my-models-be.html) - a reference paper [@Brown2009] was mentioned as the simulation basis for estimating the impact of experimental errors on the correlation from a predictive ML model\n\n-   [Getting Real with Molecular Property Prediction](http://practicalcheminformatics.blogspot.com/2023/06/getting-real-with-molecular-property.html) (under subsection of \"How Well Should We Be Able to Model the Data?\")\n\nTo get started, all the required libraries were loaded as below.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.metrics import r2_score\nimport seaborn as sns\nfrom sklearn import tree\n```\n:::\n\n\nImported the preprocessed data from previous posts.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Import data\ndtree = pd.read_csv(\"ache_2d_chembl.csv\")\ndtree.drop(columns = [\"Unnamed: 0\"], inplace=True)\ndtree.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>NaN</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>NaN</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>4.0</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>NaN</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4.0</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe pKi column was used in the code below as it contained the experimental values (calculated from measured Ki values, usually derived from countless lab experiments) collected from different scientific literatures or other sources as stated in ChEMBL. The aim was to simulate pKi values with experimental errors added to them.\n\n*Code used for the rest of the subsection were adapted with thanks from Pat Walters' \"[maximum_correlation.ipynb](https://github.com/PatWalters/maximum_correlation/blob/master/maximum_correlation.ipynb)\" with my own added comments for further explanations*\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Save exp data (pKi) as an object\ndata = dtree[\"pKi\"]\n# Save the object as a list\ndata_ls = [data]\n\n# Trial 3-, 5- & 10-fold errors\nfor fold in (3, 5, 10):\n    # Retrieve error samples randomly from a normal distribution\n    # Bewteen 0 and log10 of number-fold \n    # for the length of provided data only\n    error = np.random.normal(0, np.log10(fold), len(data))\n    data_ls.append(error + data)\n\n# Convert data_ls to dataframe\ndtree_err = pd.DataFrame(data_ls)\n# Re-align dataframe (switch column header & index)\ndtree_err = dtree_err.transpose()\n# Rename columns\ndtree_err.columns = [\"pKi\", \"3-fold\", \"5-fold\", \"10-fold\"]\nprint(dtree_err.shape)\ndtree_err.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 4)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pKi</th>\n      <th>3-fold</th>\n      <th>5-fold</th>\n      <th>10-fold</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.787812</td>\n      <td>9.302868</td>\n      <td>8.243846</td>\n      <td>7.406252</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.585027</td>\n      <td>11.152776</td>\n      <td>9.959758</td>\n      <td>9.861436</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.821023</td>\n      <td>7.460300</td>\n      <td>7.252301</td>\n      <td>6.366593</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.913640</td>\n      <td>7.660428</td>\n      <td>7.798395</td>\n      <td>9.471725</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6.698970</td>\n      <td>7.015055</td>\n      <td>5.657821</td>\n      <td>6.133710</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nMelting the created dtree_err so it could be plotted later (noticed there should be an increased number of rows after re-stacking the data).\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Melt the dtree_err dataframe \n# to make error values in one column (for plotting)\ndtree_err_melt = dtree_err.melt(id_vars = \"pKi\")\nprint(dtree_err_melt.shape)\ndtree_err_melt.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(1443, 3)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>pKi</th>\n      <th>variable</th>\n      <th>value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8.787812</td>\n      <td>3-fold</td>\n      <td>9.302868</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.585027</td>\n      <td>3-fold</td>\n      <td>11.152776</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>6.821023</td>\n      <td>3-fold</td>\n      <td>7.460300</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>7.913640</td>\n      <td>3-fold</td>\n      <td>7.660428</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>6.698970</td>\n      <td>3-fold</td>\n      <td>7.015055</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPresenting this in regression plots.\n\n*Note: There was a matplotlib bug which would always show a tight_layout user warning for FacetGrid plots in seaborn (the lmplot used below). Seaborn was built based on matplotlib so unsurprisingly this occurred (this [GitHub issue link](https://github.com/matplotlib/matplotlib/issues/26290) might explain it). I have therefore temporarily silenced this user warning for the sake of post publication.*\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# To silence the tight-layout user warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# variable = error-fold e.g. 3-fold\n# value = pKi value plus error\nsns.set_theme(font_scale = 1.5)\nplot = sns.lmplot(\n    x = \"pKi\", \n    y = \"value\", \n    col = \"variable\", \n    data = dtree_err_melt, \n    # alpha = markâ€™s opacity (low - more transparent)\n    # s = mark size (increase with higher number)\n    scatter_kws = dict(alpha = 0.5, s = 15)\n    )\ntitle_list = [\"3-fold\", \"5-fold\", \"10-fold\"]\nfor i in range(0, 3):\n    plot.axes[0, i].set_ylabel(\"pKi + error\")\n    plot.axes[0, i].set_title(title_list[i])\n```\n\n::: {.cell-output .cell-output-display}\n![](Model_build_files/figure-html/cell-6-output-1.png){width=1407 height=446}\n:::\n:::\n\n\nSimulating the impact of error on the correlation between experimental pKi and also pKi with errors (3-fold, 5-fold and 10-fold). R^2^ calculated using [*scikit-learn*](https://scikit-learn.org/stable/modules/model_evaluation.html#r2-score) was introduced in the code below.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# Calculating r2 score (coefficient of determination) \n# based on 1000 trials for each fold\n# note: data = dtree[\"pKi\"]\n\n# Create an empty list for correlation\ncor_ls = []\nfor fold in [3, 5, 10]:\n    # Set up 1000 trials\n    for i in range(0, 1000):\n        error = np.random.normal(0, np.log10(fold), len(data))\n        cor_ls.append([r2_score(data, data + error), f\"{fold}-fold\"])\n\n# Convert cor_ls into dataframe\nerr_df = pd.DataFrame(cor_ls, columns = [\"r2\", \"fold_error\"])\nerr_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>r2</th>\n      <th>fold_error</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0.879455</td>\n      <td>3-fold</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0.884351</td>\n      <td>3-fold</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0.900368</td>\n      <td>3-fold</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0.886813</td>\n      <td>3-fold</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.893482</td>\n      <td>3-fold</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nPlotting the R^2^ and fold-errors as violin plots.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nsns.set_theme(rc = {\"figure.figsize\": (9, 8)}, font_scale = 1.5)\nvplot = sns.violinplot(x = \"fold_error\", y = \"r2\", data = err_df)\nvplot.set(xlabel = \"Fold error\", ylabel = \"R$^2$\")\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n[Text(0.5, 0, 'Fold error'), Text(0, 0.5, 'R$^2$')]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Model_build_files/figure-html/cell-8-output-2.png){width=761 height=671}\n:::\n:::\n\n\nThis definitely helped a lot with visualising the estimated errors for the experimental Ki values curated in ChEMBL for this specific protein target (CHEMBL220, acetylcholinesterase (AChE)). The larger the error-fold, the lower the R^2^, and once the experimental error reached 10-fold, we could see an estimated R^2^ (maximum correlation) with its median sitting below 0.55, indicating a likely poor predictive ML model if it was built based on these data with the estimated 10-fold experimental errors.\n\n<br>\n\n##### **Check max phase distribution**\n\nAt this stage, I've planned to do model training on compounds with max phase 4 (i.e. prescription medicines), so this would somewhat be an attempt to mirror real-life scenarios for the ML prediction model.\n\nMax phases were assigned to each ChEMBL-curated compound according to this [ChEMBL FAQ link](https://chembl.gitbook.io/chembl-interface-documentation/frequently-asked-questions/drug-and-compound-questions) (under the question of \"What is max phase?\"). As quoted from this ChEMBL FAQ link, a max phase 4 compound means:\n\n> \"Approved (4): A marketed drug e.g. AMINOPHYLLINE (CHEMBL1370561) is an FDA approved drug for treatment of asthma.\"\n\nChecking out the actual counts of each max phase group in the dataset.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndtree[[\"molecule_chembl_id\", \"max_phase\"]].groupby(\"max_phase\").count()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n    </tr>\n    <tr>\n      <th>max_phase</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>-1.0</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2.0</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3.0</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4.0</th>\n      <td>10</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere was only a very small number of compounds with max phase 4 assigned (a total count of 10, which was also unsurprising since there weren't many AChE inhibitors used as prescription medications for dementia - some of the well-known examples were donepezil, galantamine and rivastigmine).\n\nFilling in actual \"null\" labels for all \"NaN\" rows in the \"max_phase\" columns to help with filtering out these compounds later on.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndtree[\"max_phase\"].fillna(\"null\", inplace=True)\ndtree.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>null</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>null</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>4.0</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>null</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4.0</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Sanity check on the dataframe**\n\nThis was just another sanity check for myself on the dtree dataframe - making sure there weren't any \"NaN\" cells in it (so dropping any \"NaN\" again, even though I might have already done this as one of the steps during data preprocessing).\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndtree.dropna()\nprint(dtree.shape)\ndtree.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(481, 25)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>null</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>null</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>4.0</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>null</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4.0</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Model building**\n\n###### **Training data based on max phase 4 compounds**\n\nSo here I wanted to separate the collected data by splitting the compounds into two groups based on their assigned max phases. Compounds with max phase 4 were chosen as the training data, and the rest of the compounds with max phases of \"null\" would be the testing data.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Create a df for compounds with max phase 4 only\ndtree_mp4 = dtree[dtree[\"max_phase\"] == 4]\ndtree_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>4.0</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4.0</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CHEMBL640</td>\n      <td>6.000000</td>\n      <td>4.0</td>\n      <td>235.168462</td>\n      <td>0.461538</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>17</td>\n      <td>...</td>\n      <td>1.791687</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>CHEMBL502</td>\n      <td>7.688246</td>\n      <td>4.0</td>\n      <td>379.214744</td>\n      <td>0.458333</td>\n      <td>4</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>28</td>\n      <td>...</td>\n      <td>2.677222</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>CHEMBL481</td>\n      <td>7.296709</td>\n      <td>4.0</td>\n      <td>586.279135</td>\n      <td>0.515152</td>\n      <td>10</td>\n      <td>1</td>\n      <td>7</td>\n      <td>10</td>\n      <td>43</td>\n      <td>...</td>\n      <td>3.632560</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>133</th>\n      <td>CHEMBL360055</td>\n      <td>4.431798</td>\n      <td>4.0</td>\n      <td>510.461822</td>\n      <td>0.800000</td>\n      <td>6</td>\n      <td>0</td>\n      <td>1</td>\n      <td>6</td>\n      <td>36</td>\n      <td>...</td>\n      <td>3.257653</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>160</th>\n      <td>CHEMBL1025</td>\n      <td>5.221849</td>\n      <td>4.0</td>\n      <td>184.066459</td>\n      <td>1.000000</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>11</td>\n      <td>...</td>\n      <td>3.345144</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>171</th>\n      <td>CHEMBL659</td>\n      <td>6.522879</td>\n      <td>4.0</td>\n      <td>287.152144</td>\n      <td>0.529412</td>\n      <td>4</td>\n      <td>1</td>\n      <td>4</td>\n      <td>4</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.226843</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>CHEMBL1200970</td>\n      <td>4.607303</td>\n      <td>4.0</td>\n      <td>348.142697</td>\n      <td>0.368421</td>\n      <td>2</td>\n      <td>0</td>\n      <td>3</td>\n      <td>4</td>\n      <td>23</td>\n      <td>...</td>\n      <td>4.223591</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>195</th>\n      <td>CHEMBL1677</td>\n      <td>6.995679</td>\n      <td>4.0</td>\n      <td>234.092376</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>3</td>\n      <td>16</td>\n      <td>...</td>\n      <td>3.218715</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\nMaking sure donepezil and galantamine were in this dtree_mp4 dataframe, so the model training would be based on these medicines and also other max phase 4 AChE inhibitors.\n\nThe screenshots of both medicines were taken from ChEMBL website:\n\n![Screenshot of donepezil (parent drug form) with its molecule ChEMBL ID](donepezil_chembl.png)\n\n![Screenshot of galantamine (parent drug form) with its molecule ChEMBL ID](galantamine_chembl.png)\n\nThe following regex string check confirmed that these two compounds were in the dtree_mp4 dataframe - row indices 9 and 171 contained these two drugs.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nlist_ache_inh = [\"CHEMBL502\", \"CHEMBL659\"]\ndtree_mp4[\"molecule_chembl_id\"].str.contains(r\"|\".join(list_ache_inh))\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n2      False\n4      False\n6      False\n9       True\n131    False\n133    False\n160    False\n171     True\n180    False\n195    False\nName: molecule_chembl_id, dtype: bool\n```\n:::\n:::\n\n\nSetting up the features for the training set.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Set X (features) for max phase 4 compounds\nX_mp4_df = dtree_mp4[['mw', 'fsp3', 'n_lipinski_hba', 'n_lipinski_hbd', 'n_rings', 'n_hetero_atoms', 'n_heavy_atoms', 'n_rotatable_bonds', 'n_radical_electrons', 'tpsa', 'qed', 'clogp', 'sas', 'n_aliphatic_carbocycles', 'n_aliphatic_heterocyles', 'n_aliphatic_rings', 'n_aromatic_carbocycles', 'n_aromatic_heterocyles', 'n_aromatic_rings', 'n_saturated_carbocycles', 'n_saturated_heterocyles', 'n_saturated_rings']]\n\n# Convert X_mp4_df to numpy array\nX_mp4 = X_mp4_df.to_numpy()\nX_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\narray([[ 1.98115698e+02,  3.07692308e-01,  2.00000000e+00,\n         2.00000000e+00,  3.00000000e+00,  2.00000000e+00,\n         1.50000000e+01,  0.00000000e+00,  0.00000000e+00,\n         3.89100000e+01,  7.06488238e-01,  2.69580000e+00,\n         2.01471913e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.01092042e+02,  4.00000000e-01,  2.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  3.00000000e+00,\n         1.30000000e+01,  2.00000000e+00,  0.00000000e+00,\n         2.02300000e+01,  6.08112327e-01, -1.01700000e+00,\n         3.18586632e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.35168462e+02,  4.61538462e-01,  4.00000000e+00,\n         3.00000000e+00,  1.00000000e+00,  4.00000000e+00,\n         1.70000000e+01,  6.00000000e+00,  0.00000000e+00,\n         5.83600000e+01,  7.31539693e-01,  1.34040000e+00,\n         1.79168720e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 3.79214744e+02,  4.58333333e-01,  4.00000000e+00,\n         0.00000000e+00,  4.00000000e+00,  4.00000000e+00,\n         2.80000000e+01,  6.00000000e+00,  0.00000000e+00,\n         3.87700000e+01,  7.47461492e-01,  4.36110000e+00,\n         2.67722173e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00],\n       [ 5.86279135e+02,  5.15151515e-01,  1.00000000e+01,\n         1.00000000e+00,  7.00000000e+00,  1.00000000e+01,\n         4.30000000e+01,  4.00000000e+00,  0.00000000e+00,\n         1.14200000e+02,  3.55955569e-01,  4.09110000e+00,\n         3.63256044e+00,  0.00000000e+00,  4.00000000e+00,\n         4.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         2.00000000e+00],\n       [ 5.10461822e+02,  8.00000000e-01,  6.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  6.00000000e+00,\n         3.60000000e+01,  2.10000000e+01,  0.00000000e+00,\n         2.76900000e+01,  2.05822189e-01,  5.45250000e+00,\n         3.25765349e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 1.84066459e+02,  1.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         1.10000000e+01,  4.00000000e+00,  0.00000000e+00,\n         3.55300000e+01,  6.29869319e-01,  2.91400000e+00,\n         3.34514393e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.87152144e+02,  5.29411765e-01,  4.00000000e+00,\n         1.00000000e+00,  4.00000000e+00,  4.00000000e+00,\n         2.10000000e+01,  1.00000000e+00,  0.00000000e+00,\n         4.19300000e+01,  8.00524269e-01,  1.85030000e+00,\n         4.22684283e+00,  1.00000000e+00,  2.00000000e+00,\n         3.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 3.48142697e+02,  3.68421053e-01,  2.00000000e+00,\n         0.00000000e+00,  3.00000000e+00,  4.00000000e+00,\n         2.30000000e+01,  5.00000000e+00,  0.00000000e+00,\n         6.48000000e+00,  7.09785317e-01,  5.44140000e+00,\n         4.22359068e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.34092376e+02,  3.07692308e-01,  2.00000000e+00,\n         2.00000000e+00,  3.00000000e+00,  3.00000000e+00,\n         1.60000000e+01,  0.00000000e+00,  0.00000000e+00,\n         3.89100000e+01,  7.60853221e-01,  3.11760000e+00,\n         3.21871482e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00]])\n```\n:::\n:::\n\n\nSetting up the target for the training set.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Set y (target) for max phase 4 compounds\ny_mp4_df = dtree_mp4[\"pKi\"]\n\n# Convert y_mp4_df to numpy array\ny_mp4 = y_mp4_df.to_numpy()\ny_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\narray([6.82102305, 6.69897   , 6.        , 7.68824614, 7.29670862,\n       4.43179828, 5.22184875, 6.52287875, 4.60730305, 6.99567863])\n```\n:::\n:::\n\n\nThe DecisionTreeRegressor() was fitted on the compounds with max phase 4 as shown below, keeping tree depth at 3 for now to avoid complicating the overall tree graph (the deeper the tree, the more branches - potentially might overfit and create noises for the model).\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nache_tree_mp4 = tree.DecisionTreeRegressor(max_depth=3)\nache_tree_mp4 = ache_tree_mp4.fit(X_mp4, y_mp4)\n```\n:::\n\n\nA simple decision tree plot based on *scikit-learn's* plot_tree() was shown below.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ntree.plot_tree(ache_tree_mp4, feature_names=list(X_mp4_df.columns), filled=True, rounded=True)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```\n[Text(0.5909090909090909, 0.875, 'clogp <= 4.901\\nsquared_error = 1.144\\nsamples = 10\\nvalue = 6.228'),\n Text(0.36363636363636365, 0.625, 'n_aromatic_rings <= 1.5\\nsquared_error = 0.516\\nsamples = 8\\nvalue = 6.656'),\n Text(0.18181818181818182, 0.375, 'n_aromatic_carbocycles <= 0.5\\nsquared_error = 0.33\\nsamples = 4\\nvalue = 6.111'),\n Text(0.09090909090909091, 0.125, 'squared_error = 0.0\\nsamples = 1\\nvalue = 5.222'),\n Text(0.2727272727272727, 0.125, 'squared_error = 0.088\\nsamples = 3\\nvalue = 6.407'),\n Text(0.5454545454545454, 0.375, 'n_lipinski_hba <= 3.0\\nsquared_error = 0.108\\nsamples = 4\\nvalue = 7.2'),\n Text(0.45454545454545453, 0.125, 'squared_error = 0.008\\nsamples = 2\\nvalue = 6.908'),\n Text(0.6363636363636364, 0.125, 'squared_error = 0.038\\nsamples = 2\\nvalue = 7.492'),\n Text(0.8181818181818182, 0.625, 'sas <= 3.741\\nsquared_error = 0.008\\nsamples = 2\\nvalue = 4.52'),\n Text(0.7272727272727273, 0.375, 'squared_error = 0.0\\nsamples = 1\\nvalue = 4.432'),\n Text(0.9090909090909091, 0.375, 'squared_error = -0.0\\nsamples = 1\\nvalue = 4.607')]\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](Model_build_files/figure-html/cell-17-output-2.png){width=689 height=611}\n:::\n:::\n\n\nIt could also be in the text form.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfrom sklearn.tree import export_text\n\ntext = export_text(ache_tree_mp4, feature_names=list(X_mp4_df.columns))\nprint(text)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n|--- clogp <= 4.90\n|   |--- n_aromatic_rings <= 1.50\n|   |   |--- n_aromatic_carbocycles <= 0.50\n|   |   |   |--- value: [5.22]\n|   |   |--- n_aromatic_carbocycles >  0.50\n|   |   |   |--- value: [6.41]\n|   |--- n_aromatic_rings >  1.50\n|   |   |--- n_lipinski_hba <= 3.00\n|   |   |   |--- value: [6.91]\n|   |   |--- n_lipinski_hba >  3.00\n|   |   |   |--- value: [7.49]\n|--- clogp >  4.90\n|   |--- sas <= 3.74\n|   |   |--- value: [4.43]\n|   |--- sas >  3.74\n|   |   |--- value: [4.61]\n\n```\n:::\n:::\n\n\nThe graphviz version, which showed a small variation in graph presentation, seemed to be much larger in size and easier to view.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nimport graphviz\n\ndot_data = tree.export_graphviz(ache_tree_mp4, out_file=None, feature_names=list(X_mp4_df.columns), filled=True, rounded=True, special_characters=False)\n\ngraph = graphviz.Source(dot_data)\ngraph\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n![](Model_build_files/figure-html/cell-19-output-1.svg){}\n:::\n:::\n\n\nThe following was a dtreeviz version of the decision tree, which actually included the regression plots of different molecular features e.g. clogp, n_aromatic rings and n_aliphatic_rings versus the target value of pKi. It seemed a bit more intuitive as these plots clearly showed where the threshold cut-offs would be for each feature (molecular descriptors). The GitHub repository link for dtreeviz could be accessed [here](https://github.com/parrt/dtreeviz).\n\n*Note: it might be smaller in size and not as clear as the graphviz version in the published version of the post, but if the code was run in any IDE, it should be larger to view, and potentailly could be saved as a PDF file*\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nimport dtreeviz \n\nviz = dtreeviz.model(ache_tree_mp4, X_train=X_mp4, y_train=y_mp4, target_name=\"pKi\", feature_names=list(X_mp4_df.columns))\nviz.view()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n![](Model_build_files/figure-html/cell-20-output-1.svg){}\n:::\n:::\n\n\n<br>\n\n###### **Testing and predicting data based on max phase of null compounds**\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Compounds with max phase as \"null\"\ndtree_mp_null = dtree[dtree[\"max_phase\"] == \"null\"]\nprint(dtree_mp_null.shape)\ndtree_mp_null.head() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(466, 25)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>null</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>null</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>null</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CHEMBL102226</td>\n      <td>4.698970</td>\n      <td>null</td>\n      <td>297.152928</td>\n      <td>0.923077</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>18</td>\n      <td>...</td>\n      <td>2.965170</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>CHEMBL103873</td>\n      <td>5.698970</td>\n      <td>null</td>\n      <td>269.121628</td>\n      <td>0.909091</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>16</td>\n      <td>...</td>\n      <td>3.097106</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere were 466 compounds with max phase as \"null\", meaning they were pre-clinical compounds. This was confirmed through the answer from ChEMBL FAQ link, a max phase of \"null\" compound means:\n\n> \"Preclinical (NULL): preclinical compounds with bioactivity data e.g. is a preclinical compound with bioactivity data that has been extracted from scientific literature. However, the sources of drug and clinical candidate drug information in ChEMBL do not show that this compound has reached clinical trials and therefore the max_phase is set to null.\"\n\nAgain, setting up the features for the testing dataset.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nX_mp_test_df = dtree_mp_null[['mw', 'fsp3', 'n_lipinski_hba', 'n_lipinski_hbd', 'n_rings', 'n_hetero_atoms', 'n_heavy_atoms', 'n_rotatable_bonds', 'n_radical_electrons', 'tpsa', 'qed', 'clogp', 'sas', 'n_aliphatic_carbocycles', 'n_aliphatic_heterocyles', 'n_aliphatic_rings', 'n_aromatic_carbocycles', 'n_aromatic_heterocyles', 'n_aromatic_rings', 'n_saturated_carbocycles', 'n_saturated_heterocyles', 'n_saturated_rings']]\n\n# Convert X_mp_test_df to numpy array\nX_mp_test = X_mp_test_df.to_numpy()\nX_mp_test\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\narray([[2.45041526e+02, 4.00000000e-01, 2.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       [2.98123676e+02, 3.88888889e-01, 2.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       [6.94539707e+02, 6.66666667e-01, 8.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       ...,\n       [3.11152144e+02, 3.15789474e-01, 4.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       [3.68096076e+02, 9.23076923e-01, 4.00000000e+00, ...,\n        0.00000000e+00, 2.00000000e+00, 2.00000000e+00],\n       [2.46136828e+02, 5.00000000e-01, 4.00000000e+00, ...,\n        0.00000000e+00, 3.00000000e+00, 3.00000000e+00]])\n```\n:::\n:::\n\n\nThen setting up the target for the testing set.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ny_test = ache_tree_mp4.predict(X_mp_test)\n```\n:::\n\n\nThe trained model, ache_tree_mp4, was used to predict on the testing dataset (max phase of null compounds).\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nache_tree_mp4 = ache_tree_mp4.fit(X_mp_test, y_test)\n```\n:::\n\n\nUsing the graphviz graph version to show the decision tree on the testing set, as the prediction result.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndot_data = tree.export_graphviz(ache_tree_mp4, out_file=None, feature_names=list(X_mp_test_df.columns), filled=True, rounded=True, special_characters=False)\n\ngraph = graphviz.Source(dot_data)\ngraph\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n![](Model_build_files/figure-html/cell-25-output-1.svg){}\n:::\n:::\n\n\n<br>\n\n##### **Discussions**\n\nBecause of the small amount of training data, this might hint at using an ensemble approach in the future (which was actually planned as my future posts), where model averaging would be derived from a bunch of tree models rather than using a single tree model, which was what I did here. The reason I started with one tree was because it was no point in building a multiple-tree model if one had no clue about how one tree was built. To learn as much as possible, I had to dissect the multiple-tree version first to focus on one tree at a time.\n\nOne thing I'd like to mention was that rivastigmine was not included in the training dataset because it was actually not a pure AChE inhibitor (as it was also a butyrylcholinesterase (BChE) inhibitor), since my focus was purely on AChE at this time, this particular drug was unfortunately excluded. However, I did make sure the other two drugs mentioned previously (donepezil and galantamine) were included in the training dataset. One possible thing to do in the future if I want to improve this was to add BChE as another protein target and perhaps add this as an additional dataset towards the model.\n\nAs described in the subsection of \"Estimate experimental errors\", there were experimental errors of 3-fold, 5-fold and 10-fold estimated based on the provided pKi data. With the prediction model used in this post, the estimated experimental errors would need to be taken into consideration, particularly at the time when the model was being investigated during the model evaluation and validation step (however due to the length of series 2.1 posts, I decided not to add this step yet, but would try to look at this later in the multiple tree model series if this applies).\n\nA bit about the last decision tree plot, tentatively clogp (calculated partition coefficient) might be the crucial molecular feature in deciding whether a molecule might be closer to being an AChE inhibitor. Other important features also included the number of aromatic rings, solvent accessible surface area, number of heterogeneous atoms and so on.\n\nSince the type of AChE inhibitors was not the focus of this series, I won't go into details about which value of pKi or Ki would lead to the ideal AChE inhibitor (the well-known Cheng-Prusoff equation [@Cheng1973] might also lead to many discussions about Ki and IC50 values). This is because there are at least two types of AChE inhibitors available - reversible and irreversible [@Colovic2013]. Donepezil, galantamine and rivastigmine mentioned previously are the commonly known reversible AChE inhibitors. The irreversible type, as the name suggested, is usually used as insecticides or nerve agents. Another reason is that I didn't go into details checking all of the identities for the 10 max phase 4 compounds used in the training set, as I only really made sure that donepezil and galantamine were included in the 10 molecules. If I were to re-model again purely on reversible AChE inhibitors targeting dementia or Alzheimer's disease, I think I had to be quite sure of what I was training the model with, i.e. excluding irreversible AChE inhibitors from the training set.\n\nHowever, if our aim was to only find novel AChE inhibitors in a general manner, one of the ways to check post-model building would be to re-run the dataframe again on compounds with max phase as null, including the molecular feature names to find out which compounds were at the predicted threshold cut-off values to see if their corresponding pKi values (note: even these preclinical compounds had Ki values extracted from literature sources etc.) would match the predicted ones. One caveat of this method was that there might be pre-existing experimental errors in all the obtained and recorded Ki values, so this might not confirm that the model was truly a good reflection of the real-life scenario. Therefore, at most, this would probably add a very small value during the model evaluation phase.\n\nThe best way would be to test all of these compounds in the same experimental set-ups, through same experimental steps, and in the same laboratory to find out their respective Ki (or pKi) values. However, this was most likely not very feasible due to various real-life restrictions (the availability of financial and staffing resources). The most likely outcome might be to choose a selected group of compound candidates with the highest possibilities to proceed in the drug discovery pipeline based on past experimental, ML and clinical experiences, and then test them in the ways mentioned here.\n\nI also came across a [blog post](https://www.valencekjell.com/posts/2022-09-14-prediction-intervals/) about calculating the prediction intervals of ML prediction models (which mentioned the [MAPIE package](https://github.com/scikit-learn-contrib/MAPIE)), but I didn't quite get time to look into this package yet, but from what I have read in its repository link, it potentially could be quite useful for classification, regression and time-series models during the model evaluation step.\n\n<br>\n\n##### **Final words**\n\nI didn't think a definite conclusion could be drawn here, as this was only purely from one single decision tree, so I have named this last part as \"final words\", as I felt if I didn't stop here, this post or series 2.1 could go on forever or as long it could go. The main thing here was to fully understand how one single decision tree was constructed based on hopefully reasonable-ish data (still not the best I reckon as I could not rule out all the noises from the data), and then to view the tree visually in different styles of plots, and understand how this was a white-box ML approach with clear features or descriptions shown to trace where the tree would branch off to which nodes to reach different final outcomes or targets.\n\nThe most important thing was that this series was really a preamble before the multiple-tree models e.g. random forest and boosted trees, as I have bravely planned to do a series of posts on tree models, so that might take a while, slowly but hopefully surely.\n\n<br>\n\n##### **Acknowledgements**\n\nI'd like to thank all the authors of the open-source packages used in this series 2.1 posts. I'd also like to thank all the authors of all the blog posts mentioned in this series as well as I've learnt a lot from them too.\n\n",
    "supporting": [
      "Model_build_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}