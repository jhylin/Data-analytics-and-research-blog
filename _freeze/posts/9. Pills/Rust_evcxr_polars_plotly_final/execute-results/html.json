{
  "hash": "2a64ecdaa1792fae6b5ac7f07526eb98",
  "result": {
    "markdown": "---\ntitle: Pills dataset - Part 3\nsubtitle: Using Rust for data visualisation\nauthor: Jennifer HY Lin\ndate: 2023-2-13\ndraft: true\nkeep-ipynb: true\ncategories:\n  - Data analytics projects\n  - Rust\n  - Polars\n  - Plotly\n  - Evcxr\n  - Jupyter\n---\n\n###### **Background**\n\nThe aim of this final part (part 3) for the pills dataset was really for me to start using Rust in a beginner-friendly way. Overall, these 3 parts to the pills dataset project formulated an overview of how to use Polars in Python (mainly), Pandas in Python (smaller section) and Rust (even little less as this is new to me) with Plotly. Over the time, I find myself learning the best by doing and applying, rather than only reading and thinking, so I've got myself started in this very new programming language, Rust, to get some familiarisations. I anticipate that I'll still work with Python and R mainly in the near future, so that I'll at least be proficient in at least one to two programming languages at the very minimum.\n\nMy very initial idea was to integrate Rust-Polars, Plotly in Rust (Plotly.rs) and Jupyter-Evcxr together, and see if I could manage to get a simple data visualisation from a small dataset. That was all, and I was actually quite stuck at the step of importing one of the columns as x-axis variables in Rust-Polars to Plotly.rs. I figured it might possibly be due to my very lack-of-knowledge and lack-of-familiarities with Rust (I do need to continue reading the Rust programming language book), Polars (I'm better with Python-Polars actually), Plotly.rs and also Evcxr. Another possibility could be that Plotly.rs mainly had ndarray support, and Polars was not mentioned explicitly so my guess was that these two might not be flowing very well together (hoping in the future there might be some Polars support in Plotly.rs?). Also, Polars itself was constantly evolving and growing as well.\n\nSo I've decided to leave things as how it would be for now, before I delayed this post any further, if I happened to figure out how to do this in the future then I'll come back to update this last part of the project. While I was tackling this little issue mentioned above, somehow I've managed to deconstruct Polars dataframe in Rust in Evcxr. So I'll show a little bit about it below. One slightly good news that came out from all of this, was that I've managed to import the other column as y-axis variables, which contained numbers, without problems. I've also figured out the Rust codes to convert Series/ChunkedArray to vectors in Rust IDEs (e.g. VS Code, and quite a few others). So I did learn a few things while completing this post, and hoped I could grow further on this later.\n\n**Note: I've published all Rust codes as print-only since it's not possible to run them in RStudio IDE (not supported). So all Rust codes were run on Jupyter Lab, with code outputs being captured as screenshots which would be shown as photos in this post. I'll try to include a link to the full .ipynb file in my GitHub repository for this portfolio blog, in case anyone wanted to see the .ipynb version.**\n\n<br>\n\n###### **Import dependencies**\n\nThese dependencies were known as crates in the world of Rust. I'd also like to think of them as libraries or packages we would install or import in Python and R. So this step was necessary before I even started anything decent in Rust. Similar things would also apply to Rust IDEs as well since I've played a little bit in VS Code previously.\n\n```{{rust}}\n// Set up required dependencies\n:dep ndarray = \"0.15.6\"\n```\n\n```{{rust}}\n:dep plotly = { version = \">=0.8.0\", features = [\"plotly_ndarray\"]}\n```\n\n```{{rust}}\n// May take a few minutes to load polars crate (depending on your machine specs)\n:dep polars = { version = \">=0.26.0\", features = [\"lazy\", \"csv-file\", \"strings\", \"dtype-duration\", \"dtype-categorical\", \"concat_str\", \"rank\", \"lazy_regex\", \"ndarray\"]}\n```\n\n```{{rust}}\n:dep itertools = {version = \"0.9.0\"}\n```\n\n<br>\n\n###### **Import external crates**\n\n```{{rust}}\n// Import external crates needed\nextern crate ndarray;\nextern crate plotly;\nextern crate polars;\n```\n\n<br>\n\n###### **Specify imports or modules required**\n\n```{{rust}}\nuse ndarray::prelude::*;\nuse polars::prelude::*;\nuse plotly::common::{\n    ColorScale, ColorScalePalette, DashType, Fill, Font, Line, LineShape, Marker, Mode, Title,\n};\nuse plotly::layout::{Axis, BarMode, Layout, Legend, TicksDirection};\nuse plotly::{Plot, Scatter, Bar};\nuse itertools::Itertools;\n```\n\n##### **Reading csv file**\n\nHere, I've imported the .csv file saved from part 2.\n\n```{{rust}}\n// Reading .csv file\nlet df = CsvReader::from_path(\"ace_para_count.csv\").unwrap().finish().unwrap();\n```\n\n```{{rust}}\ndf\n```\n\n![Photo by author](rs-pl_df.jpg){fig-align=\"left\"}\n\n<br>\n\n###### **Converting columns into ndarrays**\n\nI've tested plotting in Plotly.rs by a few trials and errors at the beginning, but luckily I've spotted the ndarray support from the [Plotly.rs book](https://igiagkiozis.github.io/plotly/content/plotly_rs.html) soon enough to figure out that I could convert the \"count\" column into a ndarray first, which was shown in the code below.\n\n```{{rust}}\n// Switch Polars dataframe into 2D array\n// Ensure \"ndarray\" was added as one of the features for polars under dependencies\n\n/*Example from Polars documentation:\nlet df = DataFrame::new(vec![a, b]).unwrap();\nlet ndarray = df.to_ndarray::<Float64Type>().unwrap();\nprintln!(\"{:?}\", ndarray);\n*/\n\n//Note: ndarray for numbers only, not strings, so only count column was converted\nlet ndarray = df.to_ndarray::<Float64Type>().unwrap();\nprintln!(\"{:?}\", ndarray);\n```\n\n![Photo by author](ndarray.jpg){fig-align=\"left\"}\n\n<br>\n\n###### **Deconstructing Polars dataframe in Rust**\n\nSo because to_ndarray was only for numerics and not strings, I ran into a problem trying to figure out how to best import this other \"Colour\" column into Plotly.rs. This led to my little convoluted journey to work with Polars dataframe in Rust, trying to see if I could convert the \"Colour\" column into a vector, as I've tried plotting with the \"count\" column in ndarray as a vector with success. I didn't quite achieve my goal but I've managed to break down the Polars dataframe into different formats.\n\n```{{rust}}\n// Select specific column or series by position\nlet Colours = df[0].clone();\n\n//Alternative way to select specific column or series by name\n//let u = df.select_series(&[\"Colour\"]);\n```\n\n```{{rust}}\nColours\n```\n\n```{{rust}}\n// Print out items in column by applying an iterator to it\nprintln!(\"{}\", &Colours.iter().format(\"\\n\"));\n```\n\nThere was a mention of storing series (column) in a vec as Vec<Series> in Polars' documentation, which I've tried to plot in Plotly.rs and unfortunately it failed to recognise it. Then I was searching on StackOverflow for similar questions, then I found something relating to what I wanted to do form Polars docs as shown below.\n\n// From: https://docs.rs/polars/latest/polars/docs/eager/index.html#series //Extracting data: //To be able to extract data out of Series, //either by iterating over them or converting them to other datatypes like a Vec<T>, //we first need to downcast them to a ChunkedArray<T>. //This is needed because we don't know the data type that is held by the Series.\n\n/*use polars::prelude::*; use polars::df;\n\n//fn extract_data() -\\> PolarsResult\\<()\\> { let df = df! \\[ \"a\" =\\> \\[None, Some(1.0f32), Some(2.0)\\], \"str\" =\\> \\[\"foo\", \"bar\", \"ham\"\\]\\]?;\n\n    // first extract ChunkedArray to get the inner type.\n\nlet ca = df.column(\"a\")?.f32()?;\n\n    // Then convert to vec\n\nlet \\_to_vec: Vec\\<Option<f32>\\> = Vec::from(ca);\n\n    // ***We can also do this with iterators***\n\nlet ca = df.column(\"str\")?.utf8()?; let \\_to_vec: Vec\\<Option\\<&str\\>\\> = ca.into_iter().collect(); let \\_to_vec_no_options: Vec\\<&str\\> = ca.into_no_null_iter().collect();\n\n    //Ok(())\n\n//}\n\nIt took me quite a long time to just downcast series into chunkedarray, but somehow I've managed to figure the code myself below.\n\n```{{rust}}\n// Somehow worked out how to convert series to chunkedarray by accident!\nprintln!(\"{:?}\", Colours.utf8().unwrap());\n```\n\nThen I moved onto trying to figure out how to convert or place a chunkedarray into a vector, with the closest answer shown below. However, bear in mind that these Rust codes were for Rust IDEs, and not for Evcxr, so this added slightly more complexities to what I was trying to do (perhaps I should just stick with Rust IDEs in the future...).\n\n/\\*From StackOverflow - How to get a Vec from polars Series or ChunkedArray?\n\nYou can collect the values into a Vec.\n\nuse polars::prelude::\\*;\n\nfn main() -\\> Result\\<()\\> { let s = Series::new(\"a\", 0..10i32);\n\n    let as_vec: Vec<Option<i32>> = s.i32()?.into_iter().collect();\n\n    // if we are certain we don't have missing values\n    let as_vec: Vec<i32> = s.i32()?.into_no_null_iter().collect();\n    Ok(())\n\n} \\*/\n\n/*fn iter_forward(ca: &Float32Chunked) { ca.into_iter() .for_each(\\|opt_v\\| println!(\"{:?}\", opt_v)) }* /\n\nI then tested using the iterator method, and came up with another line of code as shown below, which listed the colours in the \"Colour\" column.\n\n```{{rust}}\nColours.utf8().unwrap().into_iter().for_each(|array|println!(\"{:?}\", array));\n```\n\nI then found out, randomly, how to slice strings for ChunkedArrays in Polars.\n\n```{{rust}}\n// Another method to use if needing to slice strings\nlet x = Colours.utf8().unwrap().str_slice(0, Some(15));\nx\n```\n\nLastly, before we got too carried away, I just wanted to show the method shown from Polars doc that this was the way to select a specific column from Polars dataframe.\n\n```{{rust}}\n// This was the Polars' way to select a column in a dataframe\nlet ca = df.clone().lazy().select([cols([\"Colour\"])]).collect()?;\nca\n```\n\n<br>\n\n###### **Plotting Polars dataframe in Plotly.rs**\n\nFor the x-axis, eventually, I reverted for manual input due to the issue mentioned in the background section. So the colours from the \"Colour\" column were stored in a vector set up manually, rather than coming directly from the dataframe. While searching for answers, I've also learnt several other tricks, although not directly solving the problem. For the y-axis, the ndarray for the \"count\" column was converted into a vector first before being fed into the trace (graph module), and thankfully it worked nicely.\n\n```{{rust}}\n// MANUAL Sample method:\n// Use vec! macro to create new vectors to hold x variables (words as strings) for plotting\n// Manually input the colour names (as ndarray is only for numbers)\nlet x = vec![\"RED\", \"ORANGE;BROWN\", \"YELLOW;WHITE\", \"ORANGE\", \"WHITE\", \"BLUE\"];\n\n// Plot using ndarray, which is supported by Plotly.rs (?Polars not supported yet)\n// Convert ndarray (holding counts as y variables) into vector for plotting\nlet y = ndarray.column(1).to_vec();\n\n// Use trace as a graph module,\n// choose which type of plots is needed with x & y variables called\n// Graph options e.g. Scatter, Line or Bar\nlet trace = Scatter::new(x, y);\n\n// Set plot variable as mutable and initiate a plot\nlet mut plot = Plot::new();\n// Add trace (graph) into the plot variable\nplot.add_trace(trace);\n\n// Specify the specs for plot\nlet layout = Layout::new()\n    // Choose height of graph\n    .height(500)\n    // Name x-axis\n    .x_axis(Axis::new().title(Title::new(\"Colours\")))\n    // Name y-axis\n    .y_axis(Axis::new().title(Title::new(\"Count\")))\n    // Add title of graph\n    .title(Title::new(\"Frequency of colours in acetaminophen (paracetamol) oral dosage forms\"));\n\n// Set the layout of the plot\nplot.set_layout(layout);\n\n// Display the plot in Jupyter Lab format \n// note for Jupyter Notebook: use plot.notebook_display();\nplot.lab_display();\nformat!(\"EVCXR_BEGIN_CONTENT application/vnd.plotly.v1+json\\n{}\\nEVCXR_END_CONTENT\", plot.to_json())\n```\n\n<br>\n\n##### **Conclusion**\n\nThis last part was the hardest for me out of all 3 parts of pills dataset, as Rust was completely new to me, but it was interesting to be able to get a feel of how this programming language was applied in Polars dataframe library. Also, I'd just like to get a taste of using Rust in data visualisations. All that I wanted to show was that there were a variety of data tools that could be utilised, and knowing your tools of trade would be the most critical when working on data projects as certain tools would only be best suited for certain tasks and scenarios.\n\n",
    "supporting": [
      "Rust_evcxr_polars_plotly_final_files"
    ],
    "filters": [],
    "includes": {}
  }
}