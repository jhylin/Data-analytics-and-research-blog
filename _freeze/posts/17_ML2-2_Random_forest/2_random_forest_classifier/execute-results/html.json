{
  "hash": "7eeca4c9475771491fd7e205e8470cd8",
  "result": {
    "markdown": "---\ntitle: Random forest classifier\nsubtitle: Series 2.2.1 - more on imbalanced dataset\nauthor: Jennifer HY Lin\ndate: 2024-1-7\ndraft: true\ncategories:\n  - Machine learning projects\n  - Tree models\n  - Pandas\n  - Scikit-learn\n  - ChEMBL database\n  - Python\nformat: html\nbibliography: references.bib\n---\n\n##### **Brief introduction**\n\nThis post was really just an addition towards the last random forest (RF) post (machine learning (ML) series 2.2). It was mainly inspired by this paper [@esposito2021] from [rinikerlab](https://github.com/rinikerlab)[^1]. It was also nice to complete the RF series by adding a RF classifier model since last post was only on a regressor. Also, knowing that imbalanced datasets were common in drug discovery projects, learning new strategies to deal with them was also extremely useful, and while I was working on this post, I also came across a few other packages that I haven't used before so I've included them all down below.\n\n[^1]: h/t: Greg Landrum for his comment on Mastodon for the last RF post (which led to this follow-up post)\n\n<br>\n\n##### **Overview of post (packages/scripts used)**\n\n-   Data source using *chembl_downloader*\n-   Minor data preprocessing using own little script of random_forest.py (avoid repeating code) and also a SMILES checker from *scikit_mol*\n- *scikit-learn*'s RandomForestClassifier()\n-   Dealing with imbalanced dataset in RF classifiers by using *ghostml*\n\n<br>\n\n##### **Importing libraries**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport chembl_downloader\nfrom chembl_downloader import latest, queries, query\nfrom rdkit.Chem import Descriptors\nimport datamol as dm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import RocCurveDisplay, roc_curve\nfrom scikit_mol.utilities import CheckSmilesSanitazion\nimport ghostml\n```\n:::\n\n\n<br>\n\n##### **Data retrieval using chembl_downloader**\n\nchembl_downloader package was something I wanted to try a while back. I've tried manual download and chembl_webresource_client previously, and they were probably not the best strategies for data reproducibility. The idea of chembl_downloader was to generate a ChEMBL data source that could be fully reproducible. It involved some SQL at the beginning to specify the exact type of data needed, so some SQL knowledge were required. Other uses for this package were elaborated much more nicely in its GitHub repository at https://github.com/cthoyt/chembl-downloader. Overall, I think it was very useful in a Jupyter notebook or equivalent environments to document ChEMBL-sourced data used.\n\nSome reference notebooks I've referred to when I worked on this post that used chembl_downloader (more available in its repository):\n\n-   [https://github.com/cthoyt/chembl-downloader/blob/main/notebooks/drug-indications.ipynb](https://github.com/cthoyt/chembl-downloader/blob/main/notebooks/drug-indications.ipynb)\n\n-   [https://github.com/PatWalters/practical_cheminformatics_tutorials/blob/1f7c61f83eec81081ef2605ac70440bf1940d914/misc/working_with_ChEMBL_drug_data.ipynb#L80](https://github.com/PatWalters/practical_cheminformatics_tutorials/blob/1f7c61f83eec81081ef2605ac70440bf1940d914/misc/working_with_ChEMBL_drug_data.ipynb#L80)\n\nWhat I did was shown below.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Show the latest version of ChEMBL used\nlatest_version = latest()\nprint(f\"The latest ChEMBL version is: {latest_version}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe latest ChEMBL version is: 33\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Query chembl_downloader to show SQL required to extract ChEMBL data for a specific protein target\n# e.g. target_chembl_id for AChE: CHEMBL220\nqueries.markdown(queries.get_target_sql(target_id=\"CHEMBL220\", target_type=\"SINGLE PROTEIN\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```sql\nSELECT\n    ASSAYS.chembl_id              AS assay_chembl_id,\n    TARGET_DICTIONARY.target_type,\n    TARGET_DICTIONARY.tax_id,\n    COMPOUND_STRUCTURES.canonical_smiles,\n    MOLECULE_DICTIONARY.chembl_id AS molecule_chembl_id,\n    ACTIVITIES.standard_type,\n    ACTIVITIES.pchembl_value\nFROM TARGET_DICTIONARY\n     JOIN ASSAYS ON TARGET_DICTIONARY.tid == ASSAYS.tid\n     JOIN ACTIVITIES ON ASSAYS.assay_id == ACTIVITIES.assay_id\n     JOIN MOLECULE_DICTIONARY ON MOLECULE_DICTIONARY.molregno == ACTIVITIES.molregno\n     JOIN COMPOUND_STRUCTURES ON MOLECULE_DICTIONARY.molregno == COMPOUND_STRUCTURES.molregno\nWHERE TARGET_DICTIONARY.chembl_id = 'CHEMBL220'\n    AND ACTIVITIES.pchembl_value IS NOT NULL\n    AND TARGET_DICTIONARY.target_type = 'SINGLE PROTEIN'\n\n\n\n```\n:::\n:::\n\n\nThe code below took several minutes to run.\n\n``` {{python}}\n# Following data download worked (4.41GB for SQL query below)\n\n# Added an extra line - MOLECULE_DICTIONARY.max_phase into sql to show max phases for compounds targeting AChE\n\nsql = \"\"\"\nSELECT\n    ASSAYS.chembl_id              AS assay_chembl_id,\n    TARGET_DICTIONARY.target_type,\n    TARGET_DICTIONARY.tax_id,\n    TARGET_DICTIONARY.chembl_id,\n    COMPOUND_STRUCTURES.canonical_smiles,\n    MOLECULE_DICTIONARY.chembl_id AS molecule_chembl_id,\n    MOLECULE_DICTIONARY.max_phase,\n    ACTIVITIES.standard_type,\n    ACTIVITIES.pchembl_value\nFROM TARGET_DICTIONARY\n     JOIN ASSAYS ON TARGET_DICTIONARY.tid == ASSAYS.tid\n     JOIN ACTIVITIES ON ASSAYS.assay_id == ACTIVITIES.assay_id\n     JOIN MOLECULE_DICTIONARY ON MOLECULE_DICTIONARY.molregno == ACTIVITIES.molregno\n     JOIN COMPOUND_STRUCTURES ON MOLECULE_DICTIONARY.molregno == COMPOUND_STRUCTURES.molregno\nWHERE TARGET_DICTIONARY.chembl_id = 'CHEMBL220'\n    AND ACTIVITIES.pchembl_value IS NOT NULL\n    AND TARGET_DICTIONARY.target_type = 'SINGLE PROTEIN'\n\"\"\"\n\ndf = chembl_downloader.query(sql)\n```\n\n```{{python}}\n# Save df as .csv file\ndf.to_csv(\"chembl_d_ache\", sep=\",\", index=False)\n```\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Load dataset from saved .csv file\ndf_ache = pd.read_csv(\"chembl_d_ache\")\nprint(df_ache.shape)\ndf_ache.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(7144, 9)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>assay_chembl_id</th>\n      <th>target_type</th>\n      <th>tax_id</th>\n      <th>chembl_id</th>\n      <th>canonical_smiles</th>\n      <th>molecule_chembl_id</th>\n      <th>max_phase</th>\n      <th>standard_type</th>\n      <th>pchembl_value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL1909212</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n      <td>CHEMBL411</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>4.59</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL1003053</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>CHEMBL416</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>4.27</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL2406149</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>CHEMBL416</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>6.12</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL1909212</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>CC1(COc2ccc(CC3SC(=O)NC3=O)cc2)CCCCC1</td>\n      <td>CHEMBL7002</td>\n      <td>-1.0</td>\n      <td>IC50</td>\n      <td>4.82</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL3071788</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>O=c1cc(-c2ccc(O)cc2)oc2cc(O)cc(O)c12</td>\n      <td>CHEMBL28</td>\n      <td>NaN</td>\n      <td>IC50</td>\n      <td>7.92</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Some data cleaning**\n\nMinor cleaning and preprocessing were done for this post only, as the focus was more on dealing with imbalanced datasets in RF classifier. I've also attempted to use a similar dataset as last post since I've used a different way to retrieve ChEMBL data this time (via chembl_downloader), so the datasets used in the RF series might not be exactly the same.\n\n<br>\n\n###### **mol_prep.py**\n\nI've more or less accumulated small pieces of code over time, and I've decided to compile them into a Python script. The idea was to remove most function code in the post to avoid repeating them all the time, as they've been used frequently in the last few posts. The script would be saved into the blog project repository or under the RF repository. It would still be considered as a \"work-in-progress\" script only since I kind of still want to work on it further in the future.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n## Trial own mol_prep.py script\nfrom mol_prep import preprocess, rdkit_2d_descriptors\n```\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n## Preprocess/standardise molecules\n# Running preprocess function \ndf_ache = df_ache.copy()\ndf_prep = df_ache.apply(preprocess, axis = 1)\ndf_prep.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>assay_chembl_id</th>\n      <th>target_type</th>\n      <th>tax_id</th>\n      <th>chembl_id</th>\n      <th>canonical_smiles</th>\n      <th>molecule_chembl_id</th>\n      <th>max_phase</th>\n      <th>standard_type</th>\n      <th>pchembl_value</th>\n      <th>rdkit_mol</th>\n      <th>standard_smiles</th>\n      <th>selfies</th>\n      <th>inchi</th>\n      <th>inchikey</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL1909212</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n      <td>CHEMBL411</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>4.59</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x1309ba420&gt;</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n      <td>[C][C][/C][=Branch1][P][=C][Branch1][Ring1][/C...</td>\n      <td>InChI=1S/C18H20O2/c1-3-17(13-5-9-15(19)10-6-13...</td>\n      <td>RGLYKWWBQGJZGM-ISLYRVAYSA-N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL1003053</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>CHEMBL416</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>4.27</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x1309ba490&gt;</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>[C][O][C][=C][O][C][=C][C][Ring1][Branch1][=C]...</td>\n      <td>InChI=1S/C12H8O4/c1-14-12-10-8(4-5-15-10)6-7-2...</td>\n      <td>QXKHYNVANLEOEG-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL2406149</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>CHEMBL416</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>6.12</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x1309ba500&gt;</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>[C][O][C][=C][O][C][=C][C][Ring1][Branch1][=C]...</td>\n      <td>InChI=1S/C12H8O4/c1-14-12-10-8(4-5-15-10)6-7-2...</td>\n      <td>QXKHYNVANLEOEG-UHFFFAOYSA-N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n###### **scikit_mol**\n\nscikit_mol was a package originated from 2022 RDKit UGM hackathon. This [blog post](https://www.cheminformania.com/scikit-mol-easy-embedding-of-rdkit-into-scikit-learn/) elaborated further on its functions and uses in machine learning. For this post I've only used it for a very small portion, mainly to check for missing SMILES or errors in SMILES (kind of like double checking whether my preprocess function code worked as expected). It could be integrated with *scikit-learn*'s pipeline method on multiple estimators. Its GitHub Repository link: [https://github.com/EBjerrum/scikit-mol](https://github.com/EBjerrum/scikit-mol)\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Quick simple way to check for missing SMILES\nprint(f'Dataset contains {df_prep.standard_smiles.isna().sum()} unparsable mols')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataset contains 0 unparsable mols\n```\n:::\n:::\n\n\nIt appeared to have no unparsable (missing) molecules.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Checking for invalid SMILES using scikit_mol\nsmileschecker = CheckSmilesSanitazion()\n\nsmileschecker.sanitize(list(df_prep.standard_smiles))\n\n# Showing SMILES errors\nsmileschecker.errors\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt also confirmed that there were no errors in SMILES.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n## Generate RDKit2D descriptors/fingerprints\n# Running rdkit_2d_descriptors function\ndf_2d = rdkit_2d_descriptors(df_prep)\ndf_2d.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>ExactMolWt</th>\n      <th>NumValenceElectrons</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9.41068</td>\n      <td>9.41068</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.1000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>268.146330</td>\n      <td>104</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>216.042259</td>\n      <td>80</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>216.042259</td>\n      <td>80</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 210 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Merge dataframes df_prep & df_2d via index\ndf_merge = pd.merge(\n    df_prep[[\"max_phase\", \"molecule_chembl_id\"]],\n    df_2d,\n    left_index=True,\n    right_index=True\n)\nprint(df_merge.shape)\ndf_merge.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(7144, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>CHEMBL411</td>\n      <td>9.41068</td>\n      <td>9.41068</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.1000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\nA different spreads of max phases were shown this time as the SQL query mainly used IC50, whereas last post was strictly limited to Ki via ChEMBL web resource client. Other likely reason was that in the decision tree series, I've attempted data preprocessing at a larger scale (which eliminated some data). So, it appeared that there were more max phase 4 compounds here than last time (Note: null compounds were not shown in the value counts as it was labelled as \"NaN\", but it should be the largest max phase portion in the data).\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Find out counts of each max phase\ndf_merge.value_counts(\"max_phase\")\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\nmax_phase\n 4.0    618\n-1.0     69\n 2.0     29\n 3.0     10\n 1.0      7\n 0.5      1\nName: count, dtype: int64\n```\n:::\n:::\n\n\nI then tried searching for the chembl_id of the 10 max phase 4 compounds used in the last post in the dataframe (df_merge).\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Previously used 10 max phase 4 compounds\n# donepezil = CHEMBL502 \n# galantamine = CHEMBL659\nlist_mp4 = [\"CHEMBL95\", \"CHEMBL1128\", \"CHEMBL640\", \"CHEMBL502\", \"CHEMBL481\", \"CHEMBL360055\", \"CHEMBL1025\", \"CHEMBL659\", \"CHEMBL1200970\", \"CHEMBL1677\"]\n\n# Search for compounds in list_mp4 within df_merge's \"molecule_chembl_id\" column\n# using Series.isin\ndf_prev = df_merge.loc[df_merge[\"molecule_chembl_id\"].isin(list_mp4)]\ndf_prev\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>548.385</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>548.385</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>3272</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3273</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3274</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3275</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3276</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>439 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere were many duplicates of compounds.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Some compounds with duplicates\nprint(df_prev.shape)\ndf_prev.value_counts(\"molecule_chembl_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(439, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nmolecule_chembl_id\nCHEMBL95         182\nCHEMBL502        143\nCHEMBL659         76\nCHEMBL1128        12\nCHEMBL1677        10\nCHEMBL1200970      6\nCHEMBL640          4\nCHEMBL1025         3\nCHEMBL481          2\nCHEMBL360055       1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Dropping duplicated compound via chembl IDs in the main df\ndf_merge_new = df_merge.drop_duplicates(subset=[\"molecule_chembl_id\"], keep=\"first\")\nprint(df_merge_new.shape)\ndf_merge_new.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5357, 212)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>CHEMBL411</td>\n      <td>9.410680</td>\n      <td>9.410680</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.100000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.173100</td>\n      <td>11.173100</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.062500</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.0</td>\n      <td>CHEMBL7002</td>\n      <td>11.591481</td>\n      <td>11.591481</td>\n      <td>0.189306</td>\n      <td>-0.309798</td>\n      <td>0.886859</td>\n      <td>23.608696</td>\n      <td>333.453</td>\n      <td>310.269</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>260.160</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4.0</td>\n      <td>CHEMBL41</td>\n      <td>12.564531</td>\n      <td>12.564531</td>\n      <td>0.203346</td>\n      <td>-4.329869</td>\n      <td>0.851796</td>\n      <td>12.909091</td>\n      <td>309.331</td>\n      <td>291.187</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Previously used 10 max phase 4 compounds were found in df_merge_new\ndf_mp4 = df_merge_new.loc[df_merge_new[\"molecule_chembl_id\"].isin(list_mp4)]\ndf_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>548.385</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>4.0</td>\n      <td>CHEMBL502</td>\n      <td>12.936933</td>\n      <td>12.936933</td>\n      <td>0.108783</td>\n      <td>0.108783</td>\n      <td>0.747461</td>\n      <td>20.214286</td>\n      <td>379.500</td>\n      <td>350.268</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>508</th>\n      <td>4.0</td>\n      <td>CHEMBL640</td>\n      <td>11.743677</td>\n      <td>11.743677</td>\n      <td>0.044300</td>\n      <td>-0.044300</td>\n      <td>0.731540</td>\n      <td>10.529412</td>\n      <td>235.331</td>\n      <td>214.163</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>512</th>\n      <td>4.0</td>\n      <td>CHEMBL659</td>\n      <td>9.972866</td>\n      <td>9.972866</td>\n      <td>0.008380</td>\n      <td>-0.411699</td>\n      <td>0.800524</td>\n      <td>33.857143</td>\n      <td>287.359</td>\n      <td>266.191</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1013</th>\n      <td>4.0</td>\n      <td>CHEMBL1025</td>\n      <td>12.703056</td>\n      <td>12.703056</td>\n      <td>0.426312</td>\n      <td>-4.304784</td>\n      <td>0.629869</td>\n      <td>13.000000</td>\n      <td>184.147</td>\n      <td>170.035</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1345</th>\n      <td>4.0</td>\n      <td>CHEMBL1128</td>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.608112</td>\n      <td>10.692308</td>\n      <td>201.697</td>\n      <td>185.569</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2028</th>\n      <td>4.0</td>\n      <td>CHEMBL360055</td>\n      <td>6.476818</td>\n      <td>6.476818</td>\n      <td>0.656759</td>\n      <td>0.656759</td>\n      <td>0.205822</td>\n      <td>12.583333</td>\n      <td>510.828</td>\n      <td>450.348</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2725</th>\n      <td>4.0</td>\n      <td>CHEMBL1677</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.760853</td>\n      <td>14.250000</td>\n      <td>234.730</td>\n      <td>219.610</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# note: compounds with max phase 0 not shown in the count\ndf_merge_new.value_counts(\"max_phase\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\nmax_phase\n 4.0    55\n-1.0    26\n 2.0     8\n 3.0     7\n 1.0     4\n 0.5     1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n<br>\n\n##### **Model building**\n\nThe aim of this post was to model and classify the max phases of ChEMBL small molecules, i.e. whether the compounds in the testing set are in max phase 4 or not. The target was max_phase and features to be used were the various RDKit 2D descriptors (RDKit2D).\n\nThe steps I've taken in model building were shown as follow:\n\n1.  Re-labelled max phases as binary labels (e.g. max phase null as 0, max phase 4 as 1)\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Re-label max phase NaN as 0\ndf_merge_new = df_merge_new.fillna(0)\ndf_merge_new\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>CHEMBL411</td>\n      <td>9.410680</td>\n      <td>9.410680</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.100000</td>\n      <td>268.356000</td>\n      <td>248.196000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.173100</td>\n      <td>11.173100</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.062500</td>\n      <td>216.192000</td>\n      <td>208.128000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.0</td>\n      <td>CHEMBL7002</td>\n      <td>11.591481</td>\n      <td>11.591481</td>\n      <td>0.189306</td>\n      <td>-0.309798</td>\n      <td>0.886859</td>\n      <td>23.608696</td>\n      <td>333.453000</td>\n      <td>310.269000</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240000</td>\n      <td>260.160000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4.0</td>\n      <td>CHEMBL41</td>\n      <td>12.564531</td>\n      <td>12.564531</td>\n      <td>0.203346</td>\n      <td>-4.329869</td>\n      <td>0.851796</td>\n      <td>12.909091</td>\n      <td>309.331000</td>\n      <td>291.187000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>7139</th>\n      <td>0.0</td>\n      <td>CHEMBL5220560</td>\n      <td>11.547942</td>\n      <td>11.547942</td>\n      <td>0.062169</td>\n      <td>-0.810432</td>\n      <td>0.750636</td>\n      <td>12.818182</td>\n      <td>310.394000</td>\n      <td>284.186000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7140</th>\n      <td>0.0</td>\n      <td>CHEMBL5220695</td>\n      <td>12.354746</td>\n      <td>12.354746</td>\n      <td>0.126418</td>\n      <td>-0.615512</td>\n      <td>0.522384</td>\n      <td>15.222222</td>\n      <td>377.485000</td>\n      <td>346.237000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7141</th>\n      <td>0.0</td>\n      <td>CHEMBL5220742</td>\n      <td>11.771511</td>\n      <td>11.771511</td>\n      <td>0.150711</td>\n      <td>0.150711</td>\n      <td>0.493601</td>\n      <td>16.769231</td>\n      <td>393.574000</td>\n      <td>366.358000</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7142</th>\n      <td>0.0</td>\n      <td>CHEMBL5220884</td>\n      <td>12.850331</td>\n      <td>12.850331</td>\n      <td>0.023599</td>\n      <td>-0.023599</td>\n      <td>0.515406</td>\n      <td>14.366667</td>\n      <td>398.466000</td>\n      <td>376.290000</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7143</th>\n      <td>0.0</td>\n      <td>CHEMBL5220983</td>\n      <td>11.721089</td>\n      <td>11.721089</td>\n      <td>0.389678</td>\n      <td>-0.478126</td>\n      <td>0.620639</td>\n      <td>10.285714</td>\n      <td>288.311434</td>\n      <td>271.175434</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5357 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n2.  Splitting data into max phase null & max phase 4 (reason being needing to re-label max phase 4 column only as 1, and not disrupting max phase 0 compounds)\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Select all max phase null compounds\ndf_null = df_merge_new[df_merge_new[\"max_phase\"] == 0]\nprint(df_null.shape)\ndf_null.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5256, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>260.160</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>104.064</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>244.165</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>256.176</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>244.165</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Using pd.DataFrame.assign to add a new column to re-label max_phase 4 into \"1\"\ndf_mp4_lb = df_mp4.assign(max_phase_lb = df_mp4[\"max_phase\"] / 4)\n\n# Using pd.DataFrame.pop() & insert() to shift added column to first column position\nfirst_col = df_mp4_lb.pop(\"max_phase_lb\")\ndf_mp4_lb.insert(0, \"max_phase_lb\", first_col)\n\ndf_mp4_lb\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL502</td>\n      <td>12.936933</td>\n      <td>12.936933</td>\n      <td>0.108783</td>\n      <td>0.108783</td>\n      <td>0.747461</td>\n      <td>20.214286</td>\n      <td>379.500</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>508</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL640</td>\n      <td>11.743677</td>\n      <td>11.743677</td>\n      <td>0.044300</td>\n      <td>-0.044300</td>\n      <td>0.731540</td>\n      <td>10.529412</td>\n      <td>235.331</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>512</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL659</td>\n      <td>9.972866</td>\n      <td>9.972866</td>\n      <td>0.008380</td>\n      <td>-0.411699</td>\n      <td>0.800524</td>\n      <td>33.857143</td>\n      <td>287.359</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1013</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1025</td>\n      <td>12.703056</td>\n      <td>12.703056</td>\n      <td>0.426312</td>\n      <td>-4.304784</td>\n      <td>0.629869</td>\n      <td>13.000000</td>\n      <td>184.147</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1345</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1128</td>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.608112</td>\n      <td>10.692308</td>\n      <td>201.697</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2028</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL360055</td>\n      <td>6.476818</td>\n      <td>6.476818</td>\n      <td>0.656759</td>\n      <td>0.656759</td>\n      <td>0.205822</td>\n      <td>12.583333</td>\n      <td>510.828</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2725</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1677</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.760853</td>\n      <td>14.250000</td>\n      <td>234.730</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Also create a new column max_phase_lb column for df_null to merge 2 dfs together\n\ndf_null_lb = df_null.assign(max_phase_lb = df_null[\"max_phase\"])\nfirst_col_null = df_null_lb.pop(\"max_phase_lb\")\ndf_null_lb.insert(0, \"max_phase_lb\", first_col_null)\ndf_null_lb.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\nThe two dataframes should share same column names which could be combined together.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Concatenate df_mp4_lb & df_null_lb\ndf_full = pd.concat([df_null_lb, df_mp4_lb])\ndf_full\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1013</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1025</td>\n      <td>12.703056</td>\n      <td>12.703056</td>\n      <td>0.426312</td>\n      <td>-4.304784</td>\n      <td>0.629869</td>\n      <td>13.000000</td>\n      <td>184.147</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1345</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1128</td>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.608112</td>\n      <td>10.692308</td>\n      <td>201.697</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2028</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL360055</td>\n      <td>6.476818</td>\n      <td>6.476818</td>\n      <td>0.656759</td>\n      <td>0.656759</td>\n      <td>0.205822</td>\n      <td>12.583333</td>\n      <td>510.828</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2725</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1677</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.760853</td>\n      <td>14.250000</td>\n      <td>234.730</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5266 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\n3.  Define X and y variables and train RF classifier model\n\nEventually df_full contained 10 active compounds and 5256 inactive compounds, as shown from the value counts.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf_full.value_counts(\"max_phase_lb\")\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nmax_phase_lb\n0.0    5256\n1.0      10\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Cast max_phase_lb column into integer\n# df_full[\"max_phase_lb\"] = df_full[\"max_phase_lb\"].astype(int)\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndf_full.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# Defining X (features) & y (target)\nX = df_full.iloc[:, 3:]\ny = df_full.iloc[:, 0]\n```\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# Checking the right data have been selected\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n4       0.0\n8       0.0\n14      0.0\n392     0.0\n393     0.0\n       ... \n1013    1.0\n1345    1.0\n2028    1.0\n2725    1.0\n3271    1.0\nName: max_phase_lb, Length: 5266, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Convert both X & y to arrays\nX = X.to_numpy()\ny = y.to_numpy()\n```\n:::\n\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# Using train_test_split() this time to split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=1)\n```\n:::\n\n\n-   Training RF classifier model\n\nReference notebook: https://github.com/rinikerlab/GHOST/blob/main/notebooks/example_GHOST.ipynb\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\n# Using RandomForestClassifier() to train model\n# max_features = \"sqrt\" by default, I decided to show it explicitly in the code to make sure the right one was used\nrfc = RandomForestClassifier(max_depth=3, random_state=1, max_features=\"sqrt\", oob_score=True)\nrfc.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<style>#sk-container-id-1 {color: black;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=3, oob_score=True, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=3, oob_score=True, random_state=1)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n4.  Obtain the prediction probabilities on the testing data and show confusion matrix with classification metrics\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n# Extract positive prediction probabilities for the testing set\ntest_probs = rfc.predict_proba(X_test)[:, 1]\n```\n:::\n\n\nA useful web link on area under the receiver operating characteristic curve - https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# Rather than re-inventing the wheel, the following function code for calculating metrics of the RF model was adapted from Landrum et al., from this notebook: https://github.com/rinikerlab/GHOST/blob/main/notebooks/example_GHOST.ipynb\n\ndef calc_metrics(y_test, test_probs, threshold = 0.5):\n    # Scores to differentiate between stated decision threshold (default = 0.5)\n    scores = [1 if x>=threshold else 0 for x in test_probs]\n    # Calculate area under the receiver operating characteristic curve\n    auc = metrics.roc_auc_score(y_test, test_probs)\n    # Calculate Cohen's Kappa score\n    kappa = metrics.cohen_kappa_score(y_test, scores)\n    # Formulate the confusion matrix\n    confusion = metrics.confusion_matrix(y_test, scores, labels = list(set(y_test)))\n    print('thresh: %.2f, kappa: %.3f, AUC test-set: %.3f'%(threshold, kappa, auc))\n    print(confusion)\n    print(metrics.classification_report(y_test,scores))\n    return \n```\n:::\n\n\nInitially I made a mistake when doing the data split, which created a problem with y_test which only contained one label in it (1 only), needs binary labels (0 & 1)\n\nIt was needed for roc_auc_score (measures true +ve & false +ve rates).\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\n# Show confusion matrix along with AUC and Cohen's Kappa\ncalc_metrics(y_test, test_probs, threshold = 0.5)\n\n# This was an extreme case - as only 10 actives vs. 5256 inactives\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthresh: 0.50, kappa: 0.000, AUC test-set: 0.536\n[[1052    0]\n [   2    0]]\n              precision    recall  f1-score   support\n\n         0.0       1.00      1.00      1.00      1052\n         1.0       0.00      0.00      0.00         2\n\n    accuracy                           1.00      1054\n   macro avg       0.50      0.50      0.50      1054\nweighted avg       1.00      1.00      1.00      1054\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/jenniferlin/Data_in_life_blog/.venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/Users/jenniferlin/Data_in_life_blog/.venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n/Users/jenniferlin/Data_in_life_blog/.venv/lib/python3.10/site-packages/sklearn/metrics/_classification.py:1471: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n  _warn_prf(average, modifier, msg_start, len(result))\n```\n:::\n:::\n\n\n5.  two approaches from GHOST (generalized threshold shifting) paper (main idea was optimising and shifting decision threshold):\n\n    -   approach 1 (out-of-bag method, aimed for RF classifiers) based on RDKit blog post (ref. 41) - http://rdkit.blogspot.com/2018/11/working-with-unbalanced-data-part-i.html ([viewable notebook version](https://nbviewer.org/github/greglandrum/rdkit_blog/blob/master/notebooks/Working%20with%20unbalanced%20data%20part%201.ipynb) via nbviewer)\n\n    -   approach 2 led to Generalised threshold shifting (GHOST) procedure (could be used for any classification methods) - ghostml package\n\nI only used approach 2 here as both approaches were shown to be performing similarly in the paper, and also approach 1 was already described in a RDKit blog post.\n\n-   extract the prediction probabilities from the RF classifier trained model\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# Get the positive prediction probabilities of the training set\ntrain_probs = rfc.predict_proba(X_train)[:, 1]\n```\n:::\n\n\n6.  Shift decision threshold using ghostml in a postprocessing way (note: last post used re-sampling method in a preprocessing way)\n\n-   optimise the decision threshold using ghostml via testing various thresholds (in spaces of 0.05 with range of 0.05 to 0.5) - to search for the most optimal threshold with most maximised Cohen's kappa\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# Setting up different decision thresholds in space of 0.05\nthresholds = np.round(np.arange(0.05,0.55,0.05),2)\nthresholds\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\narray([0.05, 0.1 , 0.15, 0.2 , 0.25, 0.3 , 0.35, 0.4 , 0.45, 0.5 ])\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# Looking for the best threshold with the most optimal Cohen's Kappa\nnew_threshold = ghostml.optimize_threshold_from_predictions(y_train, train_probs, thresholds, ThOpt_metrics = 'ROC') \n```\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\n# Show the optimal decision threshold\nnew_threshold\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n0.1\n```\n:::\n:::\n\n\n-   calculate confusion matrix and classification metrics based on the optimised decision threshold\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\n# Using calc_metrics function again on the newly-found/shifted decision threshold\n# It showed an improved classification outcome through the confusion matrix\ncalc_metrics(y_train, train_probs, threshold=new_threshold)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthresh: 0.10, kappa: 0.933, AUC test-set: 1.000\n[[4204    0]\n [   1    7]]\n              precision    recall  f1-score   support\n\n         0.0       1.00      1.00      1.00      4204\n         1.0       1.00      0.88      0.93         8\n\n    accuracy                           1.00      4212\n   macro avg       1.00      0.94      0.97      4212\nweighted avg       1.00      1.00      1.00      4212\n\n```\n:::\n:::\n\n\n<br>\n\n##### **Plotting ROC curves**\n\nTime for some plots - I've shown two different ways to plot ROC curve below.\n\n1.  Using *scikit-learn*\n\n###### **Testing set ROC curve**\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# Testing set ROC curve\nRocCurveDisplay.from_predictions(y_test, test_probs, plot_chance_level = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x11807cdf0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-39-output-2.png){width=589 height=429}\n:::\n:::\n\n\n<br>\n\n###### **Training set ROC curve**\n\nThis probably looked too good to be true or a textbook-standard ROC curve with AUC at 1.0.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# Training set ROC curve\nRocCurveDisplay.from_predictions(y_train, train_probs, plot_chance_level = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x132095900>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-40-output-2.png){width=589 height=429}\n:::\n:::\n\n\n2.  Alternative method using matplotlib which reproduced a similar training set ROC plot:\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n# Look for true positive rate (tpr), false positive rate (fpr) & threshold\nfpr, tpr, thresh = metrics.roc_curve(y_train, train_probs)\n# Plotting\nplt.figure()\n# lw = linewidth\nplt.plot(fpr, tpr, lw = 2)\n# show random guessing line (threshold = 0.5)\nplt.plot([0, 1], [0, 1], color = \"g\", lw = 2, linestyle=\"--\")\nplt.ylim([-0.05, 1.05])\nplt.xlim([-0.05, 1.0])\nplt.xlabel(\"specificity\")\nplt.ylabel(\"recall\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-41-output-1.png){width=599 height=429}\n:::\n:::\n\n\n<br>\n\n##### **Downsides and thoughts**\n\nI also wanted to mention that the testing set used here was most likely not the best ones to be used. There could be many overlaps between the compounds in the training and testing sets, since they all came from ChEMBL database. For demonstration and learning purposes, I ended up using similar dataset as last time, however, my future tasks would be to look for new open-source or public drug discovery datasets. I also should probably slowly move onto using multiple datasets or targets concurrently, which would likely make things more interesting in blog posts. On the other hand, I also wanted to avoid this in order to make the topic of study as clear and simple as possible for me or anyone who's trying to learn. In my mind, understanding the smallest building blocks first is always the best starting point before trying to build something bigger.\n\n<br>\n\n##### **Acknowledgements**\n\nI'd like to thank [rinikerlab](https://github.com/rinikerlab) again, and also all the authors, contributors or developers of all the software packages mentioned in this post, and also all the authors of the reference notebooks I've referred to in this post too.\n\n",
    "supporting": [
      "2_random_forest_classifier_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}