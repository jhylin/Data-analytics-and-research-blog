{
  "hash": "03f7901e360e3ebb22cd8f8b10c5f3b5",
  "result": {
    "markdown": "---\ntitle: Random forest classifier\nsubtitle: Series 2.2.1 - more on imbalanced dataset\nauthor: Jennifer HY Lin\ndate: 2024-1-17\ndraft: false\ncategories:\n  - Machine learning projects\n  - Tree models\n  - Pandas\n  - Scikit-learn\n  - RDKit\n  - ChEMBL database\n  - Python\nformat: html\nbibliography: references.bib\n---\n\n*The section on \"Data retrieval using chembl_downloader\" has been updated and finalised on 31st January 2024 - many thanks for the comment from Charles Tapley Hoyt (cthoyt)*.\n\n<br>\n\n##### **Brief introduction**\n\nThis post was really just an addition towards the last random forest (RF) post. It was mainly inspired by this paper [@esposito2021] from [rinikerlab](https://github.com/rinikerlab)[^1]. It was nice to complete the RF series by adding a RF classifier since last post was only on a regressor. Another thing was that imbalanced datasets were common in drug discovery projects, learning different strategies to deal with them was also very useful. While working on this post, I also came across a few other packages that I haven't used before so I've included them all down below.\n\n[^1]: h/t: Greg Landrum for his comment on Mastodon for the last RF post (which led to this follow-up post)\n\n<br>\n\n##### **Overview of post**\n\n-   Data sourcing via *chembl_downloader*\n-   Minor data preprocessing using own little script and also SMILES checker from *scikit_mol*\n- *scikit-learn*'s RandomForestClassifier()\n-   Dealing with imbalanced dataset in RF classifiers by using *ghostml*\n-   A small section on plotting receiver operating characteristic (ROC) curves\n\n<br>\n\n##### **Importing libraries**\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport chembl_downloader\nfrom chembl_downloader import latest, queries, query\nfrom rdkit.Chem import Descriptors\nimport datamol as dm\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom sklearn.metrics import RocCurveDisplay, roc_curve\nfrom scikit_mol.utilities import CheckSmilesSanitazion\nimport ghostml\n```\n:::\n\n\n<br>\n\n##### **Data retrieval using chembl_downloader**\n\nchembl_downloader was something I wanted to try a while back. I've tried manual download and chembl_webresource_client previously, and they were probably not the best strategies for data reproducibility. The idea of chembl_downloader was to generate a reproducible ChEMBL data source. It involved some SQL at the beginning to specify the exact type of data needed, so some SQL knowledge were required. Other uses for this package were elaborated much more clearly in its GitHub repository at [https://github.com/cthoyt/chembl-downloader](https://github.com/cthoyt/chembl-downloader). One of the reference notebooks that I've used could be reached [here](https://github.com/cthoyt/chembl-downloader/blob/main/notebooks/drug-indications.ipynb) (more available in its repository).\n\nWhat I did was shown below.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# Show the latest version of ChEMBL used\nlatest_version = latest()\nprint(f\"The latest ChEMBL version is: {latest_version}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe latest ChEMBL version is: 33\n```\n:::\n:::\n\n\nThe following section was updated as suggested by cthoyt (please see his comment for post below). I ended up putting through my first ever pull request in an open-source and cheminformatics-related package. A new option to add max_phase was added into the get_target_sql function in chembl_downloader, and it was kept as a togglable option that could be turned on via boolean flag. Many thanks for the patience from cthoyt for guiding me through it. The overall code was now changed as shown below.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# Generate SQL for a query on acetylcholinesterase (AChE): CHEMBL220\nsql = queries.get_target_sql(target_id=\"CHEMBL220\", target_type=\"SINGLE PROTEIN\", max_phase=True)\n\n# Pretty-print the SQL in Jupyter\nqueries.markdown(sql)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```sql\nSELECT\n    ASSAYS.chembl_id              AS assay_chembl_id,\n    TARGET_DICTIONARY.target_type,\n    TARGET_DICTIONARY.tax_id,\n    COMPOUND_STRUCTURES.canonical_smiles,\n    MOLECULE_DICTIONARY.chembl_id AS molecule_chembl_id,\n    MOLECULE_DICTIONARY.max_phase,\n    ACTIVITIES.standard_type,\n    ACTIVITIES.pchembl_value\nFROM TARGET_DICTIONARY\n     JOIN ASSAYS ON TARGET_DICTIONARY.tid == ASSAYS.tid\n     JOIN ACTIVITIES ON ASSAYS.assay_id == ACTIVITIES.assay_id\n     JOIN MOLECULE_DICTIONARY ON MOLECULE_DICTIONARY.molregno == ACTIVITIES.molregno\n     JOIN COMPOUND_STRUCTURES ON MOLECULE_DICTIONARY.molregno == COMPOUND_STRUCTURES.molregno\nWHERE TARGET_DICTIONARY.chembl_id = 'CHEMBL220'\n    AND ACTIVITIES.pchembl_value IS NOT NULL\n    AND TARGET_DICTIONARY.target_type = 'SINGLE PROTEIN'```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# The SQL still works as shown above, \n# please ignore the other non-SQL texts\n# (unfortunately I couldn't get rid of them in the Quarto markdown file format).\n```\n:::\n\n\nI've also updated how I retrieved and saved the ChEMBL data - code as suggested and provided by cthoyt. This would be a better and more reproducible way for anyone who might be interested in re-running this notebook. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nfrom pathlib import Path\n\n# Pick any directory, but make sure it's relative to your home directory\ndirectory = Path.home().joinpath(\".data\", \"blog\")\n# Create the directory if it doesn't exist\ndirectory.mkdir(exist_ok=True, parents=True)\n\n# Create a file path that corresponds to the version, since this could change\npath = directory.joinpath(f\"chembl_d_ache_{latest_version}.tsv\")\n\nif path.is_file():\n    # If the file already exists, load it\n    df_ache = pd.read_csv(path, sep=',')\nelse:\n    # If the file doesn't already exist, make the query then cache it\n    df_ache = chembl_downloader.query(sql)\n    df_ache.to_csv(path, sep=\",\", index=False)\n```\n:::\n\n\nThe rest of the code outputs in the rest of the post stayed the same as before. The only thing changed and updated was the part on retrieving ChEMBL data via chembl_downloader.\n\n<br>\n\n##### **Some data cleaning**\n\nMinor cleaning and preprocessing were done for this post only, as the focus was more on dealing with imbalanced dataset in RF classifier. Since I used a different way to retrieve ChEMBL data this time, the dataset used here might be slightly different from the one used in previous post.\n\n<br>\n\n###### **mol_prep.py**\n\nI've more or less accumulated small pieces of code over time, and I've decided to compile them into a Python script. The idea was to remove most function code in the post to avoid repeating them all the time since they've been used frequently in the last few posts. The script would be saved into the [RF repository](https://github.com/jhylin/ML2-2_random_forest), and would still be considered as a \"work-in-progress\" script (needs more work in the future).\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n## Trial own mol_prep.py script\nfrom mol_prep import preprocess, rdkit_2d_descriptors\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n## Preprocess/standardise molecules\n# Running preprocess function \ndf_ache = df_ache.copy()\ndf_prep = df_ache.apply(preprocess, axis = 1)\ndf_prep.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>assay_chembl_id</th>\n      <th>target_type</th>\n      <th>tax_id</th>\n      <th>chembl_id</th>\n      <th>canonical_smiles</th>\n      <th>molecule_chembl_id</th>\n      <th>max_phase</th>\n      <th>standard_type</th>\n      <th>pchembl_value</th>\n      <th>rdkit_mol</th>\n      <th>standard_smiles</th>\n      <th>selfies</th>\n      <th>inchi</th>\n      <th>inchikey</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL1909212</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n      <td>CHEMBL411</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>4.59</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12846eab0&gt;</td>\n      <td>CC/C(=C(/CC)c1ccc(O)cc1)c1ccc(O)cc1</td>\n      <td>[C][C][/C][=Branch1][P][=C][Branch1][Ring1][/C...</td>\n      <td>InChI=1S/C18H20O2/c1-3-17(13-5-9-15(19)10-6-13...</td>\n      <td>RGLYKWWBQGJZGM-ISLYRVAYSA-N</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL1003053</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>CHEMBL416</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>4.27</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12846ea40&gt;</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>[C][O][C][=C][O][C][=C][C][Ring1][Branch1][=C]...</td>\n      <td>InChI=1S/C12H8O4/c1-14-12-10-8(4-5-15-10)6-7-2...</td>\n      <td>QXKHYNVANLEOEG-UHFFFAOYSA-N</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL2406149</td>\n      <td>SINGLE PROTEIN</td>\n      <td>9606</td>\n      <td>CHEMBL220</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>CHEMBL416</td>\n      <td>4.0</td>\n      <td>IC50</td>\n      <td>6.12</td>\n      <td>&lt;rdkit.Chem.rdchem.Mol object at 0x12846eb20&gt;</td>\n      <td>COc1c2occc2cc2ccc(=O)oc12</td>\n      <td>[C][O][C][=C][O][C][=C][C][Ring1][Branch1][=C]...</td>\n      <td>InChI=1S/C12H8O4/c1-14-12-10-8(4-5-15-10)6-7-2...</td>\n      <td>QXKHYNVANLEOEG-UHFFFAOYSA-N</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n###### **scikit_mol**\n\nscikit_mol was a package originated from RDKit UGM hackathon in 2022. This [blog post](https://www.cheminformania.com/scikit-mol-easy-embedding-of-rdkit-into-scikit-learn/) elaborated further on its functions and uses in machine learning. For this post I've only used it for a very small portion, mainly to check for missing SMILES or errors in SMILES (kind of like double checking whether the preprocess function code worked as expected). It could be integrated with *scikit-learn*'s pipeline method for multiple estimators. Its GitHub Repository link: [https://github.com/EBjerrum/scikit-mol](https://github.com/EBjerrum/scikit-mol) - I've referred to this [reference notebook](https://github.com/EBjerrum/scikit-mol/blob/main/notebooks/05_smiles_sanitaztion.ipynb) while working on this post.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# Quick simple way to check for missing SMILES\nprint(f'Dataset contains {df_prep.standard_smiles.isna().sum()} unparsable mols')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDataset contains 0 unparsable mols\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Checking for invalid SMILES using scikit_mol\nsmileschecker = CheckSmilesSanitazion()\nsmileschecker.sanitize(list(df_prep.standard_smiles))\n\n# Showing SMILES errors\nsmileschecker.errors\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>SMILES</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIt showed no errors in SMILES (errors should be listed in the code cell output).\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n## Generate RDKit 2D descriptors/fingerprints\n# Running rdkit_2d_descriptors function\ndf_2d = rdkit_2d_descriptors(df_prep)\ndf_2d.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>ExactMolWt</th>\n      <th>NumValenceElectrons</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>9.41068</td>\n      <td>9.41068</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.1000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>268.146330</td>\n      <td>104</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>216.042259</td>\n      <td>80</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>216.042259</td>\n      <td>80</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 210 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Merge dataframes df_prep & df_2d via index\ndf_merge = pd.merge(\n    df_prep[[\"max_phase\", \"molecule_chembl_id\"]],\n    df_2d,\n    left_index=True,\n    right_index=True\n)\nprint(df_merge.shape)\ndf_merge.head(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(7144, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>CHEMBL411</td>\n      <td>9.41068</td>\n      <td>9.41068</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.1000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.17310</td>\n      <td>11.17310</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.0625</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\nA different spreads of max phases were shown this time in the dataframe, as the SQL query mainly used IC50, whereas last post was strictly limited to Ki via ChEMBL web resource client. Other likely reason was that in the decision tree series, I've attempted data preprocessing at a larger scale so some data were eliminated. It appeared that there were more max phase 4 compounds here than last time (note: null compounds were not shown in the value counts as it was labelled as \"NaN\", it should be the largest max phase portion in the data).\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Find out counts of each max phase\ndf_merge.value_counts(\"max_phase\")\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```\nmax_phase\n 4.0    618\n-1.0     69\n 2.0     29\n 3.0     10\n 1.0      7\n 0.5      1\nName: count, dtype: int64\n```\n:::\n:::\n\n\nI then tried searching for the chembl_id of the 10 max phase 4 compounds used in the last post in the dataframe (df_merge).\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Previously used 10 max phase 4 compounds\n# donepezil = CHEMBL502 & galantamine = CHEMBL659\nlist_mp4 = [\"CHEMBL95\", \"CHEMBL1128\", \"CHEMBL640\", \"CHEMBL502\", \"CHEMBL481\", \"CHEMBL360055\", \"CHEMBL1025\", \"CHEMBL659\", \"CHEMBL1200970\", \"CHEMBL1677\"]\n\n# Search for compounds in list_mp4 within df_merge's \"molecule_chembl_id\" column\n# using Series.isin\ndf_prev = df_merge.loc[df_merge[\"molecule_chembl_id\"].isin(list_mp4)]\ndf_prev.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>548.385</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>548.385</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>68</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>69</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere were many duplicates of compounds.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(df_prev.shape)\ndf_prev.value_counts(\"molecule_chembl_id\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(439, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=53}\n```\nmolecule_chembl_id\nCHEMBL95         182\nCHEMBL502        143\nCHEMBL659         76\nCHEMBL1128        12\nCHEMBL1677        10\nCHEMBL1200970      6\nCHEMBL640          4\nCHEMBL1025         3\nCHEMBL481          2\nCHEMBL360055       1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Dropping duplicated compound via chembl IDs in the main df\ndf_merge_new = df_merge.drop_duplicates(subset=[\"molecule_chembl_id\"], keep=\"first\")\nprint(df_merge_new.shape)\ndf_merge_new.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5357, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>CHEMBL411</td>\n      <td>9.410680</td>\n      <td>9.410680</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.100000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.173100</td>\n      <td>11.173100</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.062500</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.0</td>\n      <td>CHEMBL7002</td>\n      <td>11.591481</td>\n      <td>11.591481</td>\n      <td>0.189306</td>\n      <td>-0.309798</td>\n      <td>0.886859</td>\n      <td>23.608696</td>\n      <td>333.453</td>\n      <td>310.269</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>NaN</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>260.160</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4.0</td>\n      <td>CHEMBL41</td>\n      <td>12.564531</td>\n      <td>12.564531</td>\n      <td>0.203346</td>\n      <td>-4.329869</td>\n      <td>0.851796</td>\n      <td>12.909091</td>\n      <td>309.331</td>\n      <td>291.187</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Making sure previously used 10 max phase 4 compounds could be found in df_merge_new\ndf_mp4 = df_merge_new.loc[df_merge_new[\"molecule_chembl_id\"].isin(list_mp4)]\ndf_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>548.385</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>184.157</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>4.0</td>\n      <td>CHEMBL502</td>\n      <td>12.936933</td>\n      <td>12.936933</td>\n      <td>0.108783</td>\n      <td>0.108783</td>\n      <td>0.747461</td>\n      <td>20.214286</td>\n      <td>379.500</td>\n      <td>350.268</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>508</th>\n      <td>4.0</td>\n      <td>CHEMBL640</td>\n      <td>11.743677</td>\n      <td>11.743677</td>\n      <td>0.044300</td>\n      <td>-0.044300</td>\n      <td>0.731540</td>\n      <td>10.529412</td>\n      <td>235.331</td>\n      <td>214.163</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>512</th>\n      <td>4.0</td>\n      <td>CHEMBL659</td>\n      <td>9.972866</td>\n      <td>9.972866</td>\n      <td>0.008380</td>\n      <td>-0.411699</td>\n      <td>0.800524</td>\n      <td>33.857143</td>\n      <td>287.359</td>\n      <td>266.191</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1013</th>\n      <td>4.0</td>\n      <td>CHEMBL1025</td>\n      <td>12.703056</td>\n      <td>12.703056</td>\n      <td>0.426312</td>\n      <td>-4.304784</td>\n      <td>0.629869</td>\n      <td>13.000000</td>\n      <td>184.147</td>\n      <td>170.035</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1345</th>\n      <td>4.0</td>\n      <td>CHEMBL1128</td>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.608112</td>\n      <td>10.692308</td>\n      <td>201.697</td>\n      <td>185.569</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2028</th>\n      <td>4.0</td>\n      <td>CHEMBL360055</td>\n      <td>6.476818</td>\n      <td>6.476818</td>\n      <td>0.656759</td>\n      <td>0.656759</td>\n      <td>0.205822</td>\n      <td>12.583333</td>\n      <td>510.828</td>\n      <td>450.348</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2725</th>\n      <td>4.0</td>\n      <td>CHEMBL1677</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.760853</td>\n      <td>14.250000</td>\n      <td>234.730</td>\n      <td>219.610</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>323.743</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>10 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# note: compounds with max phase 0 not shown in the count\ndf_merge_new.value_counts(\"max_phase\")\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```\nmax_phase\n 4.0    55\n-1.0    26\n 2.0     8\n 3.0     7\n 1.0     4\n 0.5     1\nName: count, dtype: int64\n```\n:::\n:::\n\n\n<br>\n\n##### **Model building**\n\nThe aim of this post was to model and classify the max phases of ChEMBL small molecules, i.e. whether the compounds in the testing set (consisted of max phase 0 or null compounds) might be eventually classified as max phase 4 or not. This was one of the approaches to answer the question in mind, and not the ultimate way to solve the problem (just thought to mention). The target was \"max_phase\" and features to be used were the various RDKit 2D descriptors (RDKit2D).\n\nThe steps I've taken to build the model were shown below:\n\n1.  Re-labelled max phases as binary labels (e.g. max phase null as 0, max phase 4 as 1)\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Re-label max phase NaN as 0\ndf_merge_new = df_merge_new.fillna(0)\ndf_merge_new.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>4.0</td>\n      <td>CHEMBL411</td>\n      <td>9.410680</td>\n      <td>9.410680</td>\n      <td>0.284153</td>\n      <td>0.284153</td>\n      <td>0.779698</td>\n      <td>12.100000</td>\n      <td>268.356</td>\n      <td>248.196</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>4.0</td>\n      <td>CHEMBL416</td>\n      <td>11.173100</td>\n      <td>11.173100</td>\n      <td>0.405828</td>\n      <td>-0.405828</td>\n      <td>0.586359</td>\n      <td>11.062500</td>\n      <td>216.192</td>\n      <td>208.128</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>-1.0</td>\n      <td>CHEMBL7002</td>\n      <td>11.591481</td>\n      <td>11.591481</td>\n      <td>0.189306</td>\n      <td>-0.309798</td>\n      <td>0.886859</td>\n      <td>23.608696</td>\n      <td>333.453</td>\n      <td>310.269</td>\n      <td>...</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>260.160</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>4.0</td>\n      <td>CHEMBL41</td>\n      <td>12.564531</td>\n      <td>12.564531</td>\n      <td>0.203346</td>\n      <td>-4.329869</td>\n      <td>0.851796</td>\n      <td>12.909091</td>\n      <td>309.331</td>\n      <td>291.187</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n2.  Splitted data into max phase null & max phase 4 (needing to re-label max phase 4 column only as 1, and not disrupting the labels of max phase 0 compounds)\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# Select all max phase null compounds\ndf_null = df_merge_new[df_merge_new[\"max_phase\"] == 0]\nprint(df_null.shape)\ndf_null.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(5256, 212)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>HeavyAtomMolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>260.160</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>104.064</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>244.165</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>256.176</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>244.165</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 212 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Using pd.DataFrame.assign to add a new column to re-label max_phase 4 as \"1\"\ndf_mp4_lb = df_mp4.assign(max_phase_lb = df_mp4[\"max_phase\"] / 4)\n\n# Using pd.DataFrame.pop() & insert() to shift added column to first column position\nfirst_col = df_mp4_lb.pop(\"max_phase_lb\")\ndf_mp4_lb.insert(0, \"max_phase_lb\", first_col)\ndf_mp4_lb.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL481</td>\n      <td>13.581173</td>\n      <td>13.581173</td>\n      <td>0.095133</td>\n      <td>-1.863974</td>\n      <td>0.355956</td>\n      <td>22.209302</td>\n      <td>586.689</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>67</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL95</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.953981</td>\n      <td>0.953981</td>\n      <td>0.706488</td>\n      <td>15.200000</td>\n      <td>198.269</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>249</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL502</td>\n      <td>12.936933</td>\n      <td>12.936933</td>\n      <td>0.108783</td>\n      <td>0.108783</td>\n      <td>0.747461</td>\n      <td>20.214286</td>\n      <td>379.500</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>508</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL640</td>\n      <td>11.743677</td>\n      <td>11.743677</td>\n      <td>0.044300</td>\n      <td>-0.044300</td>\n      <td>0.731540</td>\n      <td>10.529412</td>\n      <td>235.331</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>512</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL659</td>\n      <td>9.972866</td>\n      <td>9.972866</td>\n      <td>0.008380</td>\n      <td>-0.411699</td>\n      <td>0.800524</td>\n      <td>33.857143</td>\n      <td>287.359</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# Also create a new column max_phase_lb column for df_null \n# in order to merge 2 dfs later\ndf_null_lb = df_null.assign(max_phase_lb = df_null[\"max_phase\"])\nfirst_col_null = df_null_lb.pop(\"max_phase_lb\")\ndf_null_lb.insert(0, \"max_phase_lb\", first_col_null)\ndf_null_lb.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Concatenate df_mp4_lb & df_null_lb\ndf_full = pd.concat([df_null_lb, df_mp4_lb])\ndf_full\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>max_phase_lb</th>\n      <th>max_phase</th>\n      <th>molecule_chembl_id</th>\n      <th>MaxAbsEStateIndex</th>\n      <th>MaxEStateIndex</th>\n      <th>MinAbsEStateIndex</th>\n      <th>MinEStateIndex</th>\n      <th>qed</th>\n      <th>SPS</th>\n      <th>MolWt</th>\n      <th>...</th>\n      <th>fr_sulfide</th>\n      <th>fr_sulfonamd</th>\n      <th>fr_sulfone</th>\n      <th>fr_term_acetylene</th>\n      <th>fr_tetrazole</th>\n      <th>fr_thiazole</th>\n      <th>fr_thiocyan</th>\n      <th>fr_thiophene</th>\n      <th>fr_unbrch_alkane</th>\n      <th>fr_urea</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL28</td>\n      <td>12.020910</td>\n      <td>12.020910</td>\n      <td>0.018823</td>\n      <td>-0.410347</td>\n      <td>0.631833</td>\n      <td>10.800000</td>\n      <td>270.240</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL8320</td>\n      <td>10.282778</td>\n      <td>10.282778</td>\n      <td>0.120741</td>\n      <td>-0.120741</td>\n      <td>0.416681</td>\n      <td>17.500000</td>\n      <td>108.096</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL11833</td>\n      <td>11.201531</td>\n      <td>11.201531</td>\n      <td>0.428520</td>\n      <td>-0.466092</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>392</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL12324</td>\n      <td>11.257704</td>\n      <td>11.257704</td>\n      <td>0.462395</td>\n      <td>-0.462395</td>\n      <td>0.797990</td>\n      <td>26.150000</td>\n      <td>277.344</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>393</th>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>CHEMBL274107</td>\n      <td>11.359778</td>\n      <td>11.359778</td>\n      <td>0.372211</td>\n      <td>-0.473241</td>\n      <td>0.838024</td>\n      <td>25.157895</td>\n      <td>262.309</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1013</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1025</td>\n      <td>12.703056</td>\n      <td>12.703056</td>\n      <td>0.426312</td>\n      <td>-4.304784</td>\n      <td>0.629869</td>\n      <td>13.000000</td>\n      <td>184.147</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1345</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1128</td>\n      <td>9.261910</td>\n      <td>9.261910</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.608112</td>\n      <td>10.692308</td>\n      <td>201.697</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2028</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL360055</td>\n      <td>6.476818</td>\n      <td>6.476818</td>\n      <td>0.656759</td>\n      <td>0.656759</td>\n      <td>0.205822</td>\n      <td>12.583333</td>\n      <td>510.828</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2725</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1677</td>\n      <td>6.199769</td>\n      <td>6.199769</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.760853</td>\n      <td>14.250000</td>\n      <td>234.730</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3271</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>CHEMBL1200970</td>\n      <td>2.520809</td>\n      <td>2.520809</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.709785</td>\n      <td>14.000000</td>\n      <td>348.943</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5266 rows × 213 columns</p>\n</div>\n```\n:::\n:::\n\n\n3.  Defined X and y variables and trained RF classifier model\n\nEventually df_full contained 10 active compounds and 5256 inactive compounds (from the value counts).\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf_full.value_counts(\"max_phase_lb\")\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\nmax_phase_lb\n0.0    5256\n1.0      10\nName: count, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Defining X (features) & y (target)\nX = df_full.iloc[:, 3:]\ny = df_full.iloc[:, 0]\n```\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# Checking right data were selected e.g. y as target\ny\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```\n4       0.0\n8       0.0\n14      0.0\n392     0.0\n393     0.0\n       ... \n1013    1.0\n1345    1.0\n2028    1.0\n2725    1.0\n3271    1.0\nName: max_phase_lb, Length: 5266, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# Convert both X & y to arrays\nX = X.to_numpy()\ny = y.to_numpy()\n```\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n# Using train_test_split() this time to split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=1)\n```\n:::\n\n\nAfter data splitting, a RF classifier was trained with reference to this [notebook](https://github.com/rinikerlab/GHOST/blob/main/notebooks/example_GHOST.ipynb).\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\n# max_features = \"sqrt\" by default\nrfc = RandomForestClassifier(max_depth=3, random_state=1, max_features=\"sqrt\", oob_score=True)\nrfc.fit(X_train, y_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<style>#sk-container-id-2 {color: black;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=3, oob_score=True, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=3, oob_score=True, random_state=1)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n4.  Extracted positive prediction probabilities for the testing set and showed confusion matrix with classification metrics\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ntest_probs = rfc.predict_proba(X_test)[:, 1]\n```\n:::\n\n\nSome reference links and explanations for area under the ROC curve and Cohen's Kappa.\n\n**Area under the ROC curve**: [reference](https://scikit-learn.org/stable/modules/model_evaluation.html#receiver-operating-characteristic-roc) - the area under a curve plot between *sensitivity* or *recall* (percent of all 1s classified correctly by a classifier or true positive rate) and *specificity* (percent of all 0s classified correctly by a classifier, or equivalent to 1 - false positive rate or true negative rate) [@bruce2020]. It is useful for evaluating the performance of a classification model via comparing the true positive rate and false positive rate which are influenced by shifting the decision threshold. Area under the ROC is usually represented as a number ranging from 0 to 1 (1 being a perfect classifier, 0.5 or below meaning a poor, ineffective classifier)\n\n**Cohen's Kappa score**: [reference](https://scikit-learn.org/stable/modules/model_evaluation.html#cohen-s-kappa) - a score that is used to measure the agreement of labelling between two annotators (usually between -1 and 1, the higher the score the better the agreement)\n\nRather than re-inventing the wheel, the following function code for calculating metrics of the RF model were adapted from [this notebook](https://github.com/rinikerlab/GHOST/blob/main/notebooks/example_GHOST.ipynb), from [GHOST repository](https://github.com/rinikerlab/GHOST). I have only added some comments for clarities, and also added a zero_division parameter for the classification_report to mute the warning message when the results ended up being 0 due to divisions by zero.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndef calc_metrics(y_test, test_probs, threshold = 0.5):\n    # Target label assigned according to stated decision threshold (default = 0.5)\n    # e.g. second annotator (expected label)\n    scores = [1 if x>=threshold else 0 for x in test_probs]\n    # Calculate area under the ROC curve based on prediction score\n    auc = metrics.roc_auc_score(y_test, test_probs)\n    # Calculate Cohen's Kappa score\n    # e.g. y_test as first annotator (predicted label)\n    kappa = metrics.cohen_kappa_score(y_test, scores)\n    # Formulate the confusion matrix\n    confusion = metrics.confusion_matrix(y_test, scores, labels = list(set(y_test)))\n    print('thresh: %.2f, kappa: %.3f, AUC test-set: %.3f'%(threshold, kappa, auc))\n    print(confusion)\n    print(metrics.classification_report(y_test, scores, zero_division=0.0))\n    return \n```\n:::\n\n\nNote: roc_auc_score measures true positive and false positive rates, requiring binary labels (e.g. 0s and 1s) in the data\n\nThen showed confusion matrix along with area under the ROC curve and Cohen's Kappa.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ncalc_metrics(y_test, test_probs, threshold = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthresh: 0.50, kappa: 0.000, AUC test-set: 0.536\n[[1052    0]\n [   2    0]]\n              precision    recall  f1-score   support\n\n         0.0       1.00      1.00      1.00      1052\n         1.0       0.00      0.00      0.00         2\n\n    accuracy                           1.00      1054\n   macro avg       0.50      0.50      0.50      1054\nweighted avg       1.00      1.00      1.00      1054\n\n```\n:::\n:::\n\n\nTo help with interpreting the confusion matrix, *scikit-learn* actually had a handy plotting code to visualise the matrix. \n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nConfusionMatrixDisplay.from_estimator(rfc, X_test, y_test)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-33-output-1.png){width=525 height=429}\n:::\n:::\n\n\nIt was very obvious that not all of the compounds were classified in the testing set. There were only 1052 compounds classified as true negative, and none in the testing set were labelled as true positive. The likely reason was due to the very imbalanced ratio of actives (only 10 max phase 4 which were labelled as \"1\" compounds) and inactives (5256 max phase 0 compounds). Besides the imbalanced dataset, the decision threshold was also normally set at 0.5, meaning the classifier was likely going to lose the chance to classify the true positive compounds due to the very skewed ratio of actives to inactives.\n\n5.  Two approaches were used in the GHOST (generalized threshold shifting) paper:\n\n    -   Approach 1 (out-of-bag method, more computer efficient, aimed for RF classifiers) based on [RDKit blog post](http://rdkit.blogspot.com/2018/11/working-with-unbalanced-data-part-i.html) or its [viewable notebook version](https://nbviewer.org/github/greglandrum/rdkit_blog/blob/master/notebooks/Working%20with%20unbalanced%20data%20part%201.ipynb) via nbviewer\n\n    -   Approach 2 led to [GHOST](https://github.com/rinikerlab/GHOST) procedure with a goal to optimise and shift the decision threshold in any classification methods to catch the minor portion of actives (rather than the major portion of inactives) \n\n    - note: both approaches were shown to be performing similarly in the paper\n\nI only used approach 2 here since the RDKit blog post had already explained approach 1 in depth. \n\nThe next step involved extracting prediction probabilities from the RF classifier trained model.\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\n# Get the positive prediction probabilities of the training set\ntrain_probs = rfc.predict_proba(X_train)[:, 1]\n```\n:::\n\n\n6.  Used GHOST strategy in a postprocessing way (note: last post used data re-sampling method in a preprocessing way)\n\nThe decision threshold were optimised by using *ghostml* code via testing various different thresholds, e.g. in spaces of 0.05 that ranged from 0.05 to 0.5. The most optimal threshold would have the most maximised Cohen's kappa.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\n# Setting up different decision thresholds\nthresholds = np.round(np.arange(0.05,0.55,0.05), 2)\nthresholds\n```\n\n::: {.cell-output .cell-output-display execution_count=73}\n```\narray([0.05, 0.1 , 0.15, 0.2 , 0.25, 0.3 , 0.35, 0.4 , 0.45, 0.5 ])\n```\n:::\n:::\n\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\n# Looking for the best threshold with the most optimal Cohen's Kappa\nnew_threshold = ghostml.optimize_threshold_from_predictions(y_train, train_probs, thresholds, ThOpt_metrics = 'ROC') \n```\n:::\n\n\nUsing the calc_metrics function again on the newly-found or shifted decision threshold.\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ncalc_metrics(y_train, train_probs, threshold = new_threshold)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nthresh: 0.10, kappa: 0.933, AUC test-set: 1.000\n[[4204    0]\n [   1    7]]\n              precision    recall  f1-score   support\n\n         0.0       1.00      1.00      1.00      4204\n         1.0       1.00      0.88      0.93         8\n\n    accuracy                           1.00      4212\n   macro avg       1.00      0.94      0.97      4212\nweighted avg       1.00      1.00      1.00      4212\n\n```\n:::\n:::\n\n\nHere, after shifting the decision threshold with the most optimal Cohen's Kappa score, we could see an improved number of compounds labelled within the true negative class (increasing from 1052 to 4204), and more importantly, we could see the true positive class improved from 0 to 7 as well.\n\n<br>\n\n##### **Plotting ROC curves**\n\nTime for some plots - I've shown two different ways to plot ROC curves below.\n\n1.  Using *scikit-learn*\n\nTesting set ROC curve - obviously, this was not a good classifier with a poor AUC.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nRocCurveDisplay.from_predictions(y_test, test_probs, plot_chance_level = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```\n<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x129fb7910>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-38-output-2.png){width=589 height=429}\n:::\n:::\n\n\n<br>\n\nTraining set ROC curve - this probably looked too good to be true or a textbook-standard ROC curve with AUC at 1.0.\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nRocCurveDisplay.from_predictions(y_train, train_probs, plot_chance_level = True)\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n<sklearn.metrics._plot.roc_curve.RocCurveDisplay at 0x128c0aaa0>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-39-output-2.png){width=589 height=429}\n:::\n:::\n\n\n2.  Alternative method using matplotlib which reproduced a similar training set ROC plot:\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\n# Looking for true positive rate (tpr), false positive rate (fpr) & threshold\nfpr, tpr, thresh = metrics.roc_curve(y_train, train_probs)\n# Plotting\nplt.figure()\n# lw = linewidth\nplt.plot(fpr, tpr, lw = 2)\n# show random guessing line (threshold = 0.5)\nplt.plot([0, 1], [0, 1], color = \"g\", lw = 2, linestyle=\"--\")\nplt.ylim([-0.05, 1.05])\nplt.xlim([-0.05, 1.0])\nplt.xlabel(\"specificity\")\nplt.ylabel(\"recall\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](2_random_forest_classifier_files/figure-html/cell-40-output-1.png){width=599 height=429}\n:::\n:::\n\n\n<br>\n\n##### **Downsides and thoughts**\n\nI wanted to mention that the testing set used here was most likely not the best ones to be used. There could be many overlaps or similarities between the training and testing sets, since they all came from ChEMBL database. For demonstration and learning purposes, I ended up using similar dataset as last time. Hopefully, I can try other open-source or public drug discovery datasets in the near future. \n\nThe other thing to mention was that I should try different molecular fingerprints or descriptors as well, rather than only using RDKit2D, which might lead to different results. I should also probably slowly move onto using multiple datasets or targets in a project, which would likely make things more interesting. On the other hand, I also wanted to avoid this in order to make the topic of interest as clear and simple as possible for me or anyone who's trying to learn. \n\n<br>\n\n##### **Acknowledgements**\n\nI'd like to thank Riniker lab again for the GHOST paper, along with all the authors, contributors or developers for all of the software packages mentioned in this post, and also, huge thanks should also go to the authors of the reference notebooks mentioned in the post as well.\n\n",
    "supporting": [
      "2_random_forest_classifier_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}