{
  "hash": "60748ff50c577f761af767df52ada4a7",
  "result": {
    "markdown": "---\ntitle: Random forest\nsubtitle: 'Series 2.2 - model building, feature importances & model evaluations'\nauthor: Jennifer HY Lin\ndate: '2023-10-30'\ndraft: true\ncategories:\n  - Machine learning projects\n  - Tree models\n  - Pandas\n  - Scikit-learn\n  - ChEMBL database\n  - Python\nformat: html\nbibliography: references.bib\n---\n\n##### **What is a random forest?**\n\nThe [decision tree model built last time](https://jhylin.github.io/Data_in_life_blog/posts/16_ML2-1_Decision_tree/3_model_build.html) was purely based on one model on its own, which often might not be as accurate as we've hoped for. If we're thinking along the line mathematically or statistically to improve the model, we would then think about using the average of multiple models [@breiman1998] to see if this output would better reflect the real-life scenario. This model averaging approach was in fact constantly used in our lives with a common example such as using majority votes in elections or decision-making processes.\n\nThe same model averaging concept was also used in random forest [@breiman2001], which as the name suggested, was composed of many decision tree models forming a forest. To focus on each tree in the forest, each tree model would be making its own model prediction. By having multiple predictions since we have multiple trees, the average obtained from these predictions would produce one single result in the end. The advantage of this was that it improved the accuracy of the prediction by reducing variances, and also minimised the problem of overfitting the model if it was purely based on one model only (section 1.11.2.1. Random Forests from [*scikit-learn*](https://scikit-learn.org/stable/modules/ensemble.html#random-forests-and-other-randomized-tree-ensembles) might help to explain this further).\n\nThe \"random\" part of the random forest was introduced in two ways. The first one was via using bootstrap samples, which was also known as bagging or bootstrap aggregating [@bruce2020], where samples were drawn with replacements within the training datasets for each tree built in the ensemble (the perturb-and-combine technique [@breiman1998]). While bootstrap sampling was happening, randomness was also incorporated at the same time into the training sets. The second way randomness was introduced was by using a random subset of features for splitting at the nodes, or a full set of features could also be used instead (although this was generally not recommended). The main goal was to achieve best splits at each node.\n\n<br>\n\n##### **Random forest in *scikit-learn***\n\n*Scikit-learn* had two main types of random forest classes - [ensemble.RandomForestClassifier()](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier) and [ensemble.RandomForestRegressor()](https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.RandomForestRegressor.html#sklearn.ensemble.RandomForestRegressor). When to use which method would depend on the target values. The easiest thing to do was to decide whether the target variables had class labels (binary types or non-continuous variables e.g. yes or no) or continuous variables, which in this case, if I were to continue using the same dataset from last series of blog posts, it would be a continuous variable or feature, pKi, the inhibition constant. \n\nThere were also two alternative random forest methods in *scikit-learn*, which were ensemble.RandomTreesEmbedding() and ensemble.ExtraTreesClassifier() or ensemble.ExtraTreesRegressor(). The difference for RandomTreesEmbedding() was that it was an unsupervised method that used data transformations (details can be accessed from section 1.11.2.6. on \"Totally Random Trees Embedding\" in [*scikit-learn*](https://scikit-learn.org/stable/modules/ensemble.html#random-forests-and-other-randomized-tree-ensembles)). I have not planned on using this unsupervised method in this post, but thought to mention it as it might be useful for others in other different ML scenarios. On the other side, there was also an option to use ExtraTreesClassifier() or ExtraTreesRegressor() to generate extremely randomised trees that would go for another level up in randomness (more deatils in section 1.11.2.2. on Extremely Randomized Trees from [*scikit-learn*](https://scikit-learn.org/stable/modules/ensemble.html#random-forests-and-other-randomized-tree-ensembles)). The main difference for this type of random forest was that while there was already a random subset of feature selection used (with an intention to select the most discerning features), more randomness were added by using purely randomly generated splitting rules for picking features at the nodes.\n\n<br>\n\n##### **Building a random forest regressor model using *scikit-learn***\n\nAs usual, all the required libraries were imported first.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nfrom sklearn.ensemble import RandomForestRegressor\n# Showing version of *scikit-learn* used (including it this time as I think I might have forgotten last time)\nprint(sklearn.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1.2.0\n```\n:::\n:::\n\n\nImporting dataset that was preprocessed from last time (data source: add link to decision tree posts).\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndata = pd.read_csv(\"ache_2d_chembl.csv\")\ndata.drop(columns = [\"Unnamed: 0\"], inplace=True)\n# Preparing data for compounds with max phase as \"null\"\n# Convert max phase with \"NaN\" to \"null\"\ndata[\"max_phase\"].fillna(\"null\", inplace=True)\ndata.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>null</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>null</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>4.0</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>null</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4.0</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Training/testing splits**\n\nI didn't really pay a lot of attentions when I was doing data splits in the last series on decision tree, as my main focus was on building a single tree in order to fully understand and see what could be derived from just one tree. Now, when I reached this series on random forest, I realised I forgot to mention in the last series that data splitting was actually very crucial and impactful on model performance and also outcome predictions. It could also become quite complicated as more approaches were available to split the data, and the way the data was splitted could produce different outcomes. After I've splitted the same dataset based on compounds' max phase assignments and also fitted the training data on the random forest regressor, I went back and had another look, then noticed that, the training and testing data were very imbalanced, and perhaps I should do something to the data before fitting them onto the estimator. \n\nSo I started a simple online search, and after several quick online and also text book reads, I've decided that the likely plan for this series on random forest was to stick with max phase splits for now, since this was a regression problem (as I was trying to predict a continuous variable, inhibition constant, pKi, and not a binary label or outcome). Based on current common ML concensus (Google, StackOverflow, ML mastery examples), imbalanced dataset was more applicable to classification tasks (e.g. binary labels or multi-class labels), rather than regression problems. However, with more current ML researches looking into the issue of imbalanced datasets, there were actually findings using other strategies such as deep imbalanced regression for regression problems too (cite bookmarked paper, there might be more studies in this area as well).\n\n<br>\n\n###### **Preparing training data**\n\nSetting up X variable first via the dataframe, and converting it into a NumPy array X (no. of samples, no. of features), keeping it the same as how it was in the decision tree series.\n\nNote: It's usually a good practice to copy the original data or dataframe for further data manipulations to avoid any unnecessary changes to the original dataset (this was not used in the decision tree posts but since I'm going to use the same set of data again I'd better do this here.)\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# X variables (molecular features)---\n# Make a copy of the original dataframe first\ndata_mp4 = data.copy()\n# Selecting all max phase 4 compounds\ndata_mp4 = data_mp4[data_mp4[\"max_phase\"] == 4]\nprint(data_mp4.shape)\ndata_mp4.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(10, 25)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>CHEMBL95</td>\n      <td>6.821023</td>\n      <td>4.0</td>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>CHEMBL1128</td>\n      <td>6.698970</td>\n      <td>4.0</td>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>CHEMBL640</td>\n      <td>6.000000</td>\n      <td>4.0</td>\n      <td>235.168462</td>\n      <td>0.461538</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>17</td>\n      <td>...</td>\n      <td>1.791687</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>CHEMBL502</td>\n      <td>7.688246</td>\n      <td>4.0</td>\n      <td>379.214744</td>\n      <td>0.458333</td>\n      <td>4</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>28</td>\n      <td>...</td>\n      <td>2.677222</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>CHEMBL481</td>\n      <td>7.296709</td>\n      <td>4.0</td>\n      <td>586.279135</td>\n      <td>0.515152</td>\n      <td>10</td>\n      <td>1</td>\n      <td>7</td>\n      <td>10</td>\n      <td>43</td>\n      <td>...</td>\n      <td>3.632560</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# Select molecular features for X variable\nX_mp4_df = data_mp4[['mw', 'fsp3', 'n_lipinski_hba', 'n_lipinski_hbd', 'n_rings', 'n_hetero_atoms', 'n_heavy_atoms', 'n_rotatable_bonds', 'n_radical_electrons', 'tpsa', 'qed', 'clogp', 'sas', 'n_aliphatic_carbocycles', 'n_aliphatic_heterocyles', 'n_aliphatic_rings', 'n_aromatic_carbocycles', 'n_aromatic_heterocyles', 'n_aromatic_rings', 'n_saturated_carbocycles', 'n_saturated_heterocyles', 'n_saturated_rings']]\n\nprint(X_mp4_df.shape)\nX_mp4_df.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(10, 22)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>n_rotatable_bonds</th>\n      <th>n_radical_electrons</th>\n      <th>tpsa</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>198.115698</td>\n      <td>0.307692</td>\n      <td>2</td>\n      <td>2</td>\n      <td>3</td>\n      <td>2</td>\n      <td>15</td>\n      <td>0</td>\n      <td>0</td>\n      <td>38.91</td>\n      <td>...</td>\n      <td>2.014719</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>201.092042</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>2</td>\n      <td>0</td>\n      <td>20.23</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>235.168462</td>\n      <td>0.461538</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n      <td>4</td>\n      <td>17</td>\n      <td>6</td>\n      <td>0</td>\n      <td>58.36</td>\n      <td>...</td>\n      <td>1.791687</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>379.214744</td>\n      <td>0.458333</td>\n      <td>4</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>28</td>\n      <td>6</td>\n      <td>0</td>\n      <td>38.77</td>\n      <td>...</td>\n      <td>2.677222</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>131</th>\n      <td>586.279135</td>\n      <td>0.515152</td>\n      <td>10</td>\n      <td>1</td>\n      <td>7</td>\n      <td>10</td>\n      <td>43</td>\n      <td>4</td>\n      <td>0</td>\n      <td>114.20</td>\n      <td>...</td>\n      <td>3.632560</td>\n      <td>0</td>\n      <td>4</td>\n      <td>4</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 22 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\n# Convert X_mp4_df to numpy array\nX_mp4 = X_mp4_df.to_numpy()\nX_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\narray([[ 1.98115698e+02,  3.07692308e-01,  2.00000000e+00,\n         2.00000000e+00,  3.00000000e+00,  2.00000000e+00,\n         1.50000000e+01,  0.00000000e+00,  0.00000000e+00,\n         3.89100000e+01,  7.06488238e-01,  2.69580000e+00,\n         2.01471913e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.01092042e+02,  4.00000000e-01,  2.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  3.00000000e+00,\n         1.30000000e+01,  2.00000000e+00,  0.00000000e+00,\n         2.02300000e+01,  6.08112327e-01, -1.01700000e+00,\n         3.18586632e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.35168462e+02,  4.61538462e-01,  4.00000000e+00,\n         3.00000000e+00,  1.00000000e+00,  4.00000000e+00,\n         1.70000000e+01,  6.00000000e+00,  0.00000000e+00,\n         5.83600000e+01,  7.31539693e-01,  1.34040000e+00,\n         1.79168720e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 3.79214744e+02,  4.58333333e-01,  4.00000000e+00,\n         0.00000000e+00,  4.00000000e+00,  4.00000000e+00,\n         2.80000000e+01,  6.00000000e+00,  0.00000000e+00,\n         3.87700000e+01,  7.47461492e-01,  4.36110000e+00,\n         2.67722173e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00],\n       [ 5.86279135e+02,  5.15151515e-01,  1.00000000e+01,\n         1.00000000e+00,  7.00000000e+00,  1.00000000e+01,\n         4.30000000e+01,  4.00000000e+00,  0.00000000e+00,\n         1.14200000e+02,  3.55955569e-01,  4.09110000e+00,\n         3.63256044e+00,  0.00000000e+00,  4.00000000e+00,\n         4.00000000e+00,  1.00000000e+00,  2.00000000e+00,\n         3.00000000e+00,  0.00000000e+00,  2.00000000e+00,\n         2.00000000e+00],\n       [ 5.10461822e+02,  8.00000000e-01,  6.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  6.00000000e+00,\n         3.60000000e+01,  2.10000000e+01,  0.00000000e+00,\n         2.76900000e+01,  2.05822189e-01,  5.45250000e+00,\n         3.25765349e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 1.84066459e+02,  1.00000000e+00,  3.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  5.00000000e+00,\n         1.10000000e+01,  4.00000000e+00,  0.00000000e+00,\n         3.55300000e+01,  6.29869319e-01,  2.91400000e+00,\n         3.34514393e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.87152144e+02,  5.29411765e-01,  4.00000000e+00,\n         1.00000000e+00,  4.00000000e+00,  4.00000000e+00,\n         2.10000000e+01,  1.00000000e+00,  0.00000000e+00,\n         4.19300000e+01,  8.00524269e-01,  1.85030000e+00,\n         4.22684283e+00,  1.00000000e+00,  2.00000000e+00,\n         3.00000000e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 3.48142697e+02,  3.68421053e-01,  2.00000000e+00,\n         0.00000000e+00,  3.00000000e+00,  4.00000000e+00,\n         2.30000000e+01,  5.00000000e+00,  0.00000000e+00,\n         6.48000000e+00,  7.09785317e-01,  5.44140000e+00,\n         4.22359068e+00,  0.00000000e+00,  1.00000000e+00,\n         1.00000000e+00,  2.00000000e+00,  0.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00],\n       [ 2.34092376e+02,  3.07692308e-01,  2.00000000e+00,\n         2.00000000e+00,  3.00000000e+00,  3.00000000e+00,\n         1.60000000e+01,  0.00000000e+00,  0.00000000e+00,\n         3.89100000e+01,  7.60853221e-01,  3.11760000e+00,\n         3.21871482e+00,  1.00000000e+00,  0.00000000e+00,\n         1.00000000e+00,  1.00000000e+00,  1.00000000e+00,\n         2.00000000e+00,  0.00000000e+00,  0.00000000e+00,\n         0.00000000e+00]])\n```\n:::\n:::\n\n\nAgain, setting up y variable via the dataframe as well, and then converting it into a NumPy array y (no. of samples or target values) - also keeping this the same as the one from the decision tree series.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n# y variable (target outcome - pKi)\ny_mp4_df = data_mp4[\"pKi\"]\ny_mp4_df\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n2      6.821023\n4      6.698970\n6      6.000000\n9      7.688246\n131    7.296709\n133    4.431798\n160    5.221849\n171    6.522879\n180    4.607303\n195    6.995679\nName: pKi, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# Convert y_mp4_df to numpy array\ny_mp4 = y_mp4_df.to_numpy()\ny_mp4\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\narray([6.82102305, 6.69897   , 6.        , 7.68824614, 7.29670862,\n       4.43179828, 5.22184875, 6.52287875, 4.60730305, 6.99567863])\n```\n:::\n:::\n\n\n<br>\n\n###### **Training model with the training dataset** \n\nFollowed by fitting RandomForestRegressor() on these X and y variables.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# n_estimators = 100 by default\n# note: if wanting to use whole dataset - switch off \"bootstrap\" parameter by using \"False\"\nrfreg = RandomForestRegressor(max_depth=3, random_state=1)\nrfreg.fit(X_mp4, y_mp4)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestRegressor(max_depth=3, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestRegressor</label><div class=\"sk-toggleable__content\"><pre>RandomForestRegressor(max_depth=3, random_state=1)</pre></div></div></div></div></div>\n```\n:::\n:::\n\n\n<br>\n\n###### **Preparing testing data**\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# Compounds with max phase as \"null\"\ndata_mp_null = data.copy()\n# Selecting all max phase \"null\" compounds\ndata_mp_null = data_mp_null[data_mp_null[\"max_phase\"] == \"null\"]\nprint(data_mp_null.shape)\ndata_mp_null.head() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(466, 25)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>molecule_chembl_id</th>\n      <th>pKi</th>\n      <th>max_phase</th>\n      <th>mw</th>\n      <th>fsp3</th>\n      <th>n_lipinski_hba</th>\n      <th>n_lipinski_hbd</th>\n      <th>n_rings</th>\n      <th>n_hetero_atoms</th>\n      <th>n_heavy_atoms</th>\n      <th>...</th>\n      <th>sas</th>\n      <th>n_aliphatic_carbocycles</th>\n      <th>n_aliphatic_heterocyles</th>\n      <th>n_aliphatic_rings</th>\n      <th>n_aromatic_carbocycles</th>\n      <th>n_aromatic_heterocyles</th>\n      <th>n_aromatic_rings</th>\n      <th>n_saturated_carbocycles</th>\n      <th>n_saturated_heterocyles</th>\n      <th>n_saturated_rings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>CHEMBL60745</td>\n      <td>8.787812</td>\n      <td>null</td>\n      <td>245.041526</td>\n      <td>0.400000</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>13</td>\n      <td>...</td>\n      <td>3.185866</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>CHEMBL208599</td>\n      <td>10.585027</td>\n      <td>null</td>\n      <td>298.123676</td>\n      <td>0.388889</td>\n      <td>2</td>\n      <td>2</td>\n      <td>4</td>\n      <td>3</td>\n      <td>21</td>\n      <td>...</td>\n      <td>4.331775</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>CHEMBL173309</td>\n      <td>7.913640</td>\n      <td>null</td>\n      <td>694.539707</td>\n      <td>0.666667</td>\n      <td>8</td>\n      <td>0</td>\n      <td>2</td>\n      <td>8</td>\n      <td>50</td>\n      <td>...</td>\n      <td>2.803680</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>CHEMBL102226</td>\n      <td>4.698970</td>\n      <td>null</td>\n      <td>297.152928</td>\n      <td>0.923077</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>18</td>\n      <td>...</td>\n      <td>2.965170</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>CHEMBL103873</td>\n      <td>5.698970</td>\n      <td>null</td>\n      <td>269.121628</td>\n      <td>0.909091</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>16</td>\n      <td>...</td>\n      <td>3.097106</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\n# Set up X test variable with the same molecular features\nX_mp_test_df = data_mp_null[['mw', 'fsp3', 'n_lipinski_hba', 'n_lipinski_hbd', 'n_rings', 'n_hetero_atoms', 'n_heavy_atoms', 'n_rotatable_bonds', 'n_radical_electrons', 'tpsa', 'qed', 'clogp', 'sas', 'n_aliphatic_carbocycles', 'n_aliphatic_heterocyles', 'n_aliphatic_rings', 'n_aromatic_carbocycles', 'n_aromatic_heterocyles', 'n_aromatic_rings', 'n_saturated_carbocycles', 'n_saturated_heterocyles', 'n_saturated_rings']]\n\n# Convert X test variables from df to arrays\nX_mp_test = X_mp_test_df.to_numpy()\n\nX_mp_test\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\narray([[2.45041526e+02, 4.00000000e-01, 2.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       [2.98123676e+02, 3.88888889e-01, 2.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       [6.94539707e+02, 6.66666667e-01, 8.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       ...,\n       [3.11152144e+02, 3.15789474e-01, 4.00000000e+00, ...,\n        0.00000000e+00, 0.00000000e+00, 0.00000000e+00],\n       [3.68096076e+02, 9.23076923e-01, 4.00000000e+00, ...,\n        0.00000000e+00, 2.00000000e+00, 2.00000000e+00],\n       [2.46136828e+02, 5.00000000e-01, 4.00000000e+00, ...,\n        0.00000000e+00, 3.00000000e+00, 3.00000000e+00]])\n```\n:::\n:::\n\n\n<br>\n\n###### **Using trained model for prediction on testing data**\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\n# Predict pKi values for the compounds with \"null\" max phase\n# using the training model rfreg \n# Uncomment code below to print prediction result\n#print(rfreg.predict(X_mp_test))\n\n# or use:\ny_mp_test = rfreg.predict(X_mp_test)\n```\n:::\n\n\n<br>\n\n###### **Accuracy of trained model**\n\nChecking model accuracy for both training and testing datasets was actually recommended to occur before moving onto finding out the feature importances. A *scikit-learn* explanation for this could be found in the section on [\"Permutation feature importance\"](https://scikit-learn.org/stable/modules/permutation_importance.html#permutation-feature-importance).\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\n# Training set accuracy\nprint(f\"Random forest regressor training accuracy: {rfreg.score(X_mp4, y_mp4):.2f}\")\n\n# Testing set accuracy\nprint(f\"Random forest regressor testing accuracy: {rfreg.score(X_mp_test, y_mp_test):.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRandom forest regressor training accuracy: 0.82\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\nRandom forest regressor testing accuracy: 1.00\n```\n:::\n:::\n\n\nSo it looked like both the training and testing accuracies for the random forest regressor model (rfreg) were quite high, meaning that the model was able to remember the molecular features well from the training set (the tiny sample of 10 compounds), and the model was able to apply them to the testing set (which should contain about 400s of compounds) as well, in order to make predictions on the target value of pKi. So this has confirmed that the model was indeed making predictions (rather than not making any at all, which meant there might be no point in finding out which features were important in the data, so it was a good checking point during the random forest model building exercise), therefore, we could proceed to the next step of generating some feature importances, which were useful information to fill in the bigger story i.e. which features were pivotal for influencing the pKi values of prescription drugs targeting AChE? \n\n*?optional - May need to add a mean squared error for y_mp4 & y_mp_test (= rfreg.predict(X_mp_test))*\n\n<br>\n\n##### **Feature importances**\n\nThere were two types of feature importances available in *scikit-learn*, which I've described below.\n\n<br>\n\n###### **feature_importances_ attribute from *scikit-learn***\n\nThe impurity-based feature importances (also known as Gini importance).\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\n# Compute feature importances on rfreg training model\nfeature_imp = rfreg.feature_importances_\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# Check what feature_imp looks like (an array)\nfeature_imp\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray([0.01845843, 0.0833086 , 0.00414526, 0.17344377, 0.02473391,\n       0.03119123, 0.03215709, 0.01706784, 0.        , 0.21772693,\n       0.03390372, 0.16184532, 0.07451324, 0.029626  , 0.00256679,\n       0.01350827, 0.02132237, 0.00666429, 0.02731864, 0.        ,\n       0.01323578, 0.01326253])\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Convert the feature_imp array into dataframe\nfeature_imp_df = pd.DataFrame(feature_imp)\n#feature_imp_df\n\n# Obtain feature names via column names of dataframe\n# Rename the index as \"features\"\nfeature = X_mp4_df.columns.rename(\"features\")\n\n# Convert the index to dataframe\nfeature_name_df = feature.to_frame(index = False)\n\n# Concatenate feature_imp_df & feature_name_df\nfeature_df = pd.concat([feature_imp_df, feature_name_df], axis=1)\n\n# Rename the column for feature importances\nfeature_df = feature_df.rename(columns = {0: \"feature_importances\"})\n\n# Sort values of feature importances in descending order\nfeature_df = feature_df.sort_values(\"feature_importances\", ascending=False)\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Seaborn bar plot\nsns.barplot(feature_df, x = \"feature_importances\", y = \"features\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<AxesSubplot: xlabel='feature_importances', ylabel='features'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](1_random_forest_files/figure-html/cell-17-output-2.png){width=732 height=429}\n:::\n:::\n\n\nAn alternative way to plot was via Matplotlib directly (note: Seaborn also uses Matplotlib as well, so the plots are pretty similar). The code below were probably a bit more straightforward but without axes named and values were not sorted.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# Matplotlib plot\nfrom matplotlib import pyplot as plt\nplt.barh(X_mp4_df.columns, rfreg.feature_importances_)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n<BarContainer object of 22 artists>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](1_random_forest_files/figure-html/cell-18-output-2.png){width=714 height=411}\n:::\n:::\n\n\n<br>\n\n###### **permutation_importance function from *scikit-learn***\n\nThere were known issues with the built-in feature_importances_ attribute in *scikit-learn*. As quoted from *scikit-learn* on [feature importance evaluation](https://scikit-learn.org/stable/modules/ensemble.html#feature-importance-evaluation):\n\n>... The impurity-based feature importances computed on tree-based models suffer from two flaws that can lead to misleading conclusions. First they are computed on statistics derived from the training dataset and therefore do not necessarily inform us on which features are most important to make good predictions on held-out dataset. Secondly, they favor high cardinality features, that is features with many unique values. Permutation feature importance is an alternative to impurity-based feature importance that does not suffer from these flaws. ...\n\nSo here I've tried to use the model-agnostic permutation_importance function.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nfrom sklearn.inspection import permutation_importance\n\nperm_result = permutation_importance(rfreg, X_mp_test, y_mp_test, n_repeats=10, random_state=1, n_jobs=2)\n```\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nsorted_perm_result = perm_result.importances_mean.argsort()\n\n# An array\nsorted_perm_result \n\n# Convert array into df\nperm_result_df = pd.DataFrame(sorted_perm_result)\nperm_result_df\n\n# Write a function to convert array to df leading to plots - for use in feature_importances_ & permutation_importance\n\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>17</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>15</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>21</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>13</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>12</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>11</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n<br>\n\n##### **Hyperparameter tuning**\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Import additional ibraries\nfrom numpy import mean, std\n# RepeatedStratifiedKFold usually for binary or multi-class labels - ref link: https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html#sklearn.model_selection.KFold\nfrom sklearn.model_selection import cross_val_score, RepeatedKFold\n```\n:::\n\n\n* Cross validations & hyperparameter tuning \n1. number of trees (n_estimators) \n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\n# ---Evaluate a list of models with different number of trees---\n\n# Define dataset by using the same training dataset as above---\nX, y = X_mp4, y_mp4\n\n# Define function to generate a list of models with different no. of trees---\ndef models():\n    # Create empty dictionary (key, value pairs) for models\n    models = dict()\n    # Test different number of trees to evaluate\n    no_trees = [50, 100, 250, 500, 1000]\n    for n in no_trees:\n        models[str(n)] = RandomForestRegressor(n_estimators=n)\n    return models\n\n\n# Define function to evaluate a single model using cross-validation---\ndef evaluate(model, X, y):\n    # Define evaluation process\n    cross_val = RepeatedKFold(n_splits=10, n_repeats=15, random_state=1)\n    # Run evaluation process & collect cv scores\n    # Since estimator/model was based on DecisionTreeRegressor, using neg_mean_squared_error metric\n    # n_jobs = -1 meaning using all processors to run jobs in parallel\n    scores = cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=cross_val, n_jobs=-1)\n    return scores\n\n\n# Evaluate results---\n# Run models with different RepeatedKFold & different no. of tress\n# with results shown as diff. trees with calculated mean cv scores & std\n\n# Obtain diff. models with diff. trees via models function\nmodels = models()\n\n# Create empty lists for results & names\nresults, names = list(), list()\n\n# Create a for loop to iterate through the list of diff. models\nfor name, model in models.items():\n    # Run the cross validation scores via evaluate function\n    scores = evaluate(model, X, y)\n    # Collect results\n    results.append(scores)\n    # Collect names (different no. of trees)\n    names.append(name)\n    # Show the average mean squared errors and corresponding standard deviations \n    # for each model with diff. no. of trees\n    print((name, mean(scores), std(scores)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n('50', -1.6403811042787264, 1.6239808960540316)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('100', -1.6949298979503984, 1.6317740730469807)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('250', -1.6242103355773783, 1.5925828328899925)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('500', -1.654398026452807, 1.6122292953850932)\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n('1000', -1.651265773385727, 1.6139264703112481)\n```\n:::\n:::\n\n\nBest model performance would be the one with the most negative value for average mean squared error (note: the random forest algorithm was stochastic in nature, so every time it was run, it would provide different results due to random bootstrap sampling, so there wouldn't be a fixed answer). The negated version of the same value was due to how the scoring parameter source code was written in scikit-learn, which was written this way to take into account of both *scoring* functions and *loss* functions (please see provided links below). When the number of trees went past 500 and reaching 1000, we could see an increase in the average mean squared error (the value being less negative), meaning the error increased.\n\n* Links to help understanding neg_mean_squared_error:\n\n1. scikit-learn source code - https://github.com/scikit-learn/scikit-learn/blob/main/sklearn/metrics/_scorer.py#L624\n\n2. StackOverflow answer - https://stackoverflow.com/questions/48244219/is-sklearn-metrics-mean-squared-error-the-larger-the-better-negated\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\n# Matplotlib boxplots for each no. of tree model with average mean squared errors shown\nplt.boxplot(results, labels=names, showmeans=True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](1_random_forest_files/figure-html/cell-23-output-1.png){width=569 height=411}\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Try Seaborn version too\n```\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\n# Show all scoring metrics - URL link: https://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter\n# sklearn.metrics.get_scorer_names() \n```\n:::\n\n\n*Might not actually code for the ones below (due to length of post), but they would be worth looking into if doing full-scale, comprehensive ML models using random forest:\n\n- tree depths (max_depth)\n\n- number of samples (max_samples) (probably won't do this as the training sample size was already very small to start with!)\n\n- number of features (max_features) (can mention using RDKit's version to generate molecular features which would provide 209)\n\n- nodes\n\n* Plots - Black-box ML e.g. if comparing clogp vs. pKi? (unlike white-box ML for decision tree) - or can mention that the feature importances section was necessary to shed some lights and remove some layers of the black-box style of random forest by showing which features were making impacts on the predictive models.\n\n* Other options available in Scikit-learn ensemble methods e.g. voting classifier/regressor or stacking models to reduce biases\n\n* Aim to keep post short and succinct!\n\n",
    "supporting": [
      "1_random_forest_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}